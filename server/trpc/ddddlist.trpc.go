// Code generated by trpc-go/trpc-cmdline v1.0.6. DO NOT EDIT.
// source: ddddlist.proto

package trpc

import (
	"context"
	"errors"
	"fmt"
	server2 "github.com/Tontonnow/ddddhmlist/server"

	_ "trpc.group/trpc-go/trpc-go"
	"trpc.group/trpc-go/trpc-go/client"
	"trpc.group/trpc-go/trpc-go/codec"
	_ "trpc.group/trpc-go/trpc-go/http"
	"trpc.group/trpc-go/trpc-go/server"
)

// START ======================================= Server Service Definition ======================================= START

// DDDDhmService defines service.
type DDDDhmService interface {
	DdddList(ctx context.Context, req *server2.Request) (*server2.Response, error)

	Hello(ctx context.Context, req *server2.HelloRequest) (*server2.HelloResponse, error)
}

func DDDDhmService_DdddList_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &server2.Request{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(DDDDhmService).DdddList(ctx, reqbody.(*server2.Request))
	}

	var rsp interface{}
	rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func DDDDhmService_Hello_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &server2.HelloRequest{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(DDDDhmService).Hello(ctx, reqbody.(*server2.HelloRequest))
	}

	var rsp interface{}
	rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

// DDDDhmServer_ServiceDesc descriptor for server.RegisterService.
var DDDDhmServer_ServiceDesc = server.ServiceDesc{
	ServiceName: "server.DDDDhm",
	HandlerType: ((*DDDDhmService)(nil)),
	Methods: []server.Method{
		{
			Name: "/api/v1/ddddlist",
			Func: DDDDhmService_DdddList_Handler,
		},
		{
			Name: "/api/v1/helloworld",
			Func: DDDDhmService_Hello_Handler,
		},
		{
			Name: "/server.DDDDhm/DdddList",
			Func: DDDDhmService_DdddList_Handler,
		},
		{
			Name: "/server.DDDDhm/Hello",
			Func: DDDDhmService_Hello_Handler,
		},
	},
}

// RegisterDDDDhmService registers service.
func RegisterDDDDhmService(s server.Service, svr DDDDhmService) {
	if err := s.Register(&DDDDhmServer_ServiceDesc, svr); err != nil {
		panic(fmt.Sprintf("DDDDhm register error:%v", err))
	}
}

// START --------------------------------- Default Unimplemented Server Service --------------------------------- START

type UnimplementedDDDDhm struct{}

func (s *UnimplementedDDDDhm) DdddList(ctx context.Context, req *server2.Request) (*server2.Response, error) {
	return nil, errors.New("rpc DdddList of service DDDDhm is not implemented")
}
func (s *UnimplementedDDDDhm) Hello(ctx context.Context, req *server2.HelloRequest) (*server2.HelloResponse, error) {
	return nil, errors.New("rpc Hello of service DDDDhm is not implemented")
}

// END --------------------------------- Default Unimplemented Server Service --------------------------------- END

// END ======================================= Server Service Definition ======================================= END

// START ======================================= Client Service Definition ======================================= START

// DDDDhmClientProxy defines service client proxy
type DDDDhmClientProxy interface {
	DdddList(ctx context.Context, req *server2.Request, opts ...client.Option) (rsp *server2.Response, err error)

	Hello(ctx context.Context, req *server2.HelloRequest, opts ...client.Option) (rsp *server2.HelloResponse, err error)
}

type DDDDhmClientProxyImpl struct {
	client client.Client
	opts   []client.Option
}

var NewDDDDhmClientProxy = func(opts ...client.Option) DDDDhmClientProxy {
	return &DDDDhmClientProxyImpl{client: client.DefaultClient, opts: opts}
}

func (c *DDDDhmClientProxyImpl) DdddList(ctx context.Context, req *server2.Request, opts ...client.Option) (*server2.Response, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/api/v1/ddddlist")
	msg.WithCalleeServiceName(DDDDhmServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("DDDDhm")
	msg.WithCalleeMethod("DdddList")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &server2.Response{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *DDDDhmClientProxyImpl) Hello(ctx context.Context, req *server2.HelloRequest, opts ...client.Option) (*server2.HelloResponse, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/api/v1/helloworld")
	msg.WithCalleeServiceName(DDDDhmServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("DDDDhm")
	msg.WithCalleeMethod("Hello")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &server2.HelloResponse{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

// END ======================================= Client Service Definition ======================================= END
