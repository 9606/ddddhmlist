// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.21.4
// source: feed_data.proto

package QQTV

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DetailsCPInfoScene int32

const (
	DetailsCPInfoScene_DETAILS DetailsCPInfoScene = 0
	DetailsCPInfoScene_SEARCH  DetailsCPInfoScene = 1
)

// Enum value maps for DetailsCPInfoScene.
var (
	DetailsCPInfoScene_name = map[int32]string{
		0: "DETAILS",
		1: "SEARCH",
	}
	DetailsCPInfoScene_value = map[string]int32{
		"DETAILS": 0,
		"SEARCH":  1,
	}
)

func (x DetailsCPInfoScene) Enum() *DetailsCPInfoScene {
	p := new(DetailsCPInfoScene)
	*p = x
	return p
}

func (x DetailsCPInfoScene) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DetailsCPInfoScene) Descriptor() protoreflect.EnumDescriptor {
	return file_feed_data_proto_enumTypes[0].Descriptor()
}

func (DetailsCPInfoScene) Type() protoreflect.EnumType {
	return &file_feed_data_proto_enumTypes[0]
}

func (x DetailsCPInfoScene) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DetailsCPInfoScene.Descriptor instead.
func (DetailsCPInfoScene) EnumDescriptor() ([]byte, []int) {
	return file_feed_data_proto_rawDescGZIP(), []int{0}
}

type VIPPrBannerType int32

const (
	VIPPrBannerType_VIP_PR_TYPE_ONLY_IMAGE VIPPrBannerType = 0
	VIPPrBannerType_VIP_PR_TYPE_NO_PRICE   VIPPrBannerType = 1
	VIPPrBannerType_VIP_PR_TYPE_HAVE_PRICE VIPPrBannerType = 2
)

// Enum value maps for VIPPrBannerType.
var (
	VIPPrBannerType_name = map[int32]string{
		0: "VIP_PR_TYPE_ONLY_IMAGE",
		1: "VIP_PR_TYPE_NO_PRICE",
		2: "VIP_PR_TYPE_HAVE_PRICE",
	}
	VIPPrBannerType_value = map[string]int32{
		"VIP_PR_TYPE_ONLY_IMAGE": 0,
		"VIP_PR_TYPE_NO_PRICE":   1,
		"VIP_PR_TYPE_HAVE_PRICE": 2,
	}
)

func (x VIPPrBannerType) Enum() *VIPPrBannerType {
	p := new(VIPPrBannerType)
	*p = x
	return p
}

func (x VIPPrBannerType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VIPPrBannerType) Descriptor() protoreflect.EnumDescriptor {
	return file_feed_data_proto_enumTypes[1].Descriptor()
}

func (VIPPrBannerType) Type() protoreflect.EnumType {
	return &file_feed_data_proto_enumTypes[1]
}

func (x VIPPrBannerType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VIPPrBannerType.Descriptor instead.
func (VIPPrBannerType) EnumDescriptor() ([]byte, []int) {
	return file_feed_data_proto_rawDescGZIP(), []int{1}
}

type RecommendX2ItemType int32

const (
	RecommendX2ItemType_TYPE_RECOMMENDX2_JUMP   RecommendX2ItemType = 0
	RecommendX2ItemType_TYPE_RECOMMENDX2_POSTER RecommendX2ItemType = 1
)

// Enum value maps for RecommendX2ItemType.
var (
	RecommendX2ItemType_name = map[int32]string{
		0: "TYPE_RECOMMENDX2_JUMP",
		1: "TYPE_RECOMMENDX2_POSTER",
	}
	RecommendX2ItemType_value = map[string]int32{
		"TYPE_RECOMMENDX2_JUMP":   0,
		"TYPE_RECOMMENDX2_POSTER": 1,
	}
)

func (x RecommendX2ItemType) Enum() *RecommendX2ItemType {
	p := new(RecommendX2ItemType)
	*p = x
	return p
}

func (x RecommendX2ItemType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RecommendX2ItemType) Descriptor() protoreflect.EnumDescriptor {
	return file_feed_data_proto_enumTypes[2].Descriptor()
}

func (RecommendX2ItemType) Type() protoreflect.EnumType {
	return &file_feed_data_proto_enumTypes[2]
}

func (x RecommendX2ItemType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RecommendX2ItemType.Descriptor instead.
func (RecommendX2ItemType) EnumDescriptor() ([]byte, []int) {
	return file_feed_data_proto_rawDescGZIP(), []int{2}
}

type ChannelFeedItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type     *string `protobuf:"bytes,1,opt,name=type,proto3,oneof" json:"type,omitempty"`
	FeedData []byte  `protobuf:"bytes,2,opt,name=feed_data,json=feedData,proto3,oneof" json:"feed_data,omitempty"`
}

func (x *ChannelFeedItem) Reset() {
	*x = ChannelFeedItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feed_data_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelFeedItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelFeedItem) ProtoMessage() {}

func (x *ChannelFeedItem) ProtoReflect() protoreflect.Message {
	mi := &file_feed_data_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelFeedItem.ProtoReflect.Descriptor instead.
func (*ChannelFeedItem) Descriptor() ([]byte, []int) {
	return file_feed_data_proto_rawDescGZIP(), []int{0}
}

func (x *ChannelFeedItem) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *ChannelFeedItem) GetFeedData() []byte {
	if x != nil {
		return x.FeedData
	}
	return nil
}

type FeedPosterTitle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title      *string `protobuf:"bytes,1,opt,name=title,proto3,oneof" json:"title,omitempty"`
	Subtitle   *string `protobuf:"bytes,2,opt,name=subtitle,proto3,oneof" json:"subtitle,omitempty"`
	RightArrow *bool   `protobuf:"varint,3,opt,name=right_arrow,json=rightArrow,proto3,oneof" json:"right_arrow,omitempty"`
	Action     *Action `protobuf:"bytes,4,opt,name=action,proto3,oneof" json:"action,omitempty"`
	DetailInfo *string `protobuf:"bytes,5,opt,name=detail_info,json=detailInfo,proto3,oneof" json:"detail_info,omitempty"`
}

func (x *FeedPosterTitle) Reset() {
	*x = FeedPosterTitle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feed_data_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeedPosterTitle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeedPosterTitle) ProtoMessage() {}

func (x *FeedPosterTitle) ProtoReflect() protoreflect.Message {
	mi := &file_feed_data_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeedPosterTitle.ProtoReflect.Descriptor instead.
func (*FeedPosterTitle) Descriptor() ([]byte, []int) {
	return file_feed_data_proto_rawDescGZIP(), []int{1}
}

func (x *FeedPosterTitle) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *FeedPosterTitle) GetSubtitle() string {
	if x != nil && x.Subtitle != nil {
		return *x.Subtitle
	}
	return ""
}

func (x *FeedPosterTitle) GetRightArrow() bool {
	if x != nil && x.RightArrow != nil {
		return *x.RightArrow
	}
	return false
}

func (x *FeedPosterTitle) GetAction() *Action {
	if x != nil {
		return x.Action
	}
	return nil
}

func (x *FeedPosterTitle) GetDetailInfo() string {
	if x != nil && x.DetailInfo != nil {
		return *x.DetailInfo
	}
	return ""
}

type FeedPosterList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PosterList []*Poster   `protobuf:"bytes,1,rep,name=poster_list,json=posterList,proto3" json:"poster_list,omitempty"`
	BtnMore    *ButtonMore `protobuf:"bytes,2,opt,name=btn_more,json=btnMore,proto3,oneof" json:"btn_more,omitempty"`
}

func (x *FeedPosterList) Reset() {
	*x = FeedPosterList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feed_data_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeedPosterList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeedPosterList) ProtoMessage() {}

func (x *FeedPosterList) ProtoReflect() protoreflect.Message {
	mi := &file_feed_data_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeedPosterList.ProtoReflect.Descriptor instead.
func (*FeedPosterList) Descriptor() ([]byte, []int) {
	return file_feed_data_proto_rawDescGZIP(), []int{2}
}

func (x *FeedPosterList) GetPosterList() []*Poster {
	if x != nil {
		return x.PosterList
	}
	return nil
}

func (x *FeedPosterList) GetBtnMore() *ButtonMore {
	if x != nil {
		return x.BtnMore
	}
	return nil
}

type FeedPosterX2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PosterList []*Poster `protobuf:"bytes,1,rep,name=poster_list,json=posterList,proto3" json:"poster_list,omitempty"`
}

func (x *FeedPosterX2) Reset() {
	*x = FeedPosterX2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feed_data_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeedPosterX2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeedPosterX2) ProtoMessage() {}

func (x *FeedPosterX2) ProtoReflect() protoreflect.Message {
	mi := &file_feed_data_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeedPosterX2.ProtoReflect.Descriptor instead.
func (*FeedPosterX2) Descriptor() ([]byte, []int) {
	return file_feed_data_proto_rawDescGZIP(), []int{3}
}

func (x *FeedPosterX2) GetPosterList() []*Poster {
	if x != nil {
		return x.PosterList
	}
	return nil
}

type FeedTopicPosterX2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PosterList []*Poster `protobuf:"bytes,1,rep,name=poster_list,json=posterList,proto3" json:"poster_list,omitempty"`
}

func (x *FeedTopicPosterX2) Reset() {
	*x = FeedTopicPosterX2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feed_data_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeedTopicPosterX2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeedTopicPosterX2) ProtoMessage() {}

func (x *FeedTopicPosterX2) ProtoReflect() protoreflect.Message {
	mi := &file_feed_data_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeedTopicPosterX2.ProtoReflect.Descriptor instead.
func (*FeedTopicPosterX2) Descriptor() ([]byte, []int) {
	return file_feed_data_proto_rawDescGZIP(), []int{4}
}

func (x *FeedTopicPosterX2) GetPosterList() []*Poster {
	if x != nil {
		return x.PosterList
	}
	return nil
}

type FeedFocusPosters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PosterList []*Poster `protobuf:"bytes,1,rep,name=poster_list,json=posterList,proto3" json:"poster_list,omitempty"`
}

func (x *FeedFocusPosters) Reset() {
	*x = FeedFocusPosters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feed_data_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeedFocusPosters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeedFocusPosters) ProtoMessage() {}

func (x *FeedFocusPosters) ProtoReflect() protoreflect.Message {
	mi := &file_feed_data_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeedFocusPosters.ProtoReflect.Descriptor instead.
func (*FeedFocusPosters) Descriptor() ([]byte, []int) {
	return file_feed_data_proto_rawDescGZIP(), []int{5}
}

func (x *FeedFocusPosters) GetPosterList() []*Poster {
	if x != nil {
		return x.PosterList
	}
	return nil
}

type FeedLoopPosters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PosterList []*Poster `protobuf:"bytes,1,rep,name=poster_list,json=posterList,proto3" json:"poster_list,omitempty"`
}

func (x *FeedLoopPosters) Reset() {
	*x = FeedLoopPosters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feed_data_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeedLoopPosters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeedLoopPosters) ProtoMessage() {}

func (x *FeedLoopPosters) ProtoReflect() protoreflect.Message {
	mi := &file_feed_data_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeedLoopPosters.ProtoReflect.Descriptor instead.
func (*FeedLoopPosters) Descriptor() ([]byte, []int) {
	return file_feed_data_proto_rawDescGZIP(), []int{6}
}

func (x *FeedLoopPosters) GetPosterList() []*Poster {
	if x != nil {
		return x.PosterList
	}
	return nil
}

type PosterWithBar struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Poster *Poster `protobuf:"bytes,1,opt,name=poster,proto3,oneof" json:"poster,omitempty"`
	Bar    *Poster `protobuf:"bytes,2,opt,name=bar,proto3,oneof" json:"bar,omitempty"`
}

func (x *PosterWithBar) Reset() {
	*x = PosterWithBar{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feed_data_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PosterWithBar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PosterWithBar) ProtoMessage() {}

func (x *PosterWithBar) ProtoReflect() protoreflect.Message {
	mi := &file_feed_data_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PosterWithBar.ProtoReflect.Descriptor instead.
func (*PosterWithBar) Descriptor() ([]byte, []int) {
	return file_feed_data_proto_rawDescGZIP(), []int{7}
}

func (x *PosterWithBar) GetPoster() *Poster {
	if x != nil {
		return x.Poster
	}
	return nil
}

func (x *PosterWithBar) GetBar() *Poster {
	if x != nil {
		return x.Bar
	}
	return nil
}

type FeedSearchBigPoster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Poster         *Poster           `protobuf:"bytes,1,opt,name=poster,proto3,oneof" json:"poster,omitempty"`
	TagLabelList   []*TagLabel       `protobuf:"bytes,2,rep,name=tag_label_list,json=tagLabelList,proto3" json:"tag_label_list,omitempty"`
	PosterList     []*Poster         `protobuf:"bytes,3,rep,name=poster_list,json=posterList,proto3" json:"poster_list,omitempty"`
	Type           *SearchPosterType `protobuf:"varint,4,opt,name=type,proto3,enum=QQTV.SearchPosterType,oneof" json:"type,omitempty"`
	DownloadAction *Action           `protobuf:"bytes,5,opt,name=download_action,json=downloadAction,proto3,oneof" json:"download_action,omitempty"`
	ReportData     *ReportData       `protobuf:"bytes,6,opt,name=report_data,json=reportData,proto3,oneof" json:"report_data,omitempty"`
	ViewAllAction  *Action           `protobuf:"bytes,7,opt,name=view_all_action,json=viewAllAction,proto3,oneof" json:"view_all_action,omitempty"`
	EpisodeNumber  *int32            `protobuf:"varint,8,opt,name=episode_number,json=episodeNumber,proto3,oneof" json:"episode_number,omitempty"`
}

func (x *FeedSearchBigPoster) Reset() {
	*x = FeedSearchBigPoster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feed_data_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeedSearchBigPoster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeedSearchBigPoster) ProtoMessage() {}

func (x *FeedSearchBigPoster) ProtoReflect() protoreflect.Message {
	mi := &file_feed_data_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeedSearchBigPoster.ProtoReflect.Descriptor instead.
func (*FeedSearchBigPoster) Descriptor() ([]byte, []int) {
	return file_feed_data_proto_rawDescGZIP(), []int{8}
}

func (x *FeedSearchBigPoster) GetPoster() *Poster {
	if x != nil {
		return x.Poster
	}
	return nil
}

func (x *FeedSearchBigPoster) GetTagLabelList() []*TagLabel {
	if x != nil {
		return x.TagLabelList
	}
	return nil
}

func (x *FeedSearchBigPoster) GetPosterList() []*Poster {
	if x != nil {
		return x.PosterList
	}
	return nil
}

func (x *FeedSearchBigPoster) GetType() SearchPosterType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return SearchPosterType_TYPE_SMALL
}

func (x *FeedSearchBigPoster) GetDownloadAction() *Action {
	if x != nil {
		return x.DownloadAction
	}
	return nil
}

func (x *FeedSearchBigPoster) GetReportData() *ReportData {
	if x != nil {
		return x.ReportData
	}
	return nil
}

func (x *FeedSearchBigPoster) GetViewAllAction() *Action {
	if x != nil {
		return x.ViewAllAction
	}
	return nil
}

func (x *FeedSearchBigPoster) GetEpisodeNumber() int32 {
	if x != nil && x.EpisodeNumber != nil {
		return *x.EpisodeNumber
	}
	return 0
}

type FeedSearchVipBanner struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImageUrl      *string       `protobuf:"bytes,1,opt,name=image_url,json=imageUrl,proto3,oneof" json:"image_url,omitempty"`
	JumpUrl       *string       `protobuf:"bytes,2,opt,name=jump_url,json=jumpUrl,proto3,oneof" json:"jump_url,omitempty"`
	Title         *string       `protobuf:"bytes,3,opt,name=title,proto3,oneof" json:"title,omitempty"`
	ButtonContent *string       `protobuf:"bytes,4,opt,name=button_content,json=buttonContent,proto3,oneof" json:"button_content,omitempty"`
	ReportData    []*ReportData `protobuf:"bytes,5,rep,name=report_data,json=reportData,proto3" json:"report_data,omitempty"`
}

func (x *FeedSearchVipBanner) Reset() {
	*x = FeedSearchVipBanner{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feed_data_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeedSearchVipBanner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeedSearchVipBanner) ProtoMessage() {}

func (x *FeedSearchVipBanner) ProtoReflect() protoreflect.Message {
	mi := &file_feed_data_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeedSearchVipBanner.ProtoReflect.Descriptor instead.
func (*FeedSearchVipBanner) Descriptor() ([]byte, []int) {
	return file_feed_data_proto_rawDescGZIP(), []int{9}
}

func (x *FeedSearchVipBanner) GetImageUrl() string {
	if x != nil && x.ImageUrl != nil {
		return *x.ImageUrl
	}
	return ""
}

func (x *FeedSearchVipBanner) GetJumpUrl() string {
	if x != nil && x.JumpUrl != nil {
		return *x.JumpUrl
	}
	return ""
}

func (x *FeedSearchVipBanner) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *FeedSearchVipBanner) GetButtonContent() string {
	if x != nil && x.ButtonContent != nil {
		return *x.ButtonContent
	}
	return ""
}

func (x *FeedSearchVipBanner) GetReportData() []*ReportData {
	if x != nil {
		return x.ReportData
	}
	return nil
}

type FeedSearchActionBanner struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImageUrl   *string       `protobuf:"bytes,1,opt,name=image_url,json=imageUrl,proto3,oneof" json:"image_url,omitempty"`
	JumpUrl    *string       `protobuf:"bytes,2,opt,name=jump_url,json=jumpUrl,proto3,oneof" json:"jump_url,omitempty"`
	ReportData []*ReportData `protobuf:"bytes,3,rep,name=report_data,json=reportData,proto3" json:"report_data,omitempty"`
}

func (x *FeedSearchActionBanner) Reset() {
	*x = FeedSearchActionBanner{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feed_data_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeedSearchActionBanner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeedSearchActionBanner) ProtoMessage() {}

func (x *FeedSearchActionBanner) ProtoReflect() protoreflect.Message {
	mi := &file_feed_data_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeedSearchActionBanner.ProtoReflect.Descriptor instead.
func (*FeedSearchActionBanner) Descriptor() ([]byte, []int) {
	return file_feed_data_proto_rawDescGZIP(), []int{10}
}

func (x *FeedSearchActionBanner) GetImageUrl() string {
	if x != nil && x.ImageUrl != nil {
		return *x.ImageUrl
	}
	return ""
}

func (x *FeedSearchActionBanner) GetJumpUrl() string {
	if x != nil && x.JumpUrl != nil {
		return *x.JumpUrl
	}
	return ""
}

func (x *FeedSearchActionBanner) GetReportData() []*ReportData {
	if x != nil {
		return x.ReportData
	}
	return nil
}

type FeedSearchPoster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Poster       *Poster     `protobuf:"bytes,1,opt,name=poster,proto3,oneof" json:"poster,omitempty"`
	TagLabelList []*TagLabel `protobuf:"bytes,2,rep,name=tag_label_list,json=tagLabelList,proto3" json:"tag_label_list,omitempty"`
}

func (x *FeedSearchPoster) Reset() {
	*x = FeedSearchPoster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feed_data_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeedSearchPoster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeedSearchPoster) ProtoMessage() {}

func (x *FeedSearchPoster) ProtoReflect() protoreflect.Message {
	mi := &file_feed_data_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeedSearchPoster.ProtoReflect.Descriptor instead.
func (*FeedSearchPoster) Descriptor() ([]byte, []int) {
	return file_feed_data_proto_rawDescGZIP(), []int{11}
}

func (x *FeedSearchPoster) GetPoster() *Poster {
	if x != nil {
		return x.Poster
	}
	return nil
}

func (x *FeedSearchPoster) GetTagLabelList() []*TagLabel {
	if x != nil {
		return x.TagLabelList
	}
	return nil
}

type FeedNoSearchHit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title      *string     `protobuf:"bytes,1,opt,name=title,proto3,oneof" json:"title,omitempty"`
	Details    *string     `protobuf:"bytes,2,opt,name=details,proto3,oneof" json:"details,omitempty"`
	Action     *Action     `protobuf:"bytes,3,opt,name=action,proto3,oneof" json:"action,omitempty"`
	Reportdata *ReportData `protobuf:"bytes,4,opt,name=reportdata,proto3,oneof" json:"reportdata,omitempty"`
}

func (x *FeedNoSearchHit) Reset() {
	*x = FeedNoSearchHit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feed_data_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeedNoSearchHit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeedNoSearchHit) ProtoMessage() {}

func (x *FeedNoSearchHit) ProtoReflect() protoreflect.Message {
	mi := &file_feed_data_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeedNoSearchHit.ProtoReflect.Descriptor instead.
func (*FeedNoSearchHit) Descriptor() ([]byte, []int) {
	return file_feed_data_proto_rawDescGZIP(), []int{12}
}

func (x *FeedNoSearchHit) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *FeedNoSearchHit) GetDetails() string {
	if x != nil && x.Details != nil {
		return *x.Details
	}
	return ""
}

func (x *FeedNoSearchHit) GetAction() *Action {
	if x != nil {
		return x.Action
	}
	return nil
}

func (x *FeedNoSearchHit) GetReportdata() *ReportData {
	if x != nil {
		return x.Reportdata
	}
	return nil
}

type FeedSearchShortVideo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Poster      *Poster      `protobuf:"bytes,1,opt,name=poster,proto3,oneof" json:"poster,omitempty"`
	VideoOption *VideoOption `protobuf:"bytes,2,opt,name=video_option,json=videoOption,proto3,oneof" json:"video_option,omitempty"`
	Reportdata  *ReportData  `protobuf:"bytes,3,opt,name=reportdata,proto3,oneof" json:"reportdata,omitempty"`
}

func (x *FeedSearchShortVideo) Reset() {
	*x = FeedSearchShortVideo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feed_data_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeedSearchShortVideo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeedSearchShortVideo) ProtoMessage() {}

func (x *FeedSearchShortVideo) ProtoReflect() protoreflect.Message {
	mi := &file_feed_data_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeedSearchShortVideo.ProtoReflect.Descriptor instead.
func (*FeedSearchShortVideo) Descriptor() ([]byte, []int) {
	return file_feed_data_proto_rawDescGZIP(), []int{13}
}

func (x *FeedSearchShortVideo) GetPoster() *Poster {
	if x != nil {
		return x.Poster
	}
	return nil
}

func (x *FeedSearchShortVideo) GetVideoOption() *VideoOption {
	if x != nil {
		return x.VideoOption
	}
	return nil
}

func (x *FeedSearchShortVideo) GetReportdata() *ReportData {
	if x != nil {
		return x.Reportdata
	}
	return nil
}

type FeedPosterX3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Poster     []*Poster   `protobuf:"bytes,1,rep,name=poster,proto3" json:"poster,omitempty"`
	Reportdata *ReportData `protobuf:"bytes,2,opt,name=reportdata,proto3,oneof" json:"reportdata,omitempty"`
}

func (x *FeedPosterX3) Reset() {
	*x = FeedPosterX3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feed_data_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeedPosterX3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeedPosterX3) ProtoMessage() {}

func (x *FeedPosterX3) ProtoReflect() protoreflect.Message {
	mi := &file_feed_data_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeedPosterX3.ProtoReflect.Descriptor instead.
func (*FeedPosterX3) Descriptor() ([]byte, []int) {
	return file_feed_data_proto_rawDescGZIP(), []int{14}
}

func (x *FeedPosterX3) GetPoster() []*Poster {
	if x != nil {
		return x.Poster
	}
	return nil
}

func (x *FeedPosterX3) GetReportdata() *ReportData {
	if x != nil {
		return x.Reportdata
	}
	return nil
}

type FeedLoopPostersWithBar struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PosterList []*PosterWithBar `protobuf:"bytes,1,rep,name=poster_list,json=posterList,proto3" json:"poster_list,omitempty"`
}

func (x *FeedLoopPostersWithBar) Reset() {
	*x = FeedLoopPostersWithBar{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feed_data_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeedLoopPostersWithBar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeedLoopPostersWithBar) ProtoMessage() {}

func (x *FeedLoopPostersWithBar) ProtoReflect() protoreflect.Message {
	mi := &file_feed_data_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeedLoopPostersWithBar.ProtoReflect.Descriptor instead.
func (*FeedLoopPostersWithBar) Descriptor() ([]byte, []int) {
	return file_feed_data_proto_rawDescGZIP(), []int{15}
}

func (x *FeedLoopPostersWithBar) GetPosterList() []*PosterWithBar {
	if x != nil {
		return x.PosterList
	}
	return nil
}

type FeedPortraitPosterList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PosterList []*Poster   `protobuf:"bytes,1,rep,name=poster_list,json=posterList,proto3" json:"poster_list,omitempty"`
	BtnMore    *ButtonMore `protobuf:"bytes,2,opt,name=btn_more,json=btnMore,proto3,oneof" json:"btn_more,omitempty"`
}

func (x *FeedPortraitPosterList) Reset() {
	*x = FeedPortraitPosterList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feed_data_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeedPortraitPosterList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeedPortraitPosterList) ProtoMessage() {}

func (x *FeedPortraitPosterList) ProtoReflect() protoreflect.Message {
	mi := &file_feed_data_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeedPortraitPosterList.ProtoReflect.Descriptor instead.
func (*FeedPortraitPosterList) Descriptor() ([]byte, []int) {
	return file_feed_data_proto_rawDescGZIP(), []int{16}
}

func (x *FeedPortraitPosterList) GetPosterList() []*Poster {
	if x != nil {
		return x.PosterList
	}
	return nil
}

func (x *FeedPortraitPosterList) GetBtnMore() *ButtonMore {
	if x != nil {
		return x.BtnMore
	}
	return nil
}

type FeedRankPosterList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RankPosterList []*RankPoster `protobuf:"bytes,1,rep,name=rank_poster_list,json=rankPosterList,proto3" json:"rank_poster_list,omitempty"`
	BtnMore        *ButtonMore   `protobuf:"bytes,2,opt,name=btn_more,json=btnMore,proto3,oneof" json:"btn_more,omitempty"`
}

func (x *FeedRankPosterList) Reset() {
	*x = FeedRankPosterList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feed_data_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeedRankPosterList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeedRankPosterList) ProtoMessage() {}

func (x *FeedRankPosterList) ProtoReflect() protoreflect.Message {
	mi := &file_feed_data_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeedRankPosterList.ProtoReflect.Descriptor instead.
func (*FeedRankPosterList) Descriptor() ([]byte, []int) {
	return file_feed_data_proto_rawDescGZIP(), []int{17}
}

func (x *FeedRankPosterList) GetRankPosterList() []*RankPoster {
	if x != nil {
		return x.RankPosterList
	}
	return nil
}

func (x *FeedRankPosterList) GetBtnMore() *ButtonMore {
	if x != nil {
		return x.BtnMore
	}
	return nil
}

type ActionButton struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BgImg      *string     `protobuf:"bytes,1,opt,name=bg_img,json=bgImg,proto3,oneof" json:"bg_img,omitempty"`
	Title      *string     `protobuf:"bytes,2,opt,name=title,proto3,oneof" json:"title,omitempty"`
	Subtitle   *string     `protobuf:"bytes,3,opt,name=subtitle,proto3,oneof" json:"subtitle,omitempty"`
	Action     *Action     `protobuf:"bytes,4,opt,name=action,proto3,oneof" json:"action,omitempty"`
	Reportdata *ReportData `protobuf:"bytes,5,opt,name=reportdata,proto3,oneof" json:"reportdata,omitempty"`
	HeaderImg  *string     `protobuf:"bytes,6,opt,name=header_img,json=headerImg,proto3,oneof" json:"header_img,omitempty"`
}

func (x *ActionButton) Reset() {
	*x = ActionButton{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feed_data_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionButton) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionButton) ProtoMessage() {}

func (x *ActionButton) ProtoReflect() protoreflect.Message {
	mi := &file_feed_data_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionButton.ProtoReflect.Descriptor instead.
func (*ActionButton) Descriptor() ([]byte, []int) {
	return file_feed_data_proto_rawDescGZIP(), []int{18}
}

func (x *ActionButton) GetBgImg() string {
	if x != nil && x.BgImg != nil {
		return *x.BgImg
	}
	return ""
}

func (x *ActionButton) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *ActionButton) GetSubtitle() string {
	if x != nil && x.Subtitle != nil {
		return *x.Subtitle
	}
	return ""
}

func (x *ActionButton) GetAction() *Action {
	if x != nil {
		return x.Action
	}
	return nil
}

func (x *ActionButton) GetReportdata() *ReportData {
	if x != nil {
		return x.Reportdata
	}
	return nil
}

func (x *ActionButton) GetHeaderImg() string {
	if x != nil && x.HeaderImg != nil {
		return *x.HeaderImg
	}
	return ""
}

type FeedActionButtonList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActionButtonList []*ActionButton `protobuf:"bytes,1,rep,name=action_button_list,json=actionButtonList,proto3" json:"action_button_list,omitempty"`
}

func (x *FeedActionButtonList) Reset() {
	*x = FeedActionButtonList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feed_data_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeedActionButtonList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeedActionButtonList) ProtoMessage() {}

func (x *FeedActionButtonList) ProtoReflect() protoreflect.Message {
	mi := &file_feed_data_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeedActionButtonList.ProtoReflect.Descriptor instead.
func (*FeedActionButtonList) Descriptor() ([]byte, []int) {
	return file_feed_data_proto_rawDescGZIP(), []int{19}
}

func (x *FeedActionButtonList) GetActionButtonList() []*ActionButton {
	if x != nil {
		return x.ActionButtonList
	}
	return nil
}

type FeedMoreButton struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text   *string `protobuf:"bytes,1,opt,name=text,proto3,oneof" json:"text,omitempty"`
	Action *Action `protobuf:"bytes,2,opt,name=action,proto3,oneof" json:"action,omitempty"`
}

func (x *FeedMoreButton) Reset() {
	*x = FeedMoreButton{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feed_data_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeedMoreButton) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeedMoreButton) ProtoMessage() {}

func (x *FeedMoreButton) ProtoReflect() protoreflect.Message {
	mi := &file_feed_data_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeedMoreButton.ProtoReflect.Descriptor instead.
func (*FeedMoreButton) Descriptor() ([]byte, []int) {
	return file_feed_data_proto_rawDescGZIP(), []int{20}
}

func (x *FeedMoreButton) GetText() string {
	if x != nil && x.Text != nil {
		return *x.Text
	}
	return ""
}

func (x *FeedMoreButton) GetAction() *Action {
	if x != nil {
		return x.Action
	}
	return nil
}

type PosterBanner struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Poster    *Poster    `protobuf:"bytes,1,opt,name=poster,proto3,oneof" json:"poster,omitempty"`
	Title     *string    `protobuf:"bytes,2,opt,name=title,proto3,oneof" json:"title,omitempty"`
	Shareitem *ShareItem `protobuf:"bytes,3,opt,name=shareitem,proto3,oneof" json:"shareitem,omitempty"`
}

func (x *PosterBanner) Reset() {
	*x = PosterBanner{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feed_data_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PosterBanner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PosterBanner) ProtoMessage() {}

func (x *PosterBanner) ProtoReflect() protoreflect.Message {
	mi := &file_feed_data_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PosterBanner.ProtoReflect.Descriptor instead.
func (*PosterBanner) Descriptor() ([]byte, []int) {
	return file_feed_data_proto_rawDescGZIP(), []int{21}
}

func (x *PosterBanner) GetPoster() *Poster {
	if x != nil {
		return x.Poster
	}
	return nil
}

func (x *PosterBanner) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *PosterBanner) GetShareitem() *ShareItem {
	if x != nil {
		return x.Shareitem
	}
	return nil
}

type FeedTrailerPlayer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Poster               *Poster        `protobuf:"bytes,1,opt,name=poster,proto3,oneof" json:"poster,omitempty"`
	VideoData            *VideoItemData `protobuf:"bytes,2,opt,name=video_data,json=videoData,proto3,oneof" json:"video_data,omitempty"`
	InsertNewLineDataKey *string        `protobuf:"bytes,3,opt,name=insert_new_line_data_key,json=insertNewLineDataKey,proto3,oneof" json:"insert_new_line_data_key,omitempty"`
	VideoBar             *PosterBanner  `protobuf:"bytes,4,opt,name=video_bar,json=videoBar,proto3,oneof" json:"video_bar,omitempty"`
	SliceStartTime       *int64         `protobuf:"varint,5,opt,name=slice_start_time,json=sliceStartTime,proto3,oneof" json:"slice_start_time,omitempty"`
	SliceEndTime         *int64         `protobuf:"varint,6,opt,name=slice_end_time,json=sliceEndTime,proto3,oneof" json:"slice_end_time,omitempty"`
	Watch                *WatchList     `protobuf:"bytes,7,opt,name=watch,proto3,oneof" json:"watch,omitempty"`
}

func (x *FeedTrailerPlayer) Reset() {
	*x = FeedTrailerPlayer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feed_data_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeedTrailerPlayer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeedTrailerPlayer) ProtoMessage() {}

func (x *FeedTrailerPlayer) ProtoReflect() protoreflect.Message {
	mi := &file_feed_data_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeedTrailerPlayer.ProtoReflect.Descriptor instead.
func (*FeedTrailerPlayer) Descriptor() ([]byte, []int) {
	return file_feed_data_proto_rawDescGZIP(), []int{22}
}

func (x *FeedTrailerPlayer) GetPoster() *Poster {
	if x != nil {
		return x.Poster
	}
	return nil
}

func (x *FeedTrailerPlayer) GetVideoData() *VideoItemData {
	if x != nil {
		return x.VideoData
	}
	return nil
}

func (x *FeedTrailerPlayer) GetInsertNewLineDataKey() string {
	if x != nil && x.InsertNewLineDataKey != nil {
		return *x.InsertNewLineDataKey
	}
	return ""
}

func (x *FeedTrailerPlayer) GetVideoBar() *PosterBanner {
	if x != nil {
		return x.VideoBar
	}
	return nil
}

func (x *FeedTrailerPlayer) GetSliceStartTime() int64 {
	if x != nil && x.SliceStartTime != nil {
		return *x.SliceStartTime
	}
	return 0
}

func (x *FeedTrailerPlayer) GetSliceEndTime() int64 {
	if x != nil && x.SliceEndTime != nil {
		return *x.SliceEndTime
	}
	return 0
}

func (x *FeedTrailerPlayer) GetWatch() *WatchList {
	if x != nil {
		return x.Watch
	}
	return nil
}

type ShortVideoPosterList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PosterList []*ShortVideoPoster `protobuf:"bytes,1,rep,name=poster_list,json=posterList,proto3" json:"poster_list,omitempty"`
}

func (x *ShortVideoPosterList) Reset() {
	*x = ShortVideoPosterList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feed_data_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShortVideoPosterList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShortVideoPosterList) ProtoMessage() {}

func (x *ShortVideoPosterList) ProtoReflect() protoreflect.Message {
	mi := &file_feed_data_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShortVideoPosterList.ProtoReflect.Descriptor instead.
func (*ShortVideoPosterList) Descriptor() ([]byte, []int) {
	return file_feed_data_proto_rawDescGZIP(), []int{23}
}

func (x *ShortVideoPosterList) GetPosterList() []*ShortVideoPoster {
	if x != nil {
		return x.PosterList
	}
	return nil
}

type FeedRecommendItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cid              *string     `protobuf:"bytes,1,opt,name=cid,proto3,oneof" json:"cid,omitempty"`
	Poster           *Poster     `protobuf:"bytes,2,opt,name=poster,proto3,oneof" json:"poster,omitempty"`
	LandPosterImgUrl *string     `protobuf:"bytes,3,opt,name=land_poster_img_url,json=landPosterImgUrl,proto3,oneof" json:"land_poster_img_url,omitempty"`
	TagLabelList     []*TagLabel `protobuf:"bytes,4,rep,name=tag_label_list,json=tagLabelList,proto3" json:"tag_label_list,omitempty"`
}

func (x *FeedRecommendItem) Reset() {
	*x = FeedRecommendItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feed_data_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeedRecommendItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeedRecommendItem) ProtoMessage() {}

func (x *FeedRecommendItem) ProtoReflect() protoreflect.Message {
	mi := &file_feed_data_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeedRecommendItem.ProtoReflect.Descriptor instead.
func (*FeedRecommendItem) Descriptor() ([]byte, []int) {
	return file_feed_data_proto_rawDescGZIP(), []int{24}
}

func (x *FeedRecommendItem) GetCid() string {
	if x != nil && x.Cid != nil {
		return *x.Cid
	}
	return ""
}

func (x *FeedRecommendItem) GetPoster() *Poster {
	if x != nil {
		return x.Poster
	}
	return nil
}

func (x *FeedRecommendItem) GetLandPosterImgUrl() string {
	if x != nil && x.LandPosterImgUrl != nil {
		return *x.LandPosterImgUrl
	}
	return ""
}

func (x *FeedRecommendItem) GetTagLabelList() []*TagLabel {
	if x != nil {
		return x.TagLabelList
	}
	return nil
}

type FeedShortViedeoRecommendItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cid         *string      `protobuf:"bytes,1,opt,name=cid,proto3,oneof" json:"cid,omitempty"`
	Poster      *Poster      `protobuf:"bytes,2,opt,name=poster,proto3,oneof" json:"poster,omitempty"`
	CpInfo      *CPInfo      `protobuf:"bytes,3,opt,name=cp_info,json=cpInfo,proto3,oneof" json:"cp_info,omitempty"`
	ShareItem   *ShareItem   `protobuf:"bytes,4,opt,name=share_item,json=shareItem,proto3,oneof" json:"share_item,omitempty"`
	VideoOption *VideoOption `protobuf:"bytes,5,opt,name=video_option,json=videoOption,proto3,oneof" json:"video_option,omitempty"`
	DataKey     *string      `protobuf:"bytes,6,opt,name=data_key,json=dataKey,proto3,oneof" json:"data_key,omitempty"`
}

func (x *FeedShortViedeoRecommendItem) Reset() {
	*x = FeedShortViedeoRecommendItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feed_data_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeedShortViedeoRecommendItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeedShortViedeoRecommendItem) ProtoMessage() {}

func (x *FeedShortViedeoRecommendItem) ProtoReflect() protoreflect.Message {
	mi := &file_feed_data_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeedShortViedeoRecommendItem.ProtoReflect.Descriptor instead.
func (*FeedShortViedeoRecommendItem) Descriptor() ([]byte, []int) {
	return file_feed_data_proto_rawDescGZIP(), []int{25}
}

func (x *FeedShortViedeoRecommendItem) GetCid() string {
	if x != nil && x.Cid != nil {
		return *x.Cid
	}
	return ""
}

func (x *FeedShortViedeoRecommendItem) GetPoster() *Poster {
	if x != nil {
		return x.Poster
	}
	return nil
}

func (x *FeedShortViedeoRecommendItem) GetCpInfo() *CPInfo {
	if x != nil {
		return x.CpInfo
	}
	return nil
}

func (x *FeedShortViedeoRecommendItem) GetShareItem() *ShareItem {
	if x != nil {
		return x.ShareItem
	}
	return nil
}

func (x *FeedShortViedeoRecommendItem) GetVideoOption() *VideoOption {
	if x != nil {
		return x.VideoOption
	}
	return nil
}

func (x *FeedShortViedeoRecommendItem) GetDataKey() string {
	if x != nil && x.DataKey != nil {
		return *x.DataKey
	}
	return ""
}

type DetailsCPInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cpinfo *CPInfo             `protobuf:"bytes,1,opt,name=cpinfo,proto3,oneof" json:"cpinfo,omitempty"`
	Scene  *DetailsCPInfoScene `protobuf:"varint,2,opt,name=scene,proto3,enum=QQTV.DetailsCPInfoScene,oneof" json:"scene,omitempty"`
}

func (x *DetailsCPInfo) Reset() {
	*x = DetailsCPInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feed_data_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DetailsCPInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DetailsCPInfo) ProtoMessage() {}

func (x *DetailsCPInfo) ProtoReflect() protoreflect.Message {
	mi := &file_feed_data_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DetailsCPInfo.ProtoReflect.Descriptor instead.
func (*DetailsCPInfo) Descriptor() ([]byte, []int) {
	return file_feed_data_proto_rawDescGZIP(), []int{26}
}

func (x *DetailsCPInfo) GetCpinfo() *CPInfo {
	if x != nil {
		return x.Cpinfo
	}
	return nil
}

func (x *DetailsCPInfo) GetScene() DetailsCPInfoScene {
	if x != nil && x.Scene != nil {
		return *x.Scene
	}
	return DetailsCPInfoScene_DETAILS
}

type FeedDetailsInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title        *string          `protobuf:"bytes,1,opt,name=title,proto3,oneof" json:"title,omitempty"`
	Details      *string          `protobuf:"bytes,2,opt,name=details,proto3,oneof" json:"details,omitempty"`
	SubInfo      *SubInfo         `protobuf:"bytes,3,opt,name=sub_info,json=subInfo,proto3,oneof" json:"sub_info,omitempty"`
	MarkLabel    *MarkLabel       `protobuf:"bytes,4,opt,name=mark_label,json=markLabel,proto3,oneof" json:"mark_label,omitempty"`
	ActorsList   *ActorList       `protobuf:"bytes,5,opt,name=actors_list,json=actorsList,proto3,oneof" json:"actors_list,omitempty"`
	TagLabelList []*TagLabel      `protobuf:"bytes,6,rep,name=tag_label_list,json=tagLabelList,proto3" json:"tag_label_list,omitempty"`
	TrailerList  []*VideoItemData `protobuf:"bytes,7,rep,name=trailer_list,json=trailerList,proto3" json:"trailer_list,omitempty"`
}

func (x *FeedDetailsInfo) Reset() {
	*x = FeedDetailsInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feed_data_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeedDetailsInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeedDetailsInfo) ProtoMessage() {}

func (x *FeedDetailsInfo) ProtoReflect() protoreflect.Message {
	mi := &file_feed_data_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeedDetailsInfo.ProtoReflect.Descriptor instead.
func (*FeedDetailsInfo) Descriptor() ([]byte, []int) {
	return file_feed_data_proto_rawDescGZIP(), []int{27}
}

func (x *FeedDetailsInfo) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *FeedDetailsInfo) GetDetails() string {
	if x != nil && x.Details != nil {
		return *x.Details
	}
	return ""
}

func (x *FeedDetailsInfo) GetSubInfo() *SubInfo {
	if x != nil {
		return x.SubInfo
	}
	return nil
}

func (x *FeedDetailsInfo) GetMarkLabel() *MarkLabel {
	if x != nil {
		return x.MarkLabel
	}
	return nil
}

func (x *FeedDetailsInfo) GetActorsList() *ActorList {
	if x != nil {
		return x.ActorsList
	}
	return nil
}

func (x *FeedDetailsInfo) GetTagLabelList() []*TagLabel {
	if x != nil {
		return x.TagLabelList
	}
	return nil
}

func (x *FeedDetailsInfo) GetTrailerList() []*VideoItemData {
	if x != nil {
		return x.TrailerList
	}
	return nil
}

type FeedPlayListHorizontal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PosterTitle      *FeedPosterTitle `protobuf:"bytes,1,opt,name=poster_title,json=posterTitle,proto3,oneof" json:"poster_title,omitempty"`
	VideoList        []*VideoItemData `protobuf:"bytes,2,rep,name=video_list,json=videoList,proto3" json:"video_list,omitempty"`
	AssociatedSeason *bool            `protobuf:"varint,3,opt,name=associated_season,json=associatedSeason,proto3,oneof" json:"associated_season,omitempty"`
	NextPageInfo     *NextPageInfo    `protobuf:"bytes,4,opt,name=next_page_info,json=nextPageInfo,proto3,oneof" json:"next_page_info,omitempty"`
}

func (x *FeedPlayListHorizontal) Reset() {
	*x = FeedPlayListHorizontal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feed_data_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeedPlayListHorizontal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeedPlayListHorizontal) ProtoMessage() {}

func (x *FeedPlayListHorizontal) ProtoReflect() protoreflect.Message {
	mi := &file_feed_data_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeedPlayListHorizontal.ProtoReflect.Descriptor instead.
func (*FeedPlayListHorizontal) Descriptor() ([]byte, []int) {
	return file_feed_data_proto_rawDescGZIP(), []int{28}
}

func (x *FeedPlayListHorizontal) GetPosterTitle() *FeedPosterTitle {
	if x != nil {
		return x.PosterTitle
	}
	return nil
}

func (x *FeedPlayListHorizontal) GetVideoList() []*VideoItemData {
	if x != nil {
		return x.VideoList
	}
	return nil
}

func (x *FeedPlayListHorizontal) GetAssociatedSeason() bool {
	if x != nil && x.AssociatedSeason != nil {
		return *x.AssociatedSeason
	}
	return false
}

func (x *FeedPlayListHorizontal) GetNextPageInfo() *NextPageInfo {
	if x != nil {
		return x.NextPageInfo
	}
	return nil
}

type FeedPlayListVertical struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PosterTitle      *FeedPosterTitle `protobuf:"bytes,1,opt,name=poster_title,json=posterTitle,proto3,oneof" json:"poster_title,omitempty"`
	VideoList        []*VideoItemData `protobuf:"bytes,2,rep,name=video_list,json=videoList,proto3" json:"video_list,omitempty"`
	AssociatedSeason *bool            `protobuf:"varint,3,opt,name=associated_season,json=associatedSeason,proto3,oneof" json:"associated_season,omitempty"`
	NextPageInfo     *NextPageInfo    `protobuf:"bytes,4,opt,name=next_page_info,json=nextPageInfo,proto3,oneof" json:"next_page_info,omitempty"`
}

func (x *FeedPlayListVertical) Reset() {
	*x = FeedPlayListVertical{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feed_data_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeedPlayListVertical) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeedPlayListVertical) ProtoMessage() {}

func (x *FeedPlayListVertical) ProtoReflect() protoreflect.Message {
	mi := &file_feed_data_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeedPlayListVertical.ProtoReflect.Descriptor instead.
func (*FeedPlayListVertical) Descriptor() ([]byte, []int) {
	return file_feed_data_proto_rawDescGZIP(), []int{29}
}

func (x *FeedPlayListVertical) GetPosterTitle() *FeedPosterTitle {
	if x != nil {
		return x.PosterTitle
	}
	return nil
}

func (x *FeedPlayListVertical) GetVideoList() []*VideoItemData {
	if x != nil {
		return x.VideoList
	}
	return nil
}

func (x *FeedPlayListVertical) GetAssociatedSeason() bool {
	if x != nil && x.AssociatedSeason != nil {
		return *x.AssociatedSeason
	}
	return false
}

func (x *FeedPlayListVertical) GetNextPageInfo() *NextPageInfo {
	if x != nil {
		return x.NextPageInfo
	}
	return nil
}

type FeedPlayListSeason struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeasonList []*SeasonInfo `protobuf:"bytes,1,rep,name=season_list,json=seasonList,proto3" json:"season_list,omitempty"`
}

func (x *FeedPlayListSeason) Reset() {
	*x = FeedPlayListSeason{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feed_data_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeedPlayListSeason) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeedPlayListSeason) ProtoMessage() {}

func (x *FeedPlayListSeason) ProtoReflect() protoreflect.Message {
	mi := &file_feed_data_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeedPlayListSeason.ProtoReflect.Descriptor instead.
func (*FeedPlayListSeason) Descriptor() ([]byte, []int) {
	return file_feed_data_proto_rawDescGZIP(), []int{30}
}

func (x *FeedPlayListSeason) GetSeasonList() []*SeasonInfo {
	if x != nil {
		return x.SeasonList
	}
	return nil
}

type ToolbarReservationInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsReserved *bool `protobuf:"varint,1,opt,name=is_reserved,json=isReserved,proto3,oneof" json:"is_reserved,omitempty"`
	IsShow     *bool `protobuf:"varint,2,opt,name=is_show,json=isShow,proto3,oneof" json:"is_show,omitempty"`
}

func (x *ToolbarReservationInfo) Reset() {
	*x = ToolbarReservationInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feed_data_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ToolbarReservationInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToolbarReservationInfo) ProtoMessage() {}

func (x *ToolbarReservationInfo) ProtoReflect() protoreflect.Message {
	mi := &file_feed_data_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToolbarReservationInfo.ProtoReflect.Descriptor instead.
func (*ToolbarReservationInfo) Descriptor() ([]byte, []int) {
	return file_feed_data_proto_rawDescGZIP(), []int{31}
}

func (x *ToolbarReservationInfo) GetIsReserved() bool {
	if x != nil && x.IsReserved != nil {
		return *x.IsReserved
	}
	return false
}

func (x *ToolbarReservationInfo) GetIsShow() bool {
	if x != nil && x.IsShow != nil {
		return *x.IsShow
	}
	return false
}

type FeedDetailsToolbar struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShareItem       *ShareItem              `protobuf:"bytes,1,opt,name=share_item,json=shareItem,proto3,oneof" json:"share_item,omitempty"`
	WatchList       *WatchList              `protobuf:"bytes,2,opt,name=watch_list,json=watchList,proto3,oneof" json:"watch_list,omitempty"`
	DownloadInfo    *ToolbarItemInfo        `protobuf:"bytes,3,opt,name=download_info,json=downloadInfo,proto3,oneof" json:"download_info,omitempty"`
	LikeInfo        *LikeInfo               `protobuf:"bytes,4,opt,name=like_info,json=likeInfo,proto3,oneof" json:"like_info,omitempty"`
	ReportInfo      *ToolbarItemInfo        `protobuf:"bytes,5,opt,name=report_info,json=reportInfo,proto3,oneof" json:"report_info,omitempty"`
	ReservationInfo *ToolbarReservationInfo `protobuf:"bytes,6,opt,name=reservation_info,json=reservationInfo,proto3,oneof" json:"reservation_info,omitempty"`
	ToolbarGiftInfo *ToolbarGiftInfo        `protobuf:"bytes,7,opt,name=toolbar_gift_info,json=toolbarGiftInfo,proto3,oneof" json:"toolbar_gift_info,omitempty"`
}

func (x *FeedDetailsToolbar) Reset() {
	*x = FeedDetailsToolbar{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feed_data_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeedDetailsToolbar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeedDetailsToolbar) ProtoMessage() {}

func (x *FeedDetailsToolbar) ProtoReflect() protoreflect.Message {
	mi := &file_feed_data_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeedDetailsToolbar.ProtoReflect.Descriptor instead.
func (*FeedDetailsToolbar) Descriptor() ([]byte, []int) {
	return file_feed_data_proto_rawDescGZIP(), []int{32}
}

func (x *FeedDetailsToolbar) GetShareItem() *ShareItem {
	if x != nil {
		return x.ShareItem
	}
	return nil
}

func (x *FeedDetailsToolbar) GetWatchList() *WatchList {
	if x != nil {
		return x.WatchList
	}
	return nil
}

func (x *FeedDetailsToolbar) GetDownloadInfo() *ToolbarItemInfo {
	if x != nil {
		return x.DownloadInfo
	}
	return nil
}

func (x *FeedDetailsToolbar) GetLikeInfo() *LikeInfo {
	if x != nil {
		return x.LikeInfo
	}
	return nil
}

func (x *FeedDetailsToolbar) GetReportInfo() *ToolbarItemInfo {
	if x != nil {
		return x.ReportInfo
	}
	return nil
}

func (x *FeedDetailsToolbar) GetReservationInfo() *ToolbarReservationInfo {
	if x != nil {
		return x.ReservationInfo
	}
	return nil
}

func (x *FeedDetailsToolbar) GetToolbarGiftInfo() *ToolbarGiftInfo {
	if x != nil {
		return x.ToolbarGiftInfo
	}
	return nil
}

type FeedDetailsLeftToolbar struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShareItem       *ShareItem              `protobuf:"bytes,1,opt,name=share_item,json=shareItem,proto3,oneof" json:"share_item,omitempty"`
	WatchList       *WatchList              `protobuf:"bytes,2,opt,name=watch_list,json=watchList,proto3,oneof" json:"watch_list,omitempty"`
	DownloadInfo    *ToolbarItemInfo        `protobuf:"bytes,3,opt,name=download_info,json=downloadInfo,proto3,oneof" json:"download_info,omitempty"`
	LikeInfo        *LikeInfo               `protobuf:"bytes,4,opt,name=like_info,json=likeInfo,proto3,oneof" json:"like_info,omitempty"`
	ReportInfo      *ToolbarItemInfo        `protobuf:"bytes,5,opt,name=report_info,json=reportInfo,proto3,oneof" json:"report_info,omitempty"`
	ReservationInfo *ToolbarReservationInfo `protobuf:"bytes,6,opt,name=reservation_info,json=reservationInfo,proto3,oneof" json:"reservation_info,omitempty"`
	ToolbarGiftInfo *ToolbarGiftInfo        `protobuf:"bytes,7,opt,name=toolbar_gift_info,json=toolbarGiftInfo,proto3,oneof" json:"toolbar_gift_info,omitempty"`
}

func (x *FeedDetailsLeftToolbar) Reset() {
	*x = FeedDetailsLeftToolbar{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feed_data_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeedDetailsLeftToolbar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeedDetailsLeftToolbar) ProtoMessage() {}

func (x *FeedDetailsLeftToolbar) ProtoReflect() protoreflect.Message {
	mi := &file_feed_data_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeedDetailsLeftToolbar.ProtoReflect.Descriptor instead.
func (*FeedDetailsLeftToolbar) Descriptor() ([]byte, []int) {
	return file_feed_data_proto_rawDescGZIP(), []int{33}
}

func (x *FeedDetailsLeftToolbar) GetShareItem() *ShareItem {
	if x != nil {
		return x.ShareItem
	}
	return nil
}

func (x *FeedDetailsLeftToolbar) GetWatchList() *WatchList {
	if x != nil {
		return x.WatchList
	}
	return nil
}

func (x *FeedDetailsLeftToolbar) GetDownloadInfo() *ToolbarItemInfo {
	if x != nil {
		return x.DownloadInfo
	}
	return nil
}

func (x *FeedDetailsLeftToolbar) GetLikeInfo() *LikeInfo {
	if x != nil {
		return x.LikeInfo
	}
	return nil
}

func (x *FeedDetailsLeftToolbar) GetReportInfo() *ToolbarItemInfo {
	if x != nil {
		return x.ReportInfo
	}
	return nil
}

func (x *FeedDetailsLeftToolbar) GetReservationInfo() *ToolbarReservationInfo {
	if x != nil {
		return x.ReservationInfo
	}
	return nil
}

func (x *FeedDetailsLeftToolbar) GetToolbarGiftInfo() *ToolbarGiftInfo {
	if x != nil {
		return x.ToolbarGiftInfo
	}
	return nil
}

type ToolbarGiftInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PicUrl           *string `protobuf:"bytes,1,opt,name=pic_url,json=picUrl,proto3,oneof" json:"pic_url,omitempty"`
	IsShow           *bool   `protobuf:"varint,2,opt,name=is_show,json=isShow,proto3,oneof" json:"is_show,omitempty"`
	SupportAction    *Action `protobuf:"bytes,3,opt,name=support_action,json=supportAction,proto3,oneof" json:"support_action,omitempty"`
	GuideDescription *string `protobuf:"bytes,4,opt,name=guide_description,json=guideDescription,proto3,oneof" json:"guide_description,omitempty"`
	ButtonContent    *string `protobuf:"bytes,5,opt,name=button_content,json=buttonContent,proto3,oneof" json:"button_content,omitempty"`
	SendAction       *Action `protobuf:"bytes,6,opt,name=send_action,json=sendAction,proto3,oneof" json:"send_action,omitempty"`
}

func (x *ToolbarGiftInfo) Reset() {
	*x = ToolbarGiftInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feed_data_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ToolbarGiftInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToolbarGiftInfo) ProtoMessage() {}

func (x *ToolbarGiftInfo) ProtoReflect() protoreflect.Message {
	mi := &file_feed_data_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToolbarGiftInfo.ProtoReflect.Descriptor instead.
func (*ToolbarGiftInfo) Descriptor() ([]byte, []int) {
	return file_feed_data_proto_rawDescGZIP(), []int{34}
}

func (x *ToolbarGiftInfo) GetPicUrl() string {
	if x != nil && x.PicUrl != nil {
		return *x.PicUrl
	}
	return ""
}

func (x *ToolbarGiftInfo) GetIsShow() bool {
	if x != nil && x.IsShow != nil {
		return *x.IsShow
	}
	return false
}

func (x *ToolbarGiftInfo) GetSupportAction() *Action {
	if x != nil {
		return x.SupportAction
	}
	return nil
}

func (x *ToolbarGiftInfo) GetGuideDescription() string {
	if x != nil && x.GuideDescription != nil {
		return *x.GuideDescription
	}
	return ""
}

func (x *ToolbarGiftInfo) GetButtonContent() string {
	if x != nil && x.ButtonContent != nil {
		return *x.ButtonContent
	}
	return ""
}

func (x *ToolbarGiftInfo) GetSendAction() *Action {
	if x != nil {
		return x.SendAction
	}
	return nil
}

type FeedVIPPrBanner struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title         *string                           `protobuf:"bytes,1,opt,name=title,proto3,oneof" json:"title,omitempty"`
	Imageurl      *string                           `protobuf:"bytes,2,opt,name=imageurl,proto3,oneof" json:"imageurl,omitempty"`
	Action        *Action                           `protobuf:"bytes,3,opt,name=action,proto3,oneof" json:"action,omitempty"`
	Reportdata    *ReportData                       `protobuf:"bytes,4,opt,name=reportdata,proto3,oneof" json:"reportdata,omitempty"`
	Type          *VIPPrBannerType                  `protobuf:"varint,5,opt,name=type,proto3,enum=QQTV.VIPPrBannerType,oneof" json:"type,omitempty"`
	TitleColor    *string                           `protobuf:"bytes,6,opt,name=title_color,json=titleColor,proto3,oneof" json:"title_color,omitempty"`
	SubTitle      *string                           `protobuf:"bytes,7,opt,name=sub_title,json=subTitle,proto3,oneof" json:"sub_title,omitempty"`
	SubTitleColor *string                           `protobuf:"bytes,8,opt,name=sub_title_color,json=subTitleColor,proto3,oneof" json:"sub_title_color,omitempty"`
	VipCardPic    *string                           `protobuf:"bytes,9,opt,name=vip_card_pic,json=vipCardPic,proto3,oneof" json:"vip_card_pic,omitempty"`
	VipTipsButton *VipTipsButton                    `protobuf:"bytes,10,opt,name=vip_tips_button,json=vipTipsButton,proto3,oneof" json:"vip_tips_button,omitempty"`
	ExtraData     []*FeedVIPPrBanner_ExtraDataEntry `protobuf:"bytes,11,rep,name=extra_data,json=extraData,proto3" json:"extra_data,omitempty"`
}

func (x *FeedVIPPrBanner) Reset() {
	*x = FeedVIPPrBanner{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feed_data_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeedVIPPrBanner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeedVIPPrBanner) ProtoMessage() {}

func (x *FeedVIPPrBanner) ProtoReflect() protoreflect.Message {
	mi := &file_feed_data_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeedVIPPrBanner.ProtoReflect.Descriptor instead.
func (*FeedVIPPrBanner) Descriptor() ([]byte, []int) {
	return file_feed_data_proto_rawDescGZIP(), []int{35}
}

func (x *FeedVIPPrBanner) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *FeedVIPPrBanner) GetImageurl() string {
	if x != nil && x.Imageurl != nil {
		return *x.Imageurl
	}
	return ""
}

func (x *FeedVIPPrBanner) GetAction() *Action {
	if x != nil {
		return x.Action
	}
	return nil
}

func (x *FeedVIPPrBanner) GetReportdata() *ReportData {
	if x != nil {
		return x.Reportdata
	}
	return nil
}

func (x *FeedVIPPrBanner) GetType() VIPPrBannerType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return VIPPrBannerType_VIP_PR_TYPE_ONLY_IMAGE
}

func (x *FeedVIPPrBanner) GetTitleColor() string {
	if x != nil && x.TitleColor != nil {
		return *x.TitleColor
	}
	return ""
}

func (x *FeedVIPPrBanner) GetSubTitle() string {
	if x != nil && x.SubTitle != nil {
		return *x.SubTitle
	}
	return ""
}

func (x *FeedVIPPrBanner) GetSubTitleColor() string {
	if x != nil && x.SubTitleColor != nil {
		return *x.SubTitleColor
	}
	return ""
}

func (x *FeedVIPPrBanner) GetVipCardPic() string {
	if x != nil && x.VipCardPic != nil {
		return *x.VipCardPic
	}
	return ""
}

func (x *FeedVIPPrBanner) GetVipTipsButton() *VipTipsButton {
	if x != nil {
		return x.VipTipsButton
	}
	return nil
}

func (x *FeedVIPPrBanner) GetExtraData() []*FeedVIPPrBanner_ExtraDataEntry {
	if x != nil {
		return x.ExtraData
	}
	return nil
}

type VipTipsButton struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title         *string `protobuf:"bytes,1,opt,name=title,proto3,oneof" json:"title,omitempty"`
	TitleColor    *string `protobuf:"bytes,2,opt,name=title_color,json=titleColor,proto3,oneof" json:"title_color,omitempty"`
	BackgroundUrl *string `protobuf:"bytes,3,opt,name=background_url,json=backgroundUrl,proto3,oneof" json:"background_url,omitempty"`
	Action        *Action `protobuf:"bytes,4,opt,name=action,proto3,oneof" json:"action,omitempty"`
}

func (x *VipTipsButton) Reset() {
	*x = VipTipsButton{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feed_data_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VipTipsButton) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VipTipsButton) ProtoMessage() {}

func (x *VipTipsButton) ProtoReflect() protoreflect.Message {
	mi := &file_feed_data_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VipTipsButton.ProtoReflect.Descriptor instead.
func (*VipTipsButton) Descriptor() ([]byte, []int) {
	return file_feed_data_proto_rawDescGZIP(), []int{36}
}

func (x *VipTipsButton) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *VipTipsButton) GetTitleColor() string {
	if x != nil && x.TitleColor != nil {
		return *x.TitleColor
	}
	return ""
}

func (x *VipTipsButton) GetBackgroundUrl() string {
	if x != nil && x.BackgroundUrl != nil {
		return *x.BackgroundUrl
	}
	return ""
}

func (x *VipTipsButton) GetAction() *Action {
	if x != nil {
		return x.Action
	}
	return nil
}

type FeedPrBanner struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title      *string     `protobuf:"bytes,1,opt,name=title,proto3,oneof" json:"title,omitempty"`
	Imageurl   *string     `protobuf:"bytes,2,opt,name=imageurl,proto3,oneof" json:"imageurl,omitempty"`
	Action     *Action     `protobuf:"bytes,3,opt,name=action,proto3,oneof" json:"action,omitempty"`
	Reportdata *ReportData `protobuf:"bytes,4,opt,name=reportdata,proto3,oneof" json:"reportdata,omitempty"`
}

func (x *FeedPrBanner) Reset() {
	*x = FeedPrBanner{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feed_data_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeedPrBanner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeedPrBanner) ProtoMessage() {}

func (x *FeedPrBanner) ProtoReflect() protoreflect.Message {
	mi := &file_feed_data_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeedPrBanner.ProtoReflect.Descriptor instead.
func (*FeedPrBanner) Descriptor() ([]byte, []int) {
	return file_feed_data_proto_rawDescGZIP(), []int{37}
}

func (x *FeedPrBanner) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *FeedPrBanner) GetImageurl() string {
	if x != nil && x.Imageurl != nil {
		return *x.Imageurl
	}
	return ""
}

func (x *FeedPrBanner) GetAction() *Action {
	if x != nil {
		return x.Action
	}
	return nil
}

func (x *FeedPrBanner) GetReportdata() *ReportData {
	if x != nil {
		return x.Reportdata
	}
	return nil
}

type FeedAdBanner struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Adunitid     *string       `protobuf:"bytes,1,opt,name=adunitid,proto3,oneof" json:"adunitid,omitempty"`
	Tradplusid   *string       `protobuf:"bytes,2,opt,name=tradplusid,proto3,oneof" json:"tradplusid,omitempty"`
	Reportdata   *ReportData   `protobuf:"bytes,3,opt,name=reportdata,proto3,oneof" json:"reportdata,omitempty"`
	Feedprbanner *FeedPrBanner `protobuf:"bytes,4,opt,name=feedprbanner,proto3,oneof" json:"feedprbanner,omitempty"`
}

func (x *FeedAdBanner) Reset() {
	*x = FeedAdBanner{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feed_data_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeedAdBanner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeedAdBanner) ProtoMessage() {}

func (x *FeedAdBanner) ProtoReflect() protoreflect.Message {
	mi := &file_feed_data_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeedAdBanner.ProtoReflect.Descriptor instead.
func (*FeedAdBanner) Descriptor() ([]byte, []int) {
	return file_feed_data_proto_rawDescGZIP(), []int{38}
}

func (x *FeedAdBanner) GetAdunitid() string {
	if x != nil && x.Adunitid != nil {
		return *x.Adunitid
	}
	return ""
}

func (x *FeedAdBanner) GetTradplusid() string {
	if x != nil && x.Tradplusid != nil {
		return *x.Tradplusid
	}
	return ""
}

func (x *FeedAdBanner) GetReportdata() *ReportData {
	if x != nil {
		return x.Reportdata
	}
	return nil
}

func (x *FeedAdBanner) GetFeedprbanner() *FeedPrBanner {
	if x != nil {
		return x.Feedprbanner
	}
	return nil
}

type FeedLiveTitle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title        *string     `protobuf:"bytes,1,opt,name=title,proto3,oneof" json:"title,omitempty"`
	Details      *string     `protobuf:"bytes,2,opt,name=details,proto3,oneof" json:"details,omitempty"`
	MarkLabel    *MarkLabel  `protobuf:"bytes,3,opt,name=mark_label,json=markLabel,proto3,oneof" json:"mark_label,omitempty"`
	TagLabelList []*TagLabel `protobuf:"bytes,4,rep,name=tag_label_list,json=tagLabelList,proto3" json:"tag_label_list,omitempty"`
}

func (x *FeedLiveTitle) Reset() {
	*x = FeedLiveTitle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feed_data_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeedLiveTitle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeedLiveTitle) ProtoMessage() {}

func (x *FeedLiveTitle) ProtoReflect() protoreflect.Message {
	mi := &file_feed_data_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeedLiveTitle.ProtoReflect.Descriptor instead.
func (*FeedLiveTitle) Descriptor() ([]byte, []int) {
	return file_feed_data_proto_rawDescGZIP(), []int{39}
}

func (x *FeedLiveTitle) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *FeedLiveTitle) GetDetails() string {
	if x != nil && x.Details != nil {
		return *x.Details
	}
	return ""
}

func (x *FeedLiveTitle) GetMarkLabel() *MarkLabel {
	if x != nil {
		return x.MarkLabel
	}
	return nil
}

func (x *FeedLiveTitle) GetTagLabelList() []*TagLabel {
	if x != nil {
		return x.TagLabelList
	}
	return nil
}

type FeedLiveNumber struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type    *LiveNumberType `protobuf:"varint,1,opt,name=type,proto3,enum=QQTV.LiveNumberType,oneof" json:"type,omitempty"`
	Title   *string         `protobuf:"bytes,2,opt,name=title,proto3,oneof" json:"title,omitempty"`
	Details *string         `protobuf:"bytes,3,opt,name=details,proto3,oneof" json:"details,omitempty"`
}

func (x *FeedLiveNumber) Reset() {
	*x = FeedLiveNumber{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feed_data_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeedLiveNumber) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeedLiveNumber) ProtoMessage() {}

func (x *FeedLiveNumber) ProtoReflect() protoreflect.Message {
	mi := &file_feed_data_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeedLiveNumber.ProtoReflect.Descriptor instead.
func (*FeedLiveNumber) Descriptor() ([]byte, []int) {
	return file_feed_data_proto_rawDescGZIP(), []int{40}
}

func (x *FeedLiveNumber) GetType() LiveNumberType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return LiveNumberType_TYPE_UNKNOW
}

func (x *FeedLiveNumber) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *FeedLiveNumber) GetDetails() string {
	if x != nil && x.Details != nil {
		return *x.Details
	}
	return ""
}

type FeedLiveShare struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title *string `protobuf:"bytes,1,opt,name=title,proto3,oneof" json:"title,omitempty"`
}

func (x *FeedLiveShare) Reset() {
	*x = FeedLiveShare{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feed_data_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeedLiveShare) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeedLiveShare) ProtoMessage() {}

func (x *FeedLiveShare) ProtoReflect() protoreflect.Message {
	mi := &file_feed_data_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeedLiveShare.ProtoReflect.Descriptor instead.
func (*FeedLiveShare) Descriptor() ([]byte, []int) {
	return file_feed_data_proto_rawDescGZIP(), []int{41}
}

func (x *FeedLiveShare) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

type FeedLivePurchase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title *string `protobuf:"bytes,1,opt,name=title,proto3,oneof" json:"title,omitempty"`
}

func (x *FeedLivePurchase) Reset() {
	*x = FeedLivePurchase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feed_data_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeedLivePurchase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeedLivePurchase) ProtoMessage() {}

func (x *FeedLivePurchase) ProtoReflect() protoreflect.Message {
	mi := &file_feed_data_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeedLivePurchase.ProtoReflect.Descriptor instead.
func (*FeedLivePurchase) Descriptor() ([]byte, []int) {
	return file_feed_data_proto_rawDescGZIP(), []int{42}
}

func (x *FeedLivePurchase) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

type FeedHorizontalVideoPlayer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Poster     *Poster        `protobuf:"bytes,1,opt,name=poster,proto3,oneof" json:"poster,omitempty"`
	Video      *VideoItemData `protobuf:"bytes,2,opt,name=video,proto3,oneof" json:"video,omitempty"`
	LikeInfo   *LikeInfo      `protobuf:"bytes,3,opt,name=like_info,json=likeInfo,proto3,oneof" json:"like_info,omitempty"`
	CpInfo     *CPInfo        `protobuf:"bytes,4,opt,name=cp_info,json=cpInfo,proto3,oneof" json:"cp_info,omitempty"`
	Watch      *WatchList     `protobuf:"bytes,5,opt,name=watch,proto3,oneof" json:"watch,omitempty"`
	Duration   *int32         `protobuf:"varint,6,opt,name=duration,proto3,oneof" json:"duration,omitempty"`
	PlayCount  *int32         `protobuf:"varint,7,opt,name=play_count,json=playCount,proto3,oneof" json:"play_count,omitempty"`
	UploadTime *string        `protobuf:"bytes,8,opt,name=upload_time,json=uploadTime,proto3,oneof" json:"upload_time,omitempty"`
}

func (x *FeedHorizontalVideoPlayer) Reset() {
	*x = FeedHorizontalVideoPlayer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feed_data_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeedHorizontalVideoPlayer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeedHorizontalVideoPlayer) ProtoMessage() {}

func (x *FeedHorizontalVideoPlayer) ProtoReflect() protoreflect.Message {
	mi := &file_feed_data_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeedHorizontalVideoPlayer.ProtoReflect.Descriptor instead.
func (*FeedHorizontalVideoPlayer) Descriptor() ([]byte, []int) {
	return file_feed_data_proto_rawDescGZIP(), []int{43}
}

func (x *FeedHorizontalVideoPlayer) GetPoster() *Poster {
	if x != nil {
		return x.Poster
	}
	return nil
}

func (x *FeedHorizontalVideoPlayer) GetVideo() *VideoItemData {
	if x != nil {
		return x.Video
	}
	return nil
}

func (x *FeedHorizontalVideoPlayer) GetLikeInfo() *LikeInfo {
	if x != nil {
		return x.LikeInfo
	}
	return nil
}

func (x *FeedHorizontalVideoPlayer) GetCpInfo() *CPInfo {
	if x != nil {
		return x.CpInfo
	}
	return nil
}

func (x *FeedHorizontalVideoPlayer) GetWatch() *WatchList {
	if x != nil {
		return x.Watch
	}
	return nil
}

func (x *FeedHorizontalVideoPlayer) GetDuration() int32 {
	if x != nil && x.Duration != nil {
		return *x.Duration
	}
	return 0
}

func (x *FeedHorizontalVideoPlayer) GetPlayCount() int32 {
	if x != nil && x.PlayCount != nil {
		return *x.PlayCount
	}
	return 0
}

func (x *FeedHorizontalVideoPlayer) GetUploadTime() string {
	if x != nil && x.UploadTime != nil {
		return *x.UploadTime
	}
	return ""
}

type FeedVerticalVideoPlayer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Poster     *Poster        `protobuf:"bytes,1,opt,name=poster,proto3,oneof" json:"poster,omitempty"`
	Video      *VideoItemData `protobuf:"bytes,2,opt,name=video,proto3,oneof" json:"video,omitempty"`
	LikeInfo   *LikeInfo      `protobuf:"bytes,3,opt,name=like_info,json=likeInfo,proto3,oneof" json:"like_info,omitempty"`
	CpInfo     *CPInfo        `protobuf:"bytes,4,opt,name=cp_info,json=cpInfo,proto3,oneof" json:"cp_info,omitempty"`
	Watch      *WatchList     `protobuf:"bytes,5,opt,name=watch,proto3,oneof" json:"watch,omitempty"`
	Duration   *int32         `protobuf:"varint,6,opt,name=duration,proto3,oneof" json:"duration,omitempty"`
	PlayCount  *int32         `protobuf:"varint,7,opt,name=play_count,json=playCount,proto3,oneof" json:"play_count,omitempty"`
	UploadTime *string        `protobuf:"bytes,8,opt,name=upload_time,json=uploadTime,proto3,oneof" json:"upload_time,omitempty"`
}

func (x *FeedVerticalVideoPlayer) Reset() {
	*x = FeedVerticalVideoPlayer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feed_data_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeedVerticalVideoPlayer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeedVerticalVideoPlayer) ProtoMessage() {}

func (x *FeedVerticalVideoPlayer) ProtoReflect() protoreflect.Message {
	mi := &file_feed_data_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeedVerticalVideoPlayer.ProtoReflect.Descriptor instead.
func (*FeedVerticalVideoPlayer) Descriptor() ([]byte, []int) {
	return file_feed_data_proto_rawDescGZIP(), []int{44}
}

func (x *FeedVerticalVideoPlayer) GetPoster() *Poster {
	if x != nil {
		return x.Poster
	}
	return nil
}

func (x *FeedVerticalVideoPlayer) GetVideo() *VideoItemData {
	if x != nil {
		return x.Video
	}
	return nil
}

func (x *FeedVerticalVideoPlayer) GetLikeInfo() *LikeInfo {
	if x != nil {
		return x.LikeInfo
	}
	return nil
}

func (x *FeedVerticalVideoPlayer) GetCpInfo() *CPInfo {
	if x != nil {
		return x.CpInfo
	}
	return nil
}

func (x *FeedVerticalVideoPlayer) GetWatch() *WatchList {
	if x != nil {
		return x.Watch
	}
	return nil
}

func (x *FeedVerticalVideoPlayer) GetDuration() int32 {
	if x != nil && x.Duration != nil {
		return *x.Duration
	}
	return 0
}

func (x *FeedVerticalVideoPlayer) GetPlayCount() int32 {
	if x != nil && x.PlayCount != nil {
		return *x.PlayCount
	}
	return 0
}

func (x *FeedVerticalVideoPlayer) GetUploadTime() string {
	if x != nil && x.UploadTime != nil {
		return *x.UploadTime
	}
	return ""
}

type FeedVideoListText struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VideoList []*VideoItemData `protobuf:"bytes,1,rep,name=video_list,json=videoList,proto3" json:"video_list,omitempty"`
}

func (x *FeedVideoListText) Reset() {
	*x = FeedVideoListText{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feed_data_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeedVideoListText) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeedVideoListText) ProtoMessage() {}

func (x *FeedVideoListText) ProtoReflect() protoreflect.Message {
	mi := &file_feed_data_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeedVideoListText.ProtoReflect.Descriptor instead.
func (*FeedVideoListText) Descriptor() ([]byte, []int) {
	return file_feed_data_proto_rawDescGZIP(), []int{45}
}

func (x *FeedVideoListText) GetVideoList() []*VideoItemData {
	if x != nil {
		return x.VideoList
	}
	return nil
}

type FeedModuleSeparator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Placeholder *int32 `protobuf:"varint,1,opt,name=placeholder,proto3,oneof" json:"placeholder,omitempty"`
}

func (x *FeedModuleSeparator) Reset() {
	*x = FeedModuleSeparator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feed_data_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeedModuleSeparator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeedModuleSeparator) ProtoMessage() {}

func (x *FeedModuleSeparator) ProtoReflect() protoreflect.Message {
	mi := &file_feed_data_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeedModuleSeparator.ProtoReflect.Descriptor instead.
func (*FeedModuleSeparator) Descriptor() ([]byte, []int) {
	return file_feed_data_proto_rawDescGZIP(), []int{46}
}

func (x *FeedModuleSeparator) GetPlaceholder() int32 {
	if x != nil && x.Placeholder != nil {
		return *x.Placeholder
	}
	return 0
}

type FeedContinueWatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title  *string     `protobuf:"bytes,1,opt,name=title,proto3,oneof" json:"title,omitempty"`
	Action *Action     `protobuf:"bytes,2,opt,name=action,proto3,oneof" json:"action,omitempty"`
	Report *ReportData `protobuf:"bytes,3,opt,name=report,proto3,oneof" json:"report,omitempty"`
}

func (x *FeedContinueWatch) Reset() {
	*x = FeedContinueWatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feed_data_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeedContinueWatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeedContinueWatch) ProtoMessage() {}

func (x *FeedContinueWatch) ProtoReflect() protoreflect.Message {
	mi := &file_feed_data_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeedContinueWatch.ProtoReflect.Descriptor instead.
func (*FeedContinueWatch) Descriptor() ([]byte, []int) {
	return file_feed_data_proto_rawDescGZIP(), []int{47}
}

func (x *FeedContinueWatch) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *FeedContinueWatch) GetAction() *Action {
	if x != nil {
		return x.Action
	}
	return nil
}

func (x *FeedContinueWatch) GetReport() *ReportData {
	if x != nil {
		return x.Report
	}
	return nil
}

type FeedComingSoon struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*FeedComingSoonItem `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *FeedComingSoon) Reset() {
	*x = FeedComingSoon{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feed_data_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeedComingSoon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeedComingSoon) ProtoMessage() {}

func (x *FeedComingSoon) ProtoReflect() protoreflect.Message {
	mi := &file_feed_data_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeedComingSoon.ProtoReflect.Descriptor instead.
func (*FeedComingSoon) Descriptor() ([]byte, []int) {
	return file_feed_data_proto_rawDescGZIP(), []int{48}
}

func (x *FeedComingSoon) GetItems() []*FeedComingSoonItem {
	if x != nil {
		return x.Items
	}
	return nil
}

type FeedComingSoonItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Poster        *Poster `protobuf:"bytes,1,opt,name=poster,proto3,oneof" json:"poster,omitempty"`
	IsReserved    *bool   `protobuf:"varint,2,opt,name=is_reserved,json=isReserved,proto3,oneof" json:"is_reserved,omitempty"`
	ReservedCount *int32  `protobuf:"varint,3,opt,name=reserved_count,json=reservedCount,proto3,oneof" json:"reserved_count,omitempty"`
	ReleaseTime   *string `protobuf:"bytes,4,opt,name=release_time,json=releaseTime,proto3,oneof" json:"release_time,omitempty"`
	Id            *string `protobuf:"bytes,5,opt,name=id,proto3,oneof" json:"id,omitempty"`
	Type          *IdType `protobuf:"varint,6,opt,name=type,proto3,enum=QQTV.IdType,oneof" json:"type,omitempty"`
	LiveStatus    *int32  `protobuf:"varint,7,opt,name=live_status,json=liveStatus,proto3,oneof" json:"live_status,omitempty"`
	EndTime       *string `protobuf:"bytes,8,opt,name=end_time,json=endTime,proto3,oneof" json:"end_time,omitempty"`
	WatchCount    *int64  `protobuf:"varint,9,opt,name=watch_count,json=watchCount,proto3,oneof" json:"watch_count,omitempty"`
}

func (x *FeedComingSoonItem) Reset() {
	*x = FeedComingSoonItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feed_data_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeedComingSoonItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeedComingSoonItem) ProtoMessage() {}

func (x *FeedComingSoonItem) ProtoReflect() protoreflect.Message {
	mi := &file_feed_data_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeedComingSoonItem.ProtoReflect.Descriptor instead.
func (*FeedComingSoonItem) Descriptor() ([]byte, []int) {
	return file_feed_data_proto_rawDescGZIP(), []int{49}
}

func (x *FeedComingSoonItem) GetPoster() *Poster {
	if x != nil {
		return x.Poster
	}
	return nil
}

func (x *FeedComingSoonItem) GetIsReserved() bool {
	if x != nil && x.IsReserved != nil {
		return *x.IsReserved
	}
	return false
}

func (x *FeedComingSoonItem) GetReservedCount() int32 {
	if x != nil && x.ReservedCount != nil {
		return *x.ReservedCount
	}
	return 0
}

func (x *FeedComingSoonItem) GetReleaseTime() string {
	if x != nil && x.ReleaseTime != nil {
		return *x.ReleaseTime
	}
	return ""
}

func (x *FeedComingSoonItem) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *FeedComingSoonItem) GetType() IdType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return IdType_ID_TYPE_CID
}

func (x *FeedComingSoonItem) GetLiveStatus() int32 {
	if x != nil && x.LiveStatus != nil {
		return *x.LiveStatus
	}
	return 0
}

func (x *FeedComingSoonItem) GetEndTime() string {
	if x != nil && x.EndTime != nil {
		return *x.EndTime
	}
	return ""
}

func (x *FeedComingSoonItem) GetWatchCount() int64 {
	if x != nil && x.WatchCount != nil {
		return *x.WatchCount
	}
	return 0
}

type FeedComingsoonVideoPlayer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Video         *VideoItemData `protobuf:"bytes,1,opt,name=video,proto3,oneof" json:"video,omitempty"`
	Poster        *Poster        `protobuf:"bytes,2,opt,name=poster,proto3,oneof" json:"poster,omitempty"`
	IsReserved    *bool          `protobuf:"varint,3,opt,name=is_reserved,json=isReserved,proto3,oneof" json:"is_reserved,omitempty"`
	ReservedCount *int32         `protobuf:"varint,4,opt,name=reserved_count,json=reservedCount,proto3,oneof" json:"reserved_count,omitempty"`
	ReleaseTime   *string        `protobuf:"bytes,5,opt,name=release_time,json=releaseTime,proto3,oneof" json:"release_time,omitempty"`
	LiveStatus    *int32         `protobuf:"varint,6,opt,name=live_status,json=liveStatus,proto3,oneof" json:"live_status,omitempty"`
	EndTime       *string        `protobuf:"bytes,7,opt,name=end_time,json=endTime,proto3,oneof" json:"end_time,omitempty"`
	WatchCount    *int64         `protobuf:"varint,8,opt,name=watch_count,json=watchCount,proto3,oneof" json:"watch_count,omitempty"`
}

func (x *FeedComingsoonVideoPlayer) Reset() {
	*x = FeedComingsoonVideoPlayer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feed_data_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeedComingsoonVideoPlayer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeedComingsoonVideoPlayer) ProtoMessage() {}

func (x *FeedComingsoonVideoPlayer) ProtoReflect() protoreflect.Message {
	mi := &file_feed_data_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeedComingsoonVideoPlayer.ProtoReflect.Descriptor instead.
func (*FeedComingsoonVideoPlayer) Descriptor() ([]byte, []int) {
	return file_feed_data_proto_rawDescGZIP(), []int{50}
}

func (x *FeedComingsoonVideoPlayer) GetVideo() *VideoItemData {
	if x != nil {
		return x.Video
	}
	return nil
}

func (x *FeedComingsoonVideoPlayer) GetPoster() *Poster {
	if x != nil {
		return x.Poster
	}
	return nil
}

func (x *FeedComingsoonVideoPlayer) GetIsReserved() bool {
	if x != nil && x.IsReserved != nil {
		return *x.IsReserved
	}
	return false
}

func (x *FeedComingsoonVideoPlayer) GetReservedCount() int32 {
	if x != nil && x.ReservedCount != nil {
		return *x.ReservedCount
	}
	return 0
}

func (x *FeedComingsoonVideoPlayer) GetReleaseTime() string {
	if x != nil && x.ReleaseTime != nil {
		return *x.ReleaseTime
	}
	return ""
}

func (x *FeedComingsoonVideoPlayer) GetLiveStatus() int32 {
	if x != nil && x.LiveStatus != nil {
		return *x.LiveStatus
	}
	return 0
}

func (x *FeedComingsoonVideoPlayer) GetEndTime() string {
	if x != nil && x.EndTime != nil {
		return *x.EndTime
	}
	return ""
}

func (x *FeedComingsoonVideoPlayer) GetWatchCount() int64 {
	if x != nil && x.WatchCount != nil {
		return *x.WatchCount
	}
	return 0
}

type FeedComingsoonLaunchTime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lauchtime *string `protobuf:"bytes,1,opt,name=lauchtime,proto3,oneof" json:"lauchtime,omitempty"`
}

func (x *FeedComingsoonLaunchTime) Reset() {
	*x = FeedComingsoonLaunchTime{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feed_data_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeedComingsoonLaunchTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeedComingsoonLaunchTime) ProtoMessage() {}

func (x *FeedComingsoonLaunchTime) ProtoReflect() protoreflect.Message {
	mi := &file_feed_data_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeedComingsoonLaunchTime.ProtoReflect.Descriptor instead.
func (*FeedComingsoonLaunchTime) Descriptor() ([]byte, []int) {
	return file_feed_data_proto_rawDescGZIP(), []int{51}
}

func (x *FeedComingsoonLaunchTime) GetLauchtime() string {
	if x != nil && x.Lauchtime != nil {
		return *x.Lauchtime
	}
	return ""
}

type FeedAd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Adunitid *string `protobuf:"bytes,1,opt,name=adunitid,proto3,oneof" json:"adunitid,omitempty"`
}

func (x *FeedAd) Reset() {
	*x = FeedAd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feed_data_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeedAd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeedAd) ProtoMessage() {}

func (x *FeedAd) ProtoReflect() protoreflect.Message {
	mi := &file_feed_data_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeedAd.ProtoReflect.Descriptor instead.
func (*FeedAd) Descriptor() ([]byte, []int) {
	return file_feed_data_proto_rawDescGZIP(), []int{52}
}

func (x *FeedAd) GetAdunitid() string {
	if x != nil && x.Adunitid != nil {
		return *x.Adunitid
	}
	return ""
}

type FeedUserInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vuid            *string `protobuf:"bytes,1,opt,name=vuid,proto3,oneof" json:"vuid,omitempty"`
	Avatar          *string `protobuf:"bytes,2,opt,name=avatar,proto3,oneof" json:"avatar,omitempty"`
	Nick            *string `protobuf:"bytes,3,opt,name=nick,proto3,oneof" json:"nick,omitempty"`
	Vip             *int32  `protobuf:"varint,4,opt,name=vip,proto3,oneof" json:"vip,omitempty"`
	VipExpiration   *int64  `protobuf:"varint,5,opt,name=vip_expiration,json=vipExpiration,proto3,oneof" json:"vip_expiration,omitempty"`
	Text            *string `protobuf:"bytes,6,opt,name=text,proto3,oneof" json:"text,omitempty"`
	ButtonText      *string `protobuf:"bytes,7,opt,name=button_text,json=buttonText,proto3,oneof" json:"button_text,omitempty"`
	ButtonActon     *string `protobuf:"bytes,8,opt,name=button_acton,json=buttonActon,proto3,oneof" json:"button_acton,omitempty"`
	ButtonImg       *string `protobuf:"bytes,9,opt,name=button_img,json=buttonImg,proto3,oneof" json:"button_img,omitempty"`
	TextColor       *string `protobuf:"bytes,10,opt,name=text_color,json=textColor,proto3,oneof" json:"text_color,omitempty"`
	ButtonTextColor *string `protobuf:"bytes,11,opt,name=button_text_color,json=buttonTextColor,proto3,oneof" json:"button_text_color,omitempty"`
}

func (x *FeedUserInfo) Reset() {
	*x = FeedUserInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feed_data_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeedUserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeedUserInfo) ProtoMessage() {}

func (x *FeedUserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_feed_data_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeedUserInfo.ProtoReflect.Descriptor instead.
func (*FeedUserInfo) Descriptor() ([]byte, []int) {
	return file_feed_data_proto_rawDescGZIP(), []int{53}
}

func (x *FeedUserInfo) GetVuid() string {
	if x != nil && x.Vuid != nil {
		return *x.Vuid
	}
	return ""
}

func (x *FeedUserInfo) GetAvatar() string {
	if x != nil && x.Avatar != nil {
		return *x.Avatar
	}
	return ""
}

func (x *FeedUserInfo) GetNick() string {
	if x != nil && x.Nick != nil {
		return *x.Nick
	}
	return ""
}

func (x *FeedUserInfo) GetVip() int32 {
	if x != nil && x.Vip != nil {
		return *x.Vip
	}
	return 0
}

func (x *FeedUserInfo) GetVipExpiration() int64 {
	if x != nil && x.VipExpiration != nil {
		return *x.VipExpiration
	}
	return 0
}

func (x *FeedUserInfo) GetText() string {
	if x != nil && x.Text != nil {
		return *x.Text
	}
	return ""
}

func (x *FeedUserInfo) GetButtonText() string {
	if x != nil && x.ButtonText != nil {
		return *x.ButtonText
	}
	return ""
}

func (x *FeedUserInfo) GetButtonActon() string {
	if x != nil && x.ButtonActon != nil {
		return *x.ButtonActon
	}
	return ""
}

func (x *FeedUserInfo) GetButtonImg() string {
	if x != nil && x.ButtonImg != nil {
		return *x.ButtonImg
	}
	return ""
}

func (x *FeedUserInfo) GetTextColor() string {
	if x != nil && x.TextColor != nil {
		return *x.TextColor
	}
	return ""
}

func (x *FeedUserInfo) GetButtonTextColor() string {
	if x != nil && x.ButtonTextColor != nil {
		return *x.ButtonTextColor
	}
	return ""
}

type FeedWelcomeText struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text *string `protobuf:"bytes,1,opt,name=text,proto3,oneof" json:"text,omitempty"`
}

func (x *FeedWelcomeText) Reset() {
	*x = FeedWelcomeText{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feed_data_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeedWelcomeText) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeedWelcomeText) ProtoMessage() {}

func (x *FeedWelcomeText) ProtoReflect() protoreflect.Message {
	mi := &file_feed_data_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeedWelcomeText.ProtoReflect.Descriptor instead.
func (*FeedWelcomeText) Descriptor() ([]byte, []int) {
	return file_feed_data_proto_rawDescGZIP(), []int{54}
}

func (x *FeedWelcomeText) GetText() string {
	if x != nil && x.Text != nil {
		return *x.Text
	}
	return ""
}

type FeedSplitter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text *string `protobuf:"bytes,1,opt,name=text,proto3,oneof" json:"text,omitempty"`
}

func (x *FeedSplitter) Reset() {
	*x = FeedSplitter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feed_data_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeedSplitter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeedSplitter) ProtoMessage() {}

func (x *FeedSplitter) ProtoReflect() protoreflect.Message {
	mi := &file_feed_data_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeedSplitter.ProtoReflect.Descriptor instead.
func (*FeedSplitter) Descriptor() ([]byte, []int) {
	return file_feed_data_proto_rawDescGZIP(), []int{55}
}

func (x *FeedSplitter) GetText() string {
	if x != nil && x.Text != nil {
		return *x.Text
	}
	return ""
}

type RichTextRow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Icon     *string `protobuf:"bytes,1,opt,name=icon,proto3,oneof" json:"icon,omitempty"`
	RichText *string `protobuf:"bytes,2,opt,name=rich_text,json=richText,proto3,oneof" json:"rich_text,omitempty"`
}

func (x *RichTextRow) Reset() {
	*x = RichTextRow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feed_data_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RichTextRow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RichTextRow) ProtoMessage() {}

func (x *RichTextRow) ProtoReflect() protoreflect.Message {
	mi := &file_feed_data_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RichTextRow.ProtoReflect.Descriptor instead.
func (*RichTextRow) Descriptor() ([]byte, []int) {
	return file_feed_data_proto_rawDescGZIP(), []int{56}
}

func (x *RichTextRow) GetIcon() string {
	if x != nil && x.Icon != nil {
		return *x.Icon
	}
	return ""
}

func (x *RichTextRow) GetRichText() string {
	if x != nil && x.RichText != nil {
		return *x.RichText
	}
	return ""
}

type FeedMultiRichText struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*RichTextRow `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *FeedMultiRichText) Reset() {
	*x = FeedMultiRichText{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feed_data_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeedMultiRichText) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeedMultiRichText) ProtoMessage() {}

func (x *FeedMultiRichText) ProtoReflect() protoreflect.Message {
	mi := &file_feed_data_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeedMultiRichText.ProtoReflect.Descriptor instead.
func (*FeedMultiRichText) Descriptor() ([]byte, []int) {
	return file_feed_data_proto_rawDescGZIP(), []int{57}
}

func (x *FeedMultiRichText) GetItems() []*RichTextRow {
	if x != nil {
		return x.Items
	}
	return nil
}

type FeedJoinVIP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserInfo     *FeedUserInfo      `protobuf:"bytes,1,opt,name=user_info,json=userInfo,proto3,oneof" json:"user_info,omitempty"`
	RichTextList *FeedMultiRichText `protobuf:"bytes,2,opt,name=rich_text_list,json=richTextList,proto3,oneof" json:"rich_text_list,omitempty"`
	Report       *ReportData        `protobuf:"bytes,3,opt,name=report,proto3,oneof" json:"report,omitempty"`
}

func (x *FeedJoinVIP) Reset() {
	*x = FeedJoinVIP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feed_data_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeedJoinVIP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeedJoinVIP) ProtoMessage() {}

func (x *FeedJoinVIP) ProtoReflect() protoreflect.Message {
	mi := &file_feed_data_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeedJoinVIP.ProtoReflect.Descriptor instead.
func (*FeedJoinVIP) Descriptor() ([]byte, []int) {
	return file_feed_data_proto_rawDescGZIP(), []int{58}
}

func (x *FeedJoinVIP) GetUserInfo() *FeedUserInfo {
	if x != nil {
		return x.UserInfo
	}
	return nil
}

func (x *FeedJoinVIP) GetRichTextList() *FeedMultiRichText {
	if x != nil {
		return x.RichTextList
	}
	return nil
}

func (x *FeedJoinVIP) GetReport() *ReportData {
	if x != nil {
		return x.Report
	}
	return nil
}

type FeedRankListWithTitle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title    *FeedPosterTitle    `protobuf:"bytes,1,opt,name=title,proto3,oneof" json:"title,omitempty"`
	RankList *FeedRankPosterList `protobuf:"bytes,2,opt,name=rank_list,json=rankList,proto3,oneof" json:"rank_list,omitempty"`
}

func (x *FeedRankListWithTitle) Reset() {
	*x = FeedRankListWithTitle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feed_data_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeedRankListWithTitle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeedRankListWithTitle) ProtoMessage() {}

func (x *FeedRankListWithTitle) ProtoReflect() protoreflect.Message {
	mi := &file_feed_data_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeedRankListWithTitle.ProtoReflect.Descriptor instead.
func (*FeedRankListWithTitle) Descriptor() ([]byte, []int) {
	return file_feed_data_proto_rawDescGZIP(), []int{59}
}

func (x *FeedRankListWithTitle) GetTitle() *FeedPosterTitle {
	if x != nil {
		return x.Title
	}
	return nil
}

func (x *FeedRankListWithTitle) GetRankList() *FeedRankPosterList {
	if x != nil {
		return x.RankList
	}
	return nil
}

type FeedMultiRankList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items  []*FeedRankListWithTitle `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	Report *ReportData              `protobuf:"bytes,2,opt,name=report,proto3,oneof" json:"report,omitempty"`
}

func (x *FeedMultiRankList) Reset() {
	*x = FeedMultiRankList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feed_data_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeedMultiRankList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeedMultiRankList) ProtoMessage() {}

func (x *FeedMultiRankList) ProtoReflect() protoreflect.Message {
	mi := &file_feed_data_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeedMultiRankList.ProtoReflect.Descriptor instead.
func (*FeedMultiRankList) Descriptor() ([]byte, []int) {
	return file_feed_data_proto_rawDescGZIP(), []int{60}
}

func (x *FeedMultiRankList) GetItems() []*FeedRankListWithTitle {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *FeedMultiRankList) GetReport() *ReportData {
	if x != nil {
		return x.Report
	}
	return nil
}

type FeedDetailsRecommendHorizontal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VideoList []*FeedRecommendItem `protobuf:"bytes,1,rep,name=video_list,json=videoList,proto3" json:"video_list,omitempty"`
}

func (x *FeedDetailsRecommendHorizontal) Reset() {
	*x = FeedDetailsRecommendHorizontal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feed_data_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeedDetailsRecommendHorizontal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeedDetailsRecommendHorizontal) ProtoMessage() {}

func (x *FeedDetailsRecommendHorizontal) ProtoReflect() protoreflect.Message {
	mi := &file_feed_data_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeedDetailsRecommendHorizontal.ProtoReflect.Descriptor instead.
func (*FeedDetailsRecommendHorizontal) Descriptor() ([]byte, []int) {
	return file_feed_data_proto_rawDescGZIP(), []int{61}
}

func (x *FeedDetailsRecommendHorizontal) GetVideoList() []*FeedRecommendItem {
	if x != nil {
		return x.VideoList
	}
	return nil
}

type FeedShortVideoItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cid         *string      `protobuf:"bytes,1,opt,name=cid,proto3,oneof" json:"cid,omitempty"`
	Poster      *Poster      `protobuf:"bytes,2,opt,name=poster,proto3,oneof" json:"poster,omitempty"`
	CpInfo      *CPInfo      `protobuf:"bytes,3,opt,name=cp_info,json=cpInfo,proto3,oneof" json:"cp_info,omitempty"`
	ShareItem   *ShareItem   `protobuf:"bytes,4,opt,name=share_item,json=shareItem,proto3,oneof" json:"share_item,omitempty"`
	VideoOption *VideoOption `protobuf:"bytes,5,opt,name=video_option,json=videoOption,proto3,oneof" json:"video_option,omitempty"`
	DataKey     *string      `protobuf:"bytes,6,opt,name=data_key,json=dataKey,proto3,oneof" json:"data_key,omitempty"`
}

func (x *FeedShortVideoItem) Reset() {
	*x = FeedShortVideoItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feed_data_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeedShortVideoItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeedShortVideoItem) ProtoMessage() {}

func (x *FeedShortVideoItem) ProtoReflect() protoreflect.Message {
	mi := &file_feed_data_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeedShortVideoItem.ProtoReflect.Descriptor instead.
func (*FeedShortVideoItem) Descriptor() ([]byte, []int) {
	return file_feed_data_proto_rawDescGZIP(), []int{62}
}

func (x *FeedShortVideoItem) GetCid() string {
	if x != nil && x.Cid != nil {
		return *x.Cid
	}
	return ""
}

func (x *FeedShortVideoItem) GetPoster() *Poster {
	if x != nil {
		return x.Poster
	}
	return nil
}

func (x *FeedShortVideoItem) GetCpInfo() *CPInfo {
	if x != nil {
		return x.CpInfo
	}
	return nil
}

func (x *FeedShortVideoItem) GetShareItem() *ShareItem {
	if x != nil {
		return x.ShareItem
	}
	return nil
}

func (x *FeedShortVideoItem) GetVideoOption() *VideoOption {
	if x != nil {
		return x.VideoOption
	}
	return nil
}

func (x *FeedShortVideoItem) GetDataKey() string {
	if x != nil && x.DataKey != nil {
		return *x.DataKey
	}
	return ""
}

type FeedTopicInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Poster        *Poster `protobuf:"bytes,1,opt,name=poster,proto3,oneof" json:"poster,omitempty"`
	IsReserved    *bool   `protobuf:"varint,2,opt,name=is_reserved,json=isReserved,proto3,oneof" json:"is_reserved,omitempty"`
	ReservedCount *int32  `protobuf:"varint,3,opt,name=reserved_count,json=reservedCount,proto3,oneof" json:"reserved_count,omitempty"`
}

func (x *FeedTopicInfo) Reset() {
	*x = FeedTopicInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feed_data_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeedTopicInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeedTopicInfo) ProtoMessage() {}

func (x *FeedTopicInfo) ProtoReflect() protoreflect.Message {
	mi := &file_feed_data_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeedTopicInfo.ProtoReflect.Descriptor instead.
func (*FeedTopicInfo) Descriptor() ([]byte, []int) {
	return file_feed_data_proto_rawDescGZIP(), []int{63}
}

func (x *FeedTopicInfo) GetPoster() *Poster {
	if x != nil {
		return x.Poster
	}
	return nil
}

func (x *FeedTopicInfo) GetIsReserved() bool {
	if x != nil && x.IsReserved != nil {
		return *x.IsReserved
	}
	return false
}

func (x *FeedTopicInfo) GetReservedCount() int32 {
	if x != nil && x.ReservedCount != nil {
		return *x.ReservedCount
	}
	return 0
}

type FeedHorizontalPoster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Poster *Poster `protobuf:"bytes,1,opt,name=poster,proto3,oneof" json:"poster,omitempty"`
}

func (x *FeedHorizontalPoster) Reset() {
	*x = FeedHorizontalPoster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feed_data_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeedHorizontalPoster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeedHorizontalPoster) ProtoMessage() {}

func (x *FeedHorizontalPoster) ProtoReflect() protoreflect.Message {
	mi := &file_feed_data_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeedHorizontalPoster.ProtoReflect.Descriptor instead.
func (*FeedHorizontalPoster) Descriptor() ([]byte, []int) {
	return file_feed_data_proto_rawDescGZIP(), []int{64}
}

func (x *FeedHorizontalPoster) GetPoster() *Poster {
	if x != nil {
		return x.Poster
	}
	return nil
}

type FeedPosterVerticalX3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PosterList []*Poster `protobuf:"bytes,1,rep,name=poster_list,json=posterList,proto3" json:"poster_list,omitempty"`
}

func (x *FeedPosterVerticalX3) Reset() {
	*x = FeedPosterVerticalX3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feed_data_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeedPosterVerticalX3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeedPosterVerticalX3) ProtoMessage() {}

func (x *FeedPosterVerticalX3) ProtoReflect() protoreflect.Message {
	mi := &file_feed_data_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeedPosterVerticalX3.ProtoReflect.Descriptor instead.
func (*FeedPosterVerticalX3) Descriptor() ([]byte, []int) {
	return file_feed_data_proto_rawDescGZIP(), []int{65}
}

func (x *FeedPosterVerticalX3) GetPosterList() []*Poster {
	if x != nil {
		return x.PosterList
	}
	return nil
}

type FeedPosterBannerAD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Poster *Poster `protobuf:"bytes,1,opt,name=poster,proto3,oneof" json:"poster,omitempty"`
}

func (x *FeedPosterBannerAD) Reset() {
	*x = FeedPosterBannerAD{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feed_data_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeedPosterBannerAD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeedPosterBannerAD) ProtoMessage() {}

func (x *FeedPosterBannerAD) ProtoReflect() protoreflect.Message {
	mi := &file_feed_data_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeedPosterBannerAD.ProtoReflect.Descriptor instead.
func (*FeedPosterBannerAD) Descriptor() ([]byte, []int) {
	return file_feed_data_proto_rawDescGZIP(), []int{66}
}

func (x *FeedPosterBannerAD) GetPoster() *Poster {
	if x != nil {
		return x.Poster
	}
	return nil
}

type FeedRecommendX2Item struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecommendItem []*RecommendX2Item `protobuf:"bytes,1,rep,name=recommend_item,json=recommendItem,proto3" json:"recommend_item,omitempty"`
}

func (x *FeedRecommendX2Item) Reset() {
	*x = FeedRecommendX2Item{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feed_data_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeedRecommendX2Item) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeedRecommendX2Item) ProtoMessage() {}

func (x *FeedRecommendX2Item) ProtoReflect() protoreflect.Message {
	mi := &file_feed_data_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeedRecommendX2Item.ProtoReflect.Descriptor instead.
func (*FeedRecommendX2Item) Descriptor() ([]byte, []int) {
	return file_feed_data_proto_rawDescGZIP(), []int{67}
}

func (x *FeedRecommendX2Item) GetRecommendItem() []*RecommendX2Item {
	if x != nil {
		return x.RecommendItem
	}
	return nil
}

type RecommendX2Item struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type          *RecommendX2ItemType `protobuf:"varint,1,opt,name=type,proto3,enum=QQTV.RecommendX2ItemType,oneof" json:"type,omitempty"`
	RecommendItem *FeedRecommendItem   `protobuf:"bytes,2,opt,name=recommend_item,json=recommendItem,proto3,oneof" json:"recommend_item,omitempty"`
	ActionPoster  *Poster              `protobuf:"bytes,3,opt,name=action_poster,json=actionPoster,proto3,oneof" json:"action_poster,omitempty"`
}

func (x *RecommendX2Item) Reset() {
	*x = RecommendX2Item{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feed_data_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecommendX2Item) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecommendX2Item) ProtoMessage() {}

func (x *RecommendX2Item) ProtoReflect() protoreflect.Message {
	mi := &file_feed_data_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecommendX2Item.ProtoReflect.Descriptor instead.
func (*RecommendX2Item) Descriptor() ([]byte, []int) {
	return file_feed_data_proto_rawDescGZIP(), []int{68}
}

func (x *RecommendX2Item) GetType() RecommendX2ItemType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return RecommendX2ItemType_TYPE_RECOMMENDX2_JUMP
}

func (x *RecommendX2Item) GetRecommendItem() *FeedRecommendItem {
	if x != nil {
		return x.RecommendItem
	}
	return nil
}

func (x *RecommendX2Item) GetActionPoster() *Poster {
	if x != nil {
		return x.ActionPoster
	}
	return nil
}

type FeedVideoX2Item struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VideoItem []*FeedVideoItem `protobuf:"bytes,1,rep,name=video_item,json=videoItem,proto3" json:"video_item,omitempty"`
}

func (x *FeedVideoX2Item) Reset() {
	*x = FeedVideoX2Item{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feed_data_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeedVideoX2Item) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeedVideoX2Item) ProtoMessage() {}

func (x *FeedVideoX2Item) ProtoReflect() protoreflect.Message {
	mi := &file_feed_data_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeedVideoX2Item.ProtoReflect.Descriptor instead.
func (*FeedVideoX2Item) Descriptor() ([]byte, []int) {
	return file_feed_data_proto_rawDescGZIP(), []int{69}
}

func (x *FeedVideoX2Item) GetVideoItem() []*FeedVideoItem {
	if x != nil {
		return x.VideoItem
	}
	return nil
}

type FeedVideoItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Poster *Poster        `protobuf:"bytes,1,opt,name=poster,proto3,oneof" json:"poster,omitempty"`
	Video  *VideoItemData `protobuf:"bytes,2,opt,name=video,proto3,oneof" json:"video,omitempty"`
	CpInfo *CPInfo        `protobuf:"bytes,4,opt,name=cp_info,json=cpInfo,proto3,oneof" json:"cp_info,omitempty"`
}

func (x *FeedVideoItem) Reset() {
	*x = FeedVideoItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feed_data_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeedVideoItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeedVideoItem) ProtoMessage() {}

func (x *FeedVideoItem) ProtoReflect() protoreflect.Message {
	mi := &file_feed_data_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeedVideoItem.ProtoReflect.Descriptor instead.
func (*FeedVideoItem) Descriptor() ([]byte, []int) {
	return file_feed_data_proto_rawDescGZIP(), []int{70}
}

func (x *FeedVideoItem) GetPoster() *Poster {
	if x != nil {
		return x.Poster
	}
	return nil
}

func (x *FeedVideoItem) GetVideo() *VideoItemData {
	if x != nil {
		return x.Video
	}
	return nil
}

func (x *FeedVideoItem) GetCpInfo() *CPInfo {
	if x != nil {
		return x.CpInfo
	}
	return nil
}

type FeedActorList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActorsList *ActorList `protobuf:"bytes,1,opt,name=actors_list,json=actorsList,proto3,oneof" json:"actors_list,omitempty"`
}

func (x *FeedActorList) Reset() {
	*x = FeedActorList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feed_data_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeedActorList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeedActorList) ProtoMessage() {}

func (x *FeedActorList) ProtoReflect() protoreflect.Message {
	mi := &file_feed_data_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeedActorList.ProtoReflect.Descriptor instead.
func (*FeedActorList) Descriptor() ([]byte, []int) {
	return file_feed_data_proto_rawDescGZIP(), []int{71}
}

func (x *FeedActorList) GetActorsList() *ActorList {
	if x != nil {
		return x.ActorsList
	}
	return nil
}

type FeedNoMoreDataItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FeedNoMoreDataItem) Reset() {
	*x = FeedNoMoreDataItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feed_data_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeedNoMoreDataItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeedNoMoreDataItem) ProtoMessage() {}

func (x *FeedNoMoreDataItem) ProtoReflect() protoreflect.Message {
	mi := &file_feed_data_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeedNoMoreDataItem.ProtoReflect.Descriptor instead.
func (*FeedNoMoreDataItem) Descriptor() ([]byte, []int) {
	return file_feed_data_proto_rawDescGZIP(), []int{72}
}

type FeedSeeMoreItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FeedSeeMoreItem) Reset() {
	*x = FeedSeeMoreItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feed_data_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeedSeeMoreItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeedSeeMoreItem) ProtoMessage() {}

func (x *FeedSeeMoreItem) ProtoReflect() protoreflect.Message {
	mi := &file_feed_data_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeedSeeMoreItem.ProtoReflect.Descriptor instead.
func (*FeedSeeMoreItem) Descriptor() ([]byte, []int) {
	return file_feed_data_proto_rawDescGZIP(), []int{73}
}

type FeedBigImageItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImageUrl   *string                             `protobuf:"bytes,1,opt,name=image_url,json=imageUrl,proto3,oneof" json:"image_url,omitempty"`
	Action     *Action                             `protobuf:"bytes,2,opt,name=action,proto3,oneof" json:"action,omitempty"`
	Reportdata []*FeedBigImageItem_ReportDataEntry `protobuf:"bytes,3,rep,name=reportdata,proto3" json:"reportdata,omitempty"`
}

func (x *FeedBigImageItem) Reset() {
	*x = FeedBigImageItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feed_data_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeedBigImageItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeedBigImageItem) ProtoMessage() {}

func (x *FeedBigImageItem) ProtoReflect() protoreflect.Message {
	mi := &file_feed_data_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeedBigImageItem.ProtoReflect.Descriptor instead.
func (*FeedBigImageItem) Descriptor() ([]byte, []int) {
	return file_feed_data_proto_rawDescGZIP(), []int{74}
}

func (x *FeedBigImageItem) GetImageUrl() string {
	if x != nil && x.ImageUrl != nil {
		return *x.ImageUrl
	}
	return ""
}

func (x *FeedBigImageItem) GetAction() *Action {
	if x != nil {
		return x.Action
	}
	return nil
}

func (x *FeedBigImageItem) GetReportdata() []*FeedBigImageItem_ReportDataEntry {
	if x != nil {
		return x.Reportdata
	}
	return nil
}

type FeedTopicCoverPortraitPosterList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title      *FeedPosterTitle `protobuf:"bytes,1,opt,name=title,proto3,oneof" json:"title,omitempty"`
	PosterList []*Poster        `protobuf:"bytes,2,rep,name=poster_list,json=posterList,proto3" json:"poster_list,omitempty"`
	BtnMore    *ButtonMore      `protobuf:"bytes,3,opt,name=btn_more,json=btnMore,proto3,oneof" json:"btn_more,omitempty"`
}

func (x *FeedTopicCoverPortraitPosterList) Reset() {
	*x = FeedTopicCoverPortraitPosterList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feed_data_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeedTopicCoverPortraitPosterList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeedTopicCoverPortraitPosterList) ProtoMessage() {}

func (x *FeedTopicCoverPortraitPosterList) ProtoReflect() protoreflect.Message {
	mi := &file_feed_data_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeedTopicCoverPortraitPosterList.ProtoReflect.Descriptor instead.
func (*FeedTopicCoverPortraitPosterList) Descriptor() ([]byte, []int) {
	return file_feed_data_proto_rawDescGZIP(), []int{75}
}

func (x *FeedTopicCoverPortraitPosterList) GetTitle() *FeedPosterTitle {
	if x != nil {
		return x.Title
	}
	return nil
}

func (x *FeedTopicCoverPortraitPosterList) GetPosterList() []*Poster {
	if x != nil {
		return x.PosterList
	}
	return nil
}

func (x *FeedTopicCoverPortraitPosterList) GetBtnMore() *ButtonMore {
	if x != nil {
		return x.BtnMore
	}
	return nil
}

type FeedTopicCoverItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Poster     *RankPoster `protobuf:"bytes,1,opt,name=poster,proto3,oneof" json:"poster,omitempty"`
	IsReserved *bool       `protobuf:"varint,2,opt,name=is_reserved,json=isReserved,proto3,oneof" json:"is_reserved,omitempty"`
}

func (x *FeedTopicCoverItem) Reset() {
	*x = FeedTopicCoverItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feed_data_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeedTopicCoverItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeedTopicCoverItem) ProtoMessage() {}

func (x *FeedTopicCoverItem) ProtoReflect() protoreflect.Message {
	mi := &file_feed_data_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeedTopicCoverItem.ProtoReflect.Descriptor instead.
func (*FeedTopicCoverItem) Descriptor() ([]byte, []int) {
	return file_feed_data_proto_rawDescGZIP(), []int{76}
}

func (x *FeedTopicCoverItem) GetPoster() *RankPoster {
	if x != nil {
		return x.Poster
	}
	return nil
}

func (x *FeedTopicCoverItem) GetIsReserved() bool {
	if x != nil && x.IsReserved != nil {
		return *x.IsReserved
	}
	return false
}

type FeedPageTitle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title *string `protobuf:"bytes,1,opt,name=title,proto3,oneof" json:"title,omitempty"`
}

func (x *FeedPageTitle) Reset() {
	*x = FeedPageTitle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feed_data_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeedPageTitle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeedPageTitle) ProtoMessage() {}

func (x *FeedPageTitle) ProtoReflect() protoreflect.Message {
	mi := &file_feed_data_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeedPageTitle.ProtoReflect.Descriptor instead.
func (*FeedPageTitle) Descriptor() ([]byte, []int) {
	return file_feed_data_proto_rawDescGZIP(), []int{77}
}

func (x *FeedPageTitle) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

type ItemPoster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Poster *Poster `protobuf:"bytes,1,opt,name=poster,proto3,oneof" json:"poster,omitempty"`
}

func (x *ItemPoster) Reset() {
	*x = ItemPoster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feed_data_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ItemPoster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemPoster) ProtoMessage() {}

func (x *ItemPoster) ProtoReflect() protoreflect.Message {
	mi := &file_feed_data_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemPoster.ProtoReflect.Descriptor instead.
func (*ItemPoster) Descriptor() ([]byte, []int) {
	return file_feed_data_proto_rawDescGZIP(), []int{78}
}

func (x *ItemPoster) GetPoster() *Poster {
	if x != nil {
		return x.Poster
	}
	return nil
}

type ADExInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MoodImgUrl     *string `protobuf:"bytes,1,opt,name=mood_img_url,json=moodImgUrl,proto3,oneof" json:"mood_img_url,omitempty"`
	LogoImgUrl     *string `protobuf:"bytes,2,opt,name=logo_img_url,json=logoImgUrl,proto3,oneof" json:"logo_img_url,omitempty"`
	PlayEndText    *string `protobuf:"bytes,3,opt,name=play_end_text,json=playEndText,proto3,oneof" json:"play_end_text,omitempty"`
	PlayEndBtnText *string `protobuf:"bytes,4,opt,name=play_end_btn_text,json=playEndBtnText,proto3,oneof" json:"play_end_btn_text,omitempty"`
	PlayUrl        *string `protobuf:"bytes,5,opt,name=play_url,json=playUrl,proto3,oneof" json:"play_url,omitempty"`
}

func (x *ADExInfo) Reset() {
	*x = ADExInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feed_data_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ADExInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ADExInfo) ProtoMessage() {}

func (x *ADExInfo) ProtoReflect() protoreflect.Message {
	mi := &file_feed_data_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ADExInfo.ProtoReflect.Descriptor instead.
func (*ADExInfo) Descriptor() ([]byte, []int) {
	return file_feed_data_proto_rawDescGZIP(), []int{79}
}

func (x *ADExInfo) GetMoodImgUrl() string {
	if x != nil && x.MoodImgUrl != nil {
		return *x.MoodImgUrl
	}
	return ""
}

func (x *ADExInfo) GetLogoImgUrl() string {
	if x != nil && x.LogoImgUrl != nil {
		return *x.LogoImgUrl
	}
	return ""
}

func (x *ADExInfo) GetPlayEndText() string {
	if x != nil && x.PlayEndText != nil {
		return *x.PlayEndText
	}
	return ""
}

func (x *ADExInfo) GetPlayEndBtnText() string {
	if x != nil && x.PlayEndBtnText != nil {
		return *x.PlayEndBtnText
	}
	return ""
}

func (x *ADExInfo) GetPlayUrl() string {
	if x != nil && x.PlayUrl != nil {
		return *x.PlayUrl
	}
	return ""
}

type ItemPlayer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Poster    *Poster        `protobuf:"bytes,1,opt,name=poster,proto3,oneof" json:"poster,omitempty"`
	VideoData *VideoItemData `protobuf:"bytes,2,opt,name=video_data,json=videoData,proto3,oneof" json:"video_data,omitempty"`
	AdExInfo  *ADExInfo      `protobuf:"bytes,3,opt,name=ad_ex_info,json=adExInfo,proto3,oneof" json:"ad_ex_info,omitempty"`
}

func (x *ItemPlayer) Reset() {
	*x = ItemPlayer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feed_data_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ItemPlayer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemPlayer) ProtoMessage() {}

func (x *ItemPlayer) ProtoReflect() protoreflect.Message {
	mi := &file_feed_data_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemPlayer.ProtoReflect.Descriptor instead.
func (*ItemPlayer) Descriptor() ([]byte, []int) {
	return file_feed_data_proto_rawDescGZIP(), []int{80}
}

func (x *ItemPlayer) GetPoster() *Poster {
	if x != nil {
		return x.Poster
	}
	return nil
}

func (x *ItemPlayer) GetVideoData() *VideoItemData {
	if x != nil {
		return x.VideoData
	}
	return nil
}

func (x *ItemPlayer) GetAdExInfo() *ADExInfo {
	if x != nil {
		return x.AdExInfo
	}
	return nil
}

type ItemPlayerOuter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Poster   *Poster   `protobuf:"bytes,1,opt,name=poster,proto3,oneof" json:"poster,omitempty"`
	AdExInfo *ADExInfo `protobuf:"bytes,2,opt,name=ad_ex_info,json=adExInfo,proto3,oneof" json:"ad_ex_info,omitempty"`
}

func (x *ItemPlayerOuter) Reset() {
	*x = ItemPlayerOuter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feed_data_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ItemPlayerOuter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemPlayerOuter) ProtoMessage() {}

func (x *ItemPlayerOuter) ProtoReflect() protoreflect.Message {
	mi := &file_feed_data_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemPlayerOuter.ProtoReflect.Descriptor instead.
func (*ItemPlayerOuter) Descriptor() ([]byte, []int) {
	return file_feed_data_proto_rawDescGZIP(), []int{81}
}

func (x *ItemPlayerOuter) GetPoster() *Poster {
	if x != nil {
		return x.Poster
	}
	return nil
}

func (x *ItemPlayerOuter) GetAdExInfo() *ADExInfo {
	if x != nil {
		return x.AdExInfo
	}
	return nil
}

type ItemInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsAd           *bool   `protobuf:"varint,1,opt,name=is_ad,json=isAd,proto3,oneof" json:"is_ad,omitempty"`
	PlayerDuration *int32  `protobuf:"varint,2,opt,name=player_duration,json=playerDuration,proto3,oneof" json:"player_duration,omitempty"`
	LineItemId     *string `protobuf:"bytes,3,opt,name=line_item_id,json=lineItemId,proto3,oneof" json:"line_item_id,omitempty"`
}

func (x *ItemInfo) Reset() {
	*x = ItemInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feed_data_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ItemInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemInfo) ProtoMessage() {}

func (x *ItemInfo) ProtoReflect() protoreflect.Message {
	mi := &file_feed_data_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemInfo.ProtoReflect.Descriptor instead.
func (*ItemInfo) Descriptor() ([]byte, []int) {
	return file_feed_data_proto_rawDescGZIP(), []int{82}
}

func (x *ItemInfo) GetIsAd() bool {
	if x != nil && x.IsAd != nil {
		return *x.IsAd
	}
	return false
}

func (x *ItemInfo) GetPlayerDuration() int32 {
	if x != nil && x.PlayerDuration != nil {
		return *x.PlayerDuration
	}
	return 0
}

func (x *ItemInfo) GetLineItemId() string {
	if x != nil && x.LineItemId != nil {
		return *x.LineItemId
	}
	return ""
}

type ItemOneOf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemInfo *ItemInfo `protobuf:"bytes,1,opt,name=item_info,json=itemInfo,proto3,oneof" json:"item_info,omitempty"`
	// Types that are assignable to Item:
	//
	//	*ItemOneOf_ItemPoster
	//	*ItemOneOf_ItemPlayer
	//	*ItemOneOf_ItemPlayerOuter
	Item isItemOneOf_Item `protobuf_oneof:"item"`
}

func (x *ItemOneOf) Reset() {
	*x = ItemOneOf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feed_data_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ItemOneOf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemOneOf) ProtoMessage() {}

func (x *ItemOneOf) ProtoReflect() protoreflect.Message {
	mi := &file_feed_data_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemOneOf.ProtoReflect.Descriptor instead.
func (*ItemOneOf) Descriptor() ([]byte, []int) {
	return file_feed_data_proto_rawDescGZIP(), []int{83}
}

func (x *ItemOneOf) GetItemInfo() *ItemInfo {
	if x != nil {
		return x.ItemInfo
	}
	return nil
}

func (m *ItemOneOf) GetItem() isItemOneOf_Item {
	if m != nil {
		return m.Item
	}
	return nil
}

func (x *ItemOneOf) GetItemPoster() *ItemPoster {
	if x, ok := x.GetItem().(*ItemOneOf_ItemPoster); ok {
		return x.ItemPoster
	}
	return nil
}

func (x *ItemOneOf) GetItemPlayer() *ItemPlayer {
	if x, ok := x.GetItem().(*ItemOneOf_ItemPlayer); ok {
		return x.ItemPlayer
	}
	return nil
}

func (x *ItemOneOf) GetItemPlayerOuter() *ItemPlayerOuter {
	if x, ok := x.GetItem().(*ItemOneOf_ItemPlayerOuter); ok {
		return x.ItemPlayerOuter
	}
	return nil
}

type isItemOneOf_Item interface {
	isItemOneOf_Item()
}

type ItemOneOf_ItemPoster struct {
	ItemPoster *ItemPoster `protobuf:"bytes,2,opt,name=item_poster,json=itemPoster,proto3,oneof"`
}

type ItemOneOf_ItemPlayer struct {
	ItemPlayer *ItemPlayer `protobuf:"bytes,3,opt,name=item_player,json=itemPlayer,proto3,oneof"`
}

type ItemOneOf_ItemPlayerOuter struct {
	ItemPlayerOuter *ItemPlayerOuter `protobuf:"bytes,4,opt,name=item_player_outer,json=itemPlayerOuter,proto3,oneof"`
}

func (*ItemOneOf_ItemPoster) isItemOneOf_Item() {}

func (*ItemOneOf_ItemPlayer) isItemOneOf_Item() {}

func (*ItemOneOf_ItemPlayerOuter) isItemOneOf_Item() {}

type FeedFocusMultiList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*ItemOneOf `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *FeedFocusMultiList) Reset() {
	*x = FeedFocusMultiList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feed_data_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeedFocusMultiList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeedFocusMultiList) ProtoMessage() {}

func (x *FeedFocusMultiList) ProtoReflect() protoreflect.Message {
	mi := &file_feed_data_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeedFocusMultiList.ProtoReflect.Descriptor instead.
func (*FeedFocusMultiList) Descriptor() ([]byte, []int) {
	return file_feed_data_proto_rawDescGZIP(), []int{84}
}

func (x *FeedFocusMultiList) GetList() []*ItemOneOf {
	if x != nil {
		return x.List
	}
	return nil
}

type FeedNameSlideList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*Poster `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *FeedNameSlideList) Reset() {
	*x = FeedNameSlideList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feed_data_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeedNameSlideList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeedNameSlideList) ProtoMessage() {}

func (x *FeedNameSlideList) ProtoReflect() protoreflect.Message {
	mi := &file_feed_data_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeedNameSlideList.ProtoReflect.Descriptor instead.
func (*FeedNameSlideList) Descriptor() ([]byte, []int) {
	return file_feed_data_proto_rawDescGZIP(), []int{85}
}

func (x *FeedNameSlideList) GetList() []*Poster {
	if x != nil {
		return x.List
	}
	return nil
}

type FeedNameInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Poster *Poster `protobuf:"bytes,1,opt,name=poster,proto3,oneof" json:"poster,omitempty"`
}

func (x *FeedNameInfo) Reset() {
	*x = FeedNameInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feed_data_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeedNameInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeedNameInfo) ProtoMessage() {}

func (x *FeedNameInfo) ProtoReflect() protoreflect.Message {
	mi := &file_feed_data_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeedNameInfo.ProtoReflect.Descriptor instead.
func (*FeedNameInfo) Descriptor() ([]byte, []int) {
	return file_feed_data_proto_rawDescGZIP(), []int{86}
}

func (x *FeedNameInfo) GetPoster() *Poster {
	if x != nil {
		return x.Poster
	}
	return nil
}

type FeedVIPPrBanner_ExtraDataEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   *string `protobuf:"bytes,1,opt,name=key,proto3,oneof" json:"key,omitempty"`
	Value *string `protobuf:"bytes,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
}

func (x *FeedVIPPrBanner_ExtraDataEntry) Reset() {
	*x = FeedVIPPrBanner_ExtraDataEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feed_data_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeedVIPPrBanner_ExtraDataEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeedVIPPrBanner_ExtraDataEntry) ProtoMessage() {}

func (x *FeedVIPPrBanner_ExtraDataEntry) ProtoReflect() protoreflect.Message {
	mi := &file_feed_data_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeedVIPPrBanner_ExtraDataEntry.ProtoReflect.Descriptor instead.
func (*FeedVIPPrBanner_ExtraDataEntry) Descriptor() ([]byte, []int) {
	return file_feed_data_proto_rawDescGZIP(), []int{35, 0}
}

func (x *FeedVIPPrBanner_ExtraDataEntry) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *FeedVIPPrBanner_ExtraDataEntry) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

type FeedBigImageItem_ReportDataEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   *string `protobuf:"bytes,1,opt,name=key,proto3,oneof" json:"key,omitempty"`
	Value *string `protobuf:"bytes,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
}

func (x *FeedBigImageItem_ReportDataEntry) Reset() {
	*x = FeedBigImageItem_ReportDataEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feed_data_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeedBigImageItem_ReportDataEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeedBigImageItem_ReportDataEntry) ProtoMessage() {}

func (x *FeedBigImageItem_ReportDataEntry) ProtoReflect() protoreflect.Message {
	mi := &file_feed_data_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeedBigImageItem_ReportDataEntry.ProtoReflect.Descriptor instead.
func (*FeedBigImageItem_ReportDataEntry) Descriptor() ([]byte, []int) {
	return file_feed_data_proto_rawDescGZIP(), []int{74, 0}
}

func (x *FeedBigImageItem_ReportDataEntry) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *FeedBigImageItem_ReportDataEntry) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

var File_feed_data_proto protoreflect.FileDescriptor

var file_feed_data_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x66, 0x65, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x04, 0x51, 0x51, 0x54, 0x56, 0x1a, 0x10, 0x62, 0x61, 0x73, 0x69, 0x63, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x63, 0x0a, 0x0f, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x46, 0x65, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x17, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x66, 0x65, 0x65, 0x64, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x01, 0x52, 0x08, 0x66, 0x65, 0x65, 0x64,
	0x44, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x66, 0x65, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x22, 0x86,
	0x02, 0x0a, 0x0f, 0x46, 0x65, 0x65, 0x64, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x54, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a,
	0x08, 0x73, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x01, 0x52, 0x08, 0x73, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24,
	0x0a, 0x0b, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x02, 0x52, 0x0a, 0x72, 0x69, 0x67, 0x68, 0x74, 0x41, 0x72, 0x72, 0x6f,
	0x77, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x51, 0x51, 0x54, 0x56, 0x2e, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x03, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12,
	0x24, 0x0a, 0x0b, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0a, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e,
	0x66, 0x6f, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x73, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x7e, 0x0a, 0x0e, 0x46, 0x65, 0x65, 0x64, 0x50,
	0x6f, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x0b, 0x70, 0x6f, 0x73,
	0x74, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x51, 0x51, 0x54, 0x56, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x52, 0x0a, 0x70, 0x6f,
	0x73, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x08, 0x62, 0x74, 0x6e, 0x5f,
	0x6d, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x51, 0x51, 0x54,
	0x56, 0x2e, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x4d, 0x6f, 0x72, 0x65, 0x48, 0x00, 0x52, 0x07,
	0x62, 0x74, 0x6e, 0x4d, 0x6f, 0x72, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x62,
	0x74, 0x6e, 0x5f, 0x6d, 0x6f, 0x72, 0x65, 0x22, 0x3d, 0x0a, 0x0c, 0x46, 0x65, 0x65, 0x64, 0x50,
	0x6f, 0x73, 0x74, 0x65, 0x72, 0x58, 0x32, 0x12, 0x2d, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x74, 0x65,
	0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x51,
	0x51, 0x54, 0x56, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x74,
	0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x42, 0x0a, 0x11, 0x46, 0x65, 0x65, 0x64, 0x54, 0x6f,
	0x70, 0x69, 0x63, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x58, 0x32, 0x12, 0x2d, 0x0a, 0x0b, 0x70,
	0x6f, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x51, 0x51, 0x54, 0x56, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x52, 0x0a,
	0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x41, 0x0a, 0x10, 0x46, 0x65,
	0x65, 0x64, 0x46, 0x6f, 0x63, 0x75, 0x73, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x2d,
	0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x51, 0x51, 0x54, 0x56, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x65,
	0x72, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x40, 0x0a,
	0x0f, 0x46, 0x65, 0x65, 0x64, 0x4c, 0x6f, 0x6f, 0x70, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x73,
	0x12, 0x2d, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x51, 0x51, 0x54, 0x56, 0x2e, 0x50, 0x6f, 0x73,
	0x74, 0x65, 0x72, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x22,
	0x72, 0x0a, 0x0d, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x57, 0x69, 0x74, 0x68, 0x42, 0x61, 0x72,
	0x12, 0x29, 0x0a, 0x06, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x51, 0x51, 0x54, 0x56, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x48, 0x00,
	0x52, 0x06, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x03, 0x62,
	0x61, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x51, 0x51, 0x54, 0x56, 0x2e,
	0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x48, 0x01, 0x52, 0x03, 0x62, 0x61, 0x72, 0x88, 0x01, 0x01,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x42, 0x06, 0x0a, 0x04, 0x5f,
	0x62, 0x61, 0x72, 0x22, 0x90, 0x04, 0x0a, 0x13, 0x46, 0x65, 0x65, 0x64, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x42, 0x69, 0x67, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x06, 0x70,
	0x6f, 0x73, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x51, 0x51,
	0x54, 0x56, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x06, 0x70, 0x6f, 0x73,
	0x74, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x0e, 0x74, 0x61, 0x67, 0x5f, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x51, 0x51, 0x54, 0x56, 0x2e, 0x54, 0x61, 0x67, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x0c,
	0x74, 0x61, 0x67, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x0b,
	0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x51, 0x51, 0x54, 0x56, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x52,
	0x0a, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x51, 0x51, 0x54, 0x56,
	0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x48, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x0f,
	0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x51, 0x51, 0x54, 0x56, 0x2e, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x02, 0x52, 0x0e, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x0b, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x51, 0x51, 0x54, 0x56, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x48,
	0x03, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01,
	0x12, 0x39, 0x0a, 0x0f, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x51, 0x51, 0x54, 0x56,
	0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x04, 0x52, 0x0d, 0x76, 0x69, 0x65, 0x77, 0x41,
	0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x65,
	0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x05, 0x52, 0x0d, 0x65, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x70, 0x6f, 0x73, 0x74,
	0x65, 0x72, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f,
	0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x42,
	0x12, 0x0a, 0x10, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x65, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x89, 0x02, 0x0a, 0x13, 0x46, 0x65, 0x65, 0x64, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x56, 0x69, 0x70, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x20,
	0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x88, 0x01, 0x01,
	0x12, 0x1e, 0x0a, 0x08, 0x6a, 0x75, 0x6d, 0x70, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x01, 0x52, 0x07, 0x6a, 0x75, 0x6d, 0x70, 0x55, 0x72, 0x6c, 0x88, 0x01, 0x01,
	0x12, 0x19, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x02, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x62,
	0x75, 0x74, 0x74, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0d, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x0b, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x51,
	0x51, 0x54, 0x56, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0a,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6a, 0x75, 0x6d,
	0x70, 0x5f, 0x75, 0x72, 0x6c, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x42,
	0x11, 0x0a, 0x0f, 0x5f, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x22, 0xa8, 0x01, 0x0a, 0x16, 0x46, 0x65, 0x65, 0x64, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x20, 0x0a,
	0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12,
	0x1e, 0x0a, 0x08, 0x6a, 0x75, 0x6d, 0x70, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x01, 0x52, 0x07, 0x6a, 0x75, 0x6d, 0x70, 0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12,
	0x31, 0x0a, 0x0b, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x51, 0x51, 0x54, 0x56, 0x2e, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6a, 0x75, 0x6d, 0x70, 0x5f, 0x75, 0x72, 0x6c, 0x22, 0x7e, 0x0a,
	0x10, 0x46, 0x65, 0x65, 0x64, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x6f, 0x73, 0x74, 0x65,
	0x72, 0x12, 0x29, 0x0a, 0x06, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x51, 0x51, 0x54, 0x56, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x48,
	0x00, 0x52, 0x06, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x0e,
	0x74, 0x61, 0x67, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x51, 0x51, 0x54, 0x56, 0x2e, 0x54, 0x61, 0x67, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x52, 0x0c, 0x74, 0x61, 0x67, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4c, 0x69,
	0x73, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x22, 0xdd, 0x01,
	0x0a, 0x0f, 0x46, 0x65, 0x65, 0x64, 0x4e, 0x6f, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x48, 0x69,
	0x74, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52,
	0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x06, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x51, 0x51,
	0x54, 0x56, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x02, 0x52, 0x06, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x51, 0x51, 0x54,
	0x56, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x48, 0x03, 0x52, 0x0a,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x64, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x64, 0x61, 0x74, 0x61, 0x22, 0xde, 0x01,
	0x0a, 0x14, 0x46, 0x65, 0x65, 0x64, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x68, 0x6f, 0x72,
	0x74, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x12, 0x29, 0x0a, 0x06, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x51, 0x51, 0x54, 0x56, 0x2e, 0x50, 0x6f,
	0x73, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x06, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x88, 0x01,
	0x01, 0x12, 0x39, 0x0a, 0x0c, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x51, 0x51, 0x54, 0x56, 0x2e, 0x56,
	0x69, 0x64, 0x65, 0x6f, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x01, 0x52, 0x0b, 0x76, 0x69,
	0x64, 0x65, 0x6f, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x0a,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x51, 0x51, 0x54, 0x56, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x48, 0x02, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x64, 0x61, 0x74, 0x61,
	0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x64, 0x61, 0x74, 0x61, 0x22, 0x7a,
	0x0a, 0x0c, 0x46, 0x65, 0x65, 0x64, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x58, 0x33, 0x12, 0x24,
	0x0a, 0x06, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x51, 0x51, 0x54, 0x56, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x52, 0x06, 0x70, 0x6f,
	0x73, 0x74, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x51, 0x51, 0x54, 0x56, 0x2e,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0a, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x64, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x64, 0x61, 0x74, 0x61, 0x22, 0x4e, 0x0a, 0x16, 0x46, 0x65,
	0x65, 0x64, 0x4c, 0x6f, 0x6f, 0x70, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x73, 0x57, 0x69, 0x74,
	0x68, 0x42, 0x61, 0x72, 0x12, 0x34, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x51, 0x51, 0x54, 0x56,
	0x2e, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x57, 0x69, 0x74, 0x68, 0x42, 0x61, 0x72, 0x52, 0x0a,
	0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x86, 0x01, 0x0a, 0x16, 0x46,
	0x65, 0x65, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x72, 0x61, 0x69, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x65,
	0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x51, 0x51, 0x54,
	0x56, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x08, 0x62, 0x74, 0x6e, 0x5f, 0x6d, 0x6f, 0x72, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x51, 0x51, 0x54, 0x56, 0x2e, 0x42, 0x75,
	0x74, 0x74, 0x6f, 0x6e, 0x4d, 0x6f, 0x72, 0x65, 0x48, 0x00, 0x52, 0x07, 0x62, 0x74, 0x6e, 0x4d,
	0x6f, 0x72, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x62, 0x74, 0x6e, 0x5f, 0x6d,
	0x6f, 0x72, 0x65, 0x22, 0x8f, 0x01, 0x0a, 0x12, 0x46, 0x65, 0x65, 0x64, 0x52, 0x61, 0x6e, 0x6b,
	0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x10, 0x72, 0x61,
	0x6e, 0x6b, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x51, 0x51, 0x54, 0x56, 0x2e, 0x52, 0x61, 0x6e, 0x6b,
	0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x52, 0x0e, 0x72, 0x61, 0x6e, 0x6b, 0x50, 0x6f, 0x73, 0x74,
	0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x08, 0x62, 0x74, 0x6e, 0x5f, 0x6d, 0x6f,
	0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x51, 0x51, 0x54, 0x56, 0x2e,
	0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x4d, 0x6f, 0x72, 0x65, 0x48, 0x00, 0x52, 0x07, 0x62, 0x74,
	0x6e, 0x4d, 0x6f, 0x72, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x62, 0x74, 0x6e,
	0x5f, 0x6d, 0x6f, 0x72, 0x65, 0x22, 0xb7, 0x02, 0x0a, 0x0c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x06, 0x62, 0x67, 0x5f, 0x69, 0x6d, 0x67,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x62, 0x67, 0x49, 0x6d, 0x67, 0x88,
	0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x01, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a,
	0x08, 0x73, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x02, 0x52, 0x08, 0x73, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x29,
	0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x51, 0x51, 0x54, 0x56, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x03, 0x52, 0x06,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x0a, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x51, 0x51, 0x54, 0x56, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x48,
	0x04, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x64, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01,
	0x12, 0x22, 0x0a, 0x0a, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x6d, 0x67, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x09, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x49, 0x6d,
	0x67, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x62, 0x67, 0x5f, 0x69, 0x6d, 0x67, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x73, 0x75,
	0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x64, 0x61, 0x74, 0x61,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x6d, 0x67, 0x22,
	0x58, 0x0a, 0x14, 0x46, 0x65, 0x65, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x74,
	0x74, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x12, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x51, 0x51, 0x54, 0x56, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x52, 0x10, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x75, 0x74, 0x74, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x68, 0x0a, 0x0e, 0x46, 0x65, 0x65,
	0x64, 0x4d, 0x6f, 0x72, 0x65, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x04, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x74, 0x65, 0x78,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x51, 0x51, 0x54, 0x56, 0x2e, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x01, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42,
	0x07, 0x0a, 0x05, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0xab, 0x01, 0x0a, 0x0c, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x42, 0x61,
	0x6e, 0x6e, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x06, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x51, 0x51, 0x54, 0x56, 0x2e, 0x50, 0x6f, 0x73, 0x74,
	0x65, 0x72, 0x48, 0x00, 0x52, 0x06, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12,
	0x19, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,
	0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x09, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x51, 0x51, 0x54, 0x56, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x48, 0x02,
	0x52, 0x09, 0x73, 0x68, 0x61, 0x72, 0x65, 0x69, 0x74, 0x65, 0x6d, 0x88, 0x01, 0x01, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x69, 0x74, 0x65,
	0x6d, 0x22, 0xe7, 0x03, 0x0a, 0x11, 0x46, 0x65, 0x65, 0x64, 0x54, 0x72, 0x61, 0x69, 0x6c, 0x65,
	0x72, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x06, 0x70, 0x6f, 0x73, 0x74, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x51, 0x51, 0x54, 0x56, 0x2e, 0x50,
	0x6f, 0x73, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x06, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x88,
	0x01, 0x01, 0x12, 0x37, 0x0a, 0x0a, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x51, 0x51, 0x54, 0x56, 0x2e, 0x56, 0x69,
	0x64, 0x65, 0x6f, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x48, 0x01, 0x52, 0x09, 0x76,
	0x69, 0x64, 0x65, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x18, 0x69,
	0x6e, 0x73, 0x65, 0x72, 0x74, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52,
	0x14, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x4e, 0x65, 0x77, 0x4c, 0x69, 0x6e, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x4b, 0x65, 0x79, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x09, 0x76, 0x69, 0x64, 0x65,
	0x6f, 0x5f, 0x62, 0x61, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x51, 0x51,
	0x54, 0x56, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x48,
	0x03, 0x52, 0x08, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x42, 0x61, 0x72, 0x88, 0x01, 0x01, 0x12, 0x2d,
	0x0a, 0x10, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x48, 0x04, 0x52, 0x0e, 0x73, 0x6c, 0x69, 0x63,
	0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a,
	0x0e, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x48, 0x05, 0x52, 0x0c, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x45, 0x6e,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x05, 0x77, 0x61, 0x74, 0x63,
	0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x51, 0x51, 0x54, 0x56, 0x2e, 0x57,
	0x61, 0x74, 0x63, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x06, 0x52, 0x05, 0x77, 0x61, 0x74, 0x63,
	0x68, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x42, 0x1b,
	0x0a, 0x19, 0x5f, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x6c, 0x69,
	0x6e, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6b, 0x65, 0x79, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x62, 0x61, 0x72, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x73, 0x6c,
	0x69, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x11,
	0x0a, 0x0f, 0x5f, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x22, 0x4f, 0x0a, 0x14, 0x53,
	0x68, 0x6f, 0x72, 0x74, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x51, 0x51, 0x54, 0x56, 0x2e,
	0x53, 0x68, 0x6f, 0x72, 0x74, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72,
	0x52, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xea, 0x01, 0x0a,
	0x11, 0x46, 0x65, 0x65, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x49, 0x74,
	0x65, 0x6d, 0x12, 0x15, 0x0a, 0x03, 0x63, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x03, 0x63, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x06, 0x70, 0x6f, 0x73,
	0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x51, 0x51, 0x54, 0x56,
	0x2e, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x48, 0x01, 0x52, 0x06, 0x70, 0x6f, 0x73, 0x74, 0x65,
	0x72, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x13, 0x6c, 0x61, 0x6e, 0x64, 0x5f, 0x70, 0x6f, 0x73,
	0x74, 0x65, 0x72, 0x5f, 0x69, 0x6d, 0x67, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x02, 0x52, 0x10, 0x6c, 0x61, 0x6e, 0x64, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x6d, 0x67, 0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x0e, 0x74, 0x61, 0x67, 0x5f,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x51, 0x51, 0x54, 0x56, 0x2e, 0x54, 0x61, 0x67, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x52, 0x0c, 0x74, 0x61, 0x67, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x06,
	0x0a, 0x04, 0x5f, 0x63, 0x69, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x65,
	0x72, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x6c, 0x61, 0x6e, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x65,
	0x72, 0x5f, 0x69, 0x6d, 0x67, 0x5f, 0x75, 0x72, 0x6c, 0x22, 0xe8, 0x02, 0x0a, 0x1c, 0x46, 0x65,
	0x65, 0x64, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x56, 0x69, 0x65, 0x64, 0x65, 0x6f, 0x52, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x15, 0x0a, 0x03, 0x63, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x03, 0x63, 0x69, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x29, 0x0a, 0x06, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x51, 0x51, 0x54, 0x56, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x48,
	0x01, 0x52, 0x06, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x07,
	0x63, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x51, 0x51, 0x54, 0x56, 0x2e, 0x43, 0x50, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x02, 0x52, 0x06, 0x63,
	0x70, 0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x0a, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x51,
	0x51, 0x54, 0x56, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x48, 0x03, 0x52,
	0x09, 0x73, 0x68, 0x61, 0x72, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a,
	0x0c, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x51, 0x51, 0x54, 0x56, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x04, 0x52, 0x0b, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x07, 0x64, 0x61,
	0x74, 0x61, 0x4b, 0x65, 0x79, 0x88, 0x01, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x63, 0x69, 0x64,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x63, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f,
	0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x6b, 0x65, 0x79, 0x22, 0x84, 0x01, 0x0a, 0x0d, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x43, 0x50, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x29, 0x0a, 0x06, 0x63, 0x70, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x51, 0x51, 0x54, 0x56, 0x2e, 0x43, 0x50,
	0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x06, 0x63, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x88, 0x01,
	0x01, 0x12, 0x33, 0x0a, 0x05, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x18, 0x2e, 0x51, 0x51, 0x54, 0x56, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x43,
	0x50, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x48, 0x01, 0x52, 0x05, 0x73, 0x63,
	0x65, 0x6e, 0x65, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x70, 0x69, 0x6e, 0x66,
	0x6f, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x22, 0x96, 0x03, 0x0a, 0x0f,
	0x46, 0x65, 0x65, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x19, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x07, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x08, 0x73, 0x75, 0x62,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x51, 0x51,
	0x54, 0x56, 0x2e, 0x53, 0x75, 0x62, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x02, 0x52, 0x07, 0x73, 0x75,
	0x62, 0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x0a, 0x6d, 0x61, 0x72, 0x6b,
	0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x51,
	0x51, 0x54, 0x56, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x48, 0x03, 0x52,
	0x09, 0x6d, 0x61, 0x72, 0x6b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a,
	0x0b, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x51, 0x51, 0x54, 0x56, 0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x4c,
	0x69, 0x73, 0x74, 0x48, 0x04, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x4c, 0x69, 0x73,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x0e, 0x74, 0x61, 0x67, 0x5f, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x51,
	0x51, 0x54, 0x56, 0x2e, 0x54, 0x61, 0x67, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x0c, 0x74, 0x61,
	0x67, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x0c, 0x74, 0x72,
	0x61, 0x69, 0x6c, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x51, 0x51, 0x54, 0x56, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x49, 0x74, 0x65,
	0x6d, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x65, 0x72, 0x4c, 0x69,
	0x73, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x42, 0x0a, 0x0a, 0x08,
	0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x73, 0x75, 0x62,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x22, 0xb6, 0x02, 0x0a, 0x16, 0x46, 0x65, 0x65, 0x64, 0x50, 0x6c, 0x61,
	0x79, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x12,
	0x3d, 0x0a, 0x0c, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x51, 0x51, 0x54, 0x56, 0x2e, 0x46, 0x65, 0x65,
	0x64, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x0b,
	0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x32,
	0x0a, 0x0a, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x51, 0x51, 0x54, 0x56, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x49,
	0x74, 0x65, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x52, 0x09, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x30, 0x0a, 0x11, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52,
	0x10, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x53, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x0e, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x51,
	0x51, 0x54, 0x56, 0x2e, 0x4e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x48, 0x02, 0x52, 0x0c, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6e,
	0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0xb4, 0x02,
	0x0a, 0x14, 0x46, 0x65, 0x65, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65,
	0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x12, 0x3d, 0x0a, 0x0c, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72,
	0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x51,
	0x51, 0x54, 0x56, 0x2e, 0x46, 0x65, 0x65, 0x64, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x54, 0x69,
	0x74, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x54, 0x69, 0x74,
	0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x0a, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x51, 0x51, 0x54, 0x56,
	0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x52, 0x09,
	0x76, 0x69, 0x64, 0x65, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x11, 0x61, 0x73, 0x73,
	0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x10, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74,
	0x65, 0x64, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x0e, 0x6e,
	0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x51, 0x51, 0x54, 0x56, 0x2e, 0x4e, 0x65, 0x78, 0x74, 0x50,
	0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x02, 0x52, 0x0c, 0x6e, 0x65, 0x78, 0x74, 0x50,
	0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x70,
	0x6f, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f,
	0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x22, 0x47, 0x0a, 0x12, 0x46, 0x65, 0x65, 0x64, 0x50, 0x6c, 0x61, 0x79,
	0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x0b, 0x73, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x51, 0x51, 0x54, 0x56, 0x2e, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0a, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x78, 0x0a,
	0x16, 0x54, 0x6f, 0x6f, 0x6c, 0x62, 0x61, 0x72, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x24, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x72, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0a,
	0x69, 0x73, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a,
	0x07, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01,
	0x52, 0x06, 0x69, 0x73, 0x53, 0x68, 0x6f, 0x77, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x69, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x69, 0x73, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x22, 0xbd, 0x04, 0x0a, 0x12, 0x46, 0x65, 0x65, 0x64,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x54, 0x6f, 0x6f, 0x6c, 0x62, 0x61, 0x72, 0x12, 0x33,
	0x0a, 0x0a, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x51, 0x51, 0x54, 0x56, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x49,
	0x74, 0x65, 0x6d, 0x48, 0x00, 0x52, 0x09, 0x73, 0x68, 0x61, 0x72, 0x65, 0x49, 0x74, 0x65, 0x6d,
	0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x0a, 0x77, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x51, 0x51, 0x54, 0x56, 0x2e, 0x57,
	0x61, 0x74, 0x63, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x01, 0x52, 0x09, 0x77, 0x61, 0x74, 0x63,
	0x68, 0x4c, 0x69, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x0d, 0x64, 0x6f, 0x77, 0x6e,
	0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x51, 0x51, 0x54, 0x56, 0x2e, 0x54, 0x6f, 0x6f, 0x6c, 0x62, 0x61, 0x72, 0x49, 0x74,
	0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x02, 0x52, 0x0c, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f,
	0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x09, 0x6c, 0x69, 0x6b,
	0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x51,
	0x51, 0x54, 0x56, 0x2e, 0x4c, 0x69, 0x6b, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x03, 0x52, 0x08,
	0x6c, 0x69, 0x6b, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x0b, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x51, 0x51, 0x54, 0x56, 0x2e, 0x54, 0x6f, 0x6f, 0x6c, 0x62, 0x61, 0x72, 0x49,
	0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x04, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x4c, 0x0a, 0x10, 0x72, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x51, 0x51, 0x54, 0x56, 0x2e, 0x54, 0x6f, 0x6f, 0x6c, 0x62, 0x61,
	0x72, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x48, 0x05, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x11, 0x74, 0x6f, 0x6f, 0x6c, 0x62, 0x61,
	0x72, 0x5f, 0x67, 0x69, 0x66, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x51, 0x51, 0x54, 0x56, 0x2e, 0x54, 0x6f, 0x6f, 0x6c, 0x62, 0x61, 0x72,
	0x47, 0x69, 0x66, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x06, 0x52, 0x0f, 0x74, 0x6f, 0x6f, 0x6c,
	0x62, 0x61, 0x72, 0x47, 0x69, 0x66, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x42, 0x10, 0x0a, 0x0e,
	0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x6c, 0x69, 0x6b, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x42, 0x13, 0x0a, 0x11,
	0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x74, 0x6f, 0x6f, 0x6c, 0x62, 0x61, 0x72, 0x5f, 0x67, 0x69,
	0x66, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0xc1, 0x04, 0x0a, 0x16, 0x46, 0x65, 0x65, 0x64,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x4c, 0x65, 0x66, 0x74, 0x54, 0x6f, 0x6f, 0x6c, 0x62,
	0x61, 0x72, 0x12, 0x33, 0x0a, 0x0a, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x51, 0x51, 0x54, 0x56, 0x2e, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x48, 0x00, 0x52, 0x09, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x49, 0x74, 0x65, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x0a, 0x77, 0x61, 0x74, 0x63, 0x68,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x51, 0x51,
	0x54, 0x56, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x01, 0x52, 0x09,
	0x77, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x0d,
	0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x51, 0x51, 0x54, 0x56, 0x2e, 0x54, 0x6f, 0x6f, 0x6c, 0x62,
	0x61, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x02, 0x52, 0x0c, 0x64, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a,
	0x09, 0x6c, 0x69, 0x6b, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x51, 0x51, 0x54, 0x56, 0x2e, 0x4c, 0x69, 0x6b, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x48, 0x03, 0x52, 0x08, 0x6c, 0x69, 0x6b, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01, 0x12,
	0x3b, 0x0a, 0x0b, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x51, 0x51, 0x54, 0x56, 0x2e, 0x54, 0x6f, 0x6f, 0x6c,
	0x62, 0x61, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x04, 0x52, 0x0a, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x4c, 0x0a, 0x10,
	0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x51, 0x51, 0x54, 0x56, 0x2e, 0x54, 0x6f,
	0x6f, 0x6c, 0x62, 0x61, 0x72, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x48, 0x05, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x11, 0x74, 0x6f,
	0x6f, 0x6c, 0x62, 0x61, 0x72, 0x5f, 0x67, 0x69, 0x66, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x51, 0x51, 0x54, 0x56, 0x2e, 0x54, 0x6f, 0x6f,
	0x6c, 0x62, 0x61, 0x72, 0x47, 0x69, 0x66, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x06, 0x52, 0x0f,
	0x74, 0x6f, 0x6f, 0x6c, 0x62, 0x61, 0x72, 0x47, 0x69, 0x66, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x88,
	0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x69, 0x74, 0x65,
	0x6d, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6c, 0x69, 0x6b, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x42, 0x13, 0x0a, 0x11, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x74, 0x6f, 0x6f, 0x6c, 0x62, 0x61,
	0x72, 0x5f, 0x67, 0x69, 0x66, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0xfd, 0x02, 0x0a, 0x0f,
	0x54, 0x6f, 0x6f, 0x6c, 0x62, 0x61, 0x72, 0x47, 0x69, 0x66, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x1c, 0x0a, 0x07, 0x70, 0x69, 0x63, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x06, 0x70, 0x69, 0x63, 0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a,
	0x07, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01,
	0x52, 0x06, 0x69, 0x73, 0x53, 0x68, 0x6f, 0x77, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x0e, 0x73,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x51, 0x51, 0x54, 0x56, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x02, 0x52, 0x0d, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x11, 0x67, 0x75, 0x69, 0x64, 0x65, 0x5f, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x03, 0x52, 0x10, 0x67, 0x75, 0x69, 0x64, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x62, 0x75, 0x74, 0x74, 0x6f,
	0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x04, 0x52, 0x0d, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x0b, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x51, 0x51, 0x54, 0x56, 0x2e,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x05, 0x52, 0x0a, 0x73, 0x65, 0x6e, 0x64, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x70, 0x69, 0x63, 0x5f,
	0x75, 0x72, 0x6c, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x42,
	0x11, 0x0a, 0x0f, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x65, 0x5f, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x62, 0x75, 0x74,
	0x74, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x73, 0x65, 0x6e, 0x64, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xe9, 0x05, 0x0a, 0x0f,
	0x46, 0x65, 0x65, 0x64, 0x56, 0x49, 0x50, 0x50, 0x72, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x12,
	0x19, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x75, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x06, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x51, 0x51,
	0x54, 0x56, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x02, 0x52, 0x06, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x51, 0x51, 0x54,
	0x56, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x48, 0x03, 0x52, 0x0a,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x64, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x51, 0x51,
	0x54, 0x56, 0x2e, 0x56, 0x49, 0x50, 0x50, 0x72, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x48, 0x04, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a,
	0x0b, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x05, 0x52, 0x0a, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72,
	0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x08, 0x73, 0x75, 0x62, 0x54, 0x69, 0x74,
	0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07,
	0x52, 0x0d, 0x73, 0x75, 0x62, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x88,
	0x01, 0x01, 0x12, 0x25, 0x0a, 0x0c, 0x76, 0x69, 0x70, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x70,
	0x69, 0x63, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x0a, 0x76, 0x69, 0x70, 0x43,
	0x61, 0x72, 0x64, 0x50, 0x69, 0x63, 0x88, 0x01, 0x01, 0x12, 0x40, 0x0a, 0x0f, 0x76, 0x69, 0x70,
	0x5f, 0x74, 0x69, 0x70, 0x73, 0x5f, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x51, 0x51, 0x54, 0x56, 0x2e, 0x56, 0x69, 0x70, 0x54, 0x69, 0x70,
	0x73, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x48, 0x09, 0x52, 0x0d, 0x76, 0x69, 0x70, 0x54, 0x69,
	0x70, 0x73, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x43, 0x0a, 0x0a, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x51, 0x51, 0x54, 0x56, 0x2e, 0x46, 0x65, 0x65, 0x64, 0x56, 0x49, 0x50, 0x50, 0x72,
	0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x44, 0x61, 0x74, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x65, 0x78, 0x74, 0x72, 0x61, 0x44, 0x61, 0x74, 0x61,
	0x1a, 0x54, 0x0a, 0x0e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x15, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x88, 0x01, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6b, 0x65, 0x79, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x75, 0x72, 0x6c, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x64, 0x61, 0x74, 0x61, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x42, 0x12,
	0x0a, 0x10, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x76, 0x69, 0x70, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f,
	0x70, 0x69, 0x63, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x76, 0x69, 0x70, 0x5f, 0x74, 0x69, 0x70, 0x73,
	0x5f, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x22, 0xdf, 0x01, 0x0a, 0x0d, 0x56, 0x69, 0x70, 0x54,
	0x69, 0x70, 0x73, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x63, 0x6f,
	0x6c, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0a, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x62, 0x61,
	0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x02, 0x52, 0x0d, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x51, 0x51, 0x54, 0x56, 0x2e, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x03, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01,
	0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x42, 0x11, 0x0a, 0x0f, 0x5f,
	0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x75, 0x72, 0x6c, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xdd, 0x01, 0x0a, 0x0c, 0x46, 0x65,
	0x65, 0x64, 0x50, 0x72, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x75, 0x72,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x75, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x51, 0x51, 0x54, 0x56, 0x2e, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x02, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01,
	0x01, 0x12, 0x35, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x51, 0x51, 0x54, 0x56, 0x2e, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x48, 0x03, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x64, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x75, 0x72, 0x6c, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x64, 0x61, 0x74, 0x61, 0x22, 0x84, 0x02, 0x0a, 0x0c, 0x46, 0x65,
	0x65, 0x64, 0x41, 0x64, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x08, 0x61, 0x64,
	0x75, 0x6e, 0x69, 0x74, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08,
	0x61, 0x64, 0x75, 0x6e, 0x69, 0x74, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x74,
	0x72, 0x61, 0x64, 0x70, 0x6c, 0x75, 0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x01, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x70, 0x6c, 0x75, 0x73, 0x69, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x35, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x51, 0x51, 0x54, 0x56, 0x2e, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x48, 0x02, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x64, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x0c, 0x66, 0x65, 0x65, 0x64, 0x70,
	0x72, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x51, 0x51, 0x54, 0x56, 0x2e, 0x46, 0x65, 0x65, 0x64, 0x50, 0x72, 0x42, 0x61, 0x6e, 0x6e, 0x65,
	0x72, 0x48, 0x03, 0x52, 0x0c, 0x66, 0x65, 0x65, 0x64, 0x70, 0x72, 0x62, 0x61, 0x6e, 0x6e, 0x65,
	0x72, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x61, 0x64, 0x75, 0x6e, 0x69, 0x74, 0x69,
	0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x70, 0x6c, 0x75, 0x73, 0x69, 0x64,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x64, 0x61, 0x74, 0x61, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x66, 0x65, 0x65, 0x64, 0x70, 0x72, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72,
	0x22, 0xd9, 0x01, 0x0a, 0x0d, 0x46, 0x65, 0x65, 0x64, 0x4c, 0x69, 0x76, 0x65, 0x54, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a,
	0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,
	0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x0a,
	0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x51, 0x51, 0x54, 0x56, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x48, 0x02, 0x52, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x88, 0x01,
	0x01, 0x12, 0x34, 0x0a, 0x0e, 0x74, 0x61, 0x67, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x51, 0x51, 0x54, 0x56,
	0x2e, 0x54, 0x61, 0x67, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x0c, 0x74, 0x61, 0x67, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x22, 0x98, 0x01, 0x0a,
	0x0e, 0x46, 0x65, 0x65, 0x64, 0x4c, 0x69, 0x76, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x2d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e,
	0x51, 0x51, 0x54, 0x56, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19,
	0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x07, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x34, 0x0a, 0x0d, 0x46, 0x65, 0x65, 0x64, 0x4c,
	0x69, 0x76, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x37, 0x0a,
	0x10, 0x46, 0x65, 0x65, 0x64, 0x4c, 0x69, 0x76, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73,
	0x65, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0xd0, 0x03, 0x0a, 0x19, 0x46, 0x65, 0x65, 0x64, 0x48,
	0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x06, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x51, 0x51, 0x54, 0x56, 0x2e, 0x50, 0x6f, 0x73, 0x74,
	0x65, 0x72, 0x48, 0x00, 0x52, 0x06, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12,
	0x2e, 0x0a, 0x05, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x51, 0x51, 0x54, 0x56, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x49, 0x74, 0x65, 0x6d, 0x44,
	0x61, 0x74, 0x61, 0x48, 0x01, 0x52, 0x05, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x88, 0x01, 0x01, 0x12,
	0x30, 0x0a, 0x09, 0x6c, 0x69, 0x6b, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x51, 0x51, 0x54, 0x56, 0x2e, 0x4c, 0x69, 0x6b, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x48, 0x02, 0x52, 0x08, 0x6c, 0x69, 0x6b, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01,
	0x01, 0x12, 0x2a, 0x0a, 0x07, 0x63, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x51, 0x51, 0x54, 0x56, 0x2e, 0x43, 0x50, 0x49, 0x6e, 0x66, 0x6f,
	0x48, 0x03, 0x52, 0x06, 0x63, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a,
	0x05, 0x77, 0x61, 0x74, 0x63, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x51,
	0x51, 0x54, 0x56, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x04, 0x52,
	0x05, 0x77, 0x61, 0x74, 0x63, 0x68, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x48, 0x05, 0x52, 0x08, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x6c,
	0x61, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x48, 0x06,
	0x52, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x24,
	0x0a, 0x0b, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x0a, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6c, 0x69,
	0x6b, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x70, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70,
	0x6c, 0x61, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x75, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xce, 0x03, 0x0a, 0x17, 0x46, 0x65,
	0x65, 0x64, 0x56, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x06, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x51, 0x51, 0x54, 0x56, 0x2e, 0x50, 0x6f, 0x73,
	0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x06, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x88, 0x01, 0x01,
	0x12, 0x2e, 0x0a, 0x05, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x51, 0x51, 0x54, 0x56, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x49, 0x74, 0x65, 0x6d,
	0x44, 0x61, 0x74, 0x61, 0x48, 0x01, 0x52, 0x05, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x88, 0x01, 0x01,
	0x12, 0x30, 0x0a, 0x09, 0x6c, 0x69, 0x6b, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x51, 0x51, 0x54, 0x56, 0x2e, 0x4c, 0x69, 0x6b, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x48, 0x02, 0x52, 0x08, 0x6c, 0x69, 0x6b, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x88,
	0x01, 0x01, 0x12, 0x2a, 0x0a, 0x07, 0x63, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x51, 0x51, 0x54, 0x56, 0x2e, 0x43, 0x50, 0x49, 0x6e, 0x66,
	0x6f, 0x48, 0x03, 0x52, 0x06, 0x63, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x2a,
	0x0a, 0x05, 0x77, 0x61, 0x74, 0x63, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x51, 0x51, 0x54, 0x56, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x04,
	0x52, 0x05, 0x77, 0x61, 0x74, 0x63, 0x68, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x48, 0x05, 0x52, 0x08,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x70,
	0x6c, 0x61, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x06, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x24, 0x0a, 0x0b, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x0a, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72,
	0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6c,
	0x69, 0x6b, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x70, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x70, 0x6c, 0x61, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x75,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x47, 0x0a, 0x11, 0x46, 0x65,
	0x65, 0x64, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x78, 0x74, 0x12,
	0x32, 0x0a, 0x0a, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x51, 0x51, 0x54, 0x56, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f,
	0x49, 0x74, 0x65, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x52, 0x09, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x4c,
	0x69, 0x73, 0x74, 0x22, 0x4c, 0x0a, 0x13, 0x46, 0x65, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x25, 0x0a, 0x0b, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x00, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x88, 0x01,
	0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x22, 0xa8, 0x01, 0x0a, 0x11, 0x46, 0x65, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e,
	0x75, 0x65, 0x57, 0x61, 0x74, 0x63, 0x68, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x29, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x51, 0x51, 0x54, 0x56, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x01, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a,
	0x06, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x51, 0x51, 0x54, 0x56, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x48,
	0x02, 0x52, 0x06, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x40, 0x0a, 0x0e,
	0x46, 0x65, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x53, 0x6f, 0x6f, 0x6e, 0x12, 0x2e,
	0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x51, 0x51, 0x54, 0x56, 0x2e, 0x46, 0x65, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x53,
	0x6f, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xdd,
	0x03, 0x0a, 0x12, 0x46, 0x65, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x53, 0x6f, 0x6f,
	0x6e, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x29, 0x0a, 0x06, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x51, 0x51, 0x54, 0x56, 0x2e, 0x50, 0x6f, 0x73,
	0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x06, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x88, 0x01, 0x01,
	0x12, 0x24, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x0a, 0x69, 0x73, 0x52, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02,
	0x52, 0x0d, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0b, 0x72, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x25, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e,
	0x51, 0x51, 0x54, 0x56, 0x2e, 0x49, 0x64, 0x54, 0x79, 0x70, 0x65, 0x48, 0x05, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x48, 0x06, 0x52, 0x0a, 0x6c,
	0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08,
	0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07,
	0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b,
	0x77, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x03, 0x48, 0x08, 0x52, 0x0a, 0x77, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88,
	0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x42, 0x11, 0x0a,
	0x0f, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xd2,
	0x03, 0x0a, 0x19, 0x46, 0x65, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x73, 0x6f, 0x6f,
	0x6e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x05,
	0x76, 0x69, 0x64, 0x65, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x51, 0x51,
	0x54, 0x56, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x61, 0x74, 0x61,
	0x48, 0x00, 0x52, 0x05, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x06,
	0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x51,
	0x51, 0x54, 0x56, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x48, 0x01, 0x52, 0x06, 0x70, 0x6f,
	0x73, 0x74, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x72, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x02, 0x52, 0x0a,
	0x69, 0x73, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a,
	0x0e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x03, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x72, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x04, 0x52, 0x0b, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x24, 0x0a, 0x0b, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x48, 0x05, 0x52, 0x0a, 0x6c, 0x69, 0x76, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x07, 0x65, 0x6e, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x77, 0x61, 0x74, 0x63, 0x68,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x48, 0x07, 0x52, 0x0a,
	0x77, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x70, 0x6f, 0x73, 0x74,
	0x65, 0x72, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0x4b, 0x0a, 0x18, 0x46, 0x65, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x69, 0x6e,
	0x67, 0x73, 0x6f, 0x6f, 0x6e, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x21, 0x0a, 0x09, 0x6c, 0x61, 0x75, 0x63, 0x68, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x6c, 0x61, 0x75, 0x63, 0x68, 0x74, 0x69, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6c, 0x61, 0x75, 0x63, 0x68, 0x74, 0x69, 0x6d, 0x65,
	0x22, 0x36, 0x0a, 0x06, 0x46, 0x65, 0x65, 0x64, 0x41, 0x64, 0x12, 0x1f, 0x0a, 0x08, 0x61, 0x64,
	0x75, 0x6e, 0x69, 0x74, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08,
	0x61, 0x64, 0x75, 0x6e, 0x69, 0x74, 0x69, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x61, 0x64, 0x75, 0x6e, 0x69, 0x74, 0x69, 0x64, 0x22, 0x96, 0x04, 0x0a, 0x0c, 0x46, 0x65, 0x65,
	0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x04, 0x76, 0x75, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x76, 0x75, 0x69, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x01, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x88, 0x01, 0x01, 0x12,
	0x17, 0x0a, 0x04, 0x6e, 0x69, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52,
	0x04, 0x6e, 0x69, 0x63, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x76, 0x69, 0x70, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x03, 0x52, 0x03, 0x76, 0x69, 0x70, 0x88, 0x01, 0x01, 0x12,
	0x2a, 0x0a, 0x0e, 0x76, 0x69, 0x70, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x48, 0x04, 0x52, 0x0d, 0x76, 0x69, 0x70, 0x45, 0x78,
	0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x04, 0x74, 0x65, 0x78,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x5f, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x0a, 0x62, 0x75, 0x74,
	0x74, 0x6f, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x62, 0x75,
	0x74, 0x74, 0x6f, 0x6e, 0x5f, 0x61, 0x63, 0x74, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x07, 0x52, 0x0b, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x6f, 0x6e, 0x88,
	0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x5f, 0x69, 0x6d, 0x67,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x09, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e,
	0x49, 0x6d, 0x67, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x63,
	0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x09, 0x74, 0x65,
	0x78, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x62, 0x75,
	0x74, 0x74, 0x6f, 0x6e, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x0f, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x54,
	0x65, 0x78, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f,
	0x76, 0x75, 0x69, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x42,
	0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x69, 0x63, 0x6b, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x76, 0x69, 0x70,
	0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x76, 0x69, 0x70, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x5f, 0x61, 0x63, 0x74, 0x6f, 0x6e, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x5f, 0x69, 0x6d, 0x67, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x42, 0x14, 0x0a, 0x12, 0x5f,
	0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x6f,
	0x72, 0x22, 0x33, 0x0a, 0x0f, 0x46, 0x65, 0x65, 0x64, 0x57, 0x65, 0x6c, 0x63, 0x6f, 0x6d, 0x65,
	0x54, 0x65, 0x78, 0x74, 0x12, 0x17, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x22, 0x30, 0x0a, 0x0c, 0x46, 0x65, 0x65, 0x64, 0x53, 0x70,
	0x6c, 0x69, 0x74, 0x74, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x88, 0x01, 0x01, 0x42,
	0x07, 0x0a, 0x05, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x22, 0x5f, 0x0a, 0x0b, 0x52, 0x69, 0x63, 0x68,
	0x54, 0x65, 0x78, 0x74, 0x52, 0x6f, 0x77, 0x12, 0x17, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x88, 0x01, 0x01,
	0x12, 0x20, 0x0a, 0x09, 0x72, 0x69, 0x63, 0x68, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x72, 0x69, 0x63, 0x68, 0x54, 0x65, 0x78, 0x74, 0x88,
	0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x72, 0x69, 0x63, 0x68, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x22, 0x3c, 0x0a, 0x11, 0x46, 0x65, 0x65,
	0x64, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x52, 0x69, 0x63, 0x68, 0x54, 0x65, 0x78, 0x74, 0x12, 0x27,
	0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x51, 0x51, 0x54, 0x56, 0x2e, 0x52, 0x69, 0x63, 0x68, 0x54, 0x65, 0x78, 0x74, 0x52, 0x6f, 0x77,
	0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xe2, 0x01, 0x0a, 0x0b, 0x46, 0x65, 0x65, 0x64,
	0x4a, 0x6f, 0x69, 0x6e, 0x56, 0x49, 0x50, 0x12, 0x34, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x51, 0x51, 0x54,
	0x56, 0x2e, 0x46, 0x65, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00,
	0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x42, 0x0a,
	0x0e, 0x72, 0x69, 0x63, 0x68, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x51, 0x51, 0x54, 0x56, 0x2e, 0x46, 0x65, 0x65,
	0x64, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x52, 0x69, 0x63, 0x68, 0x54, 0x65, 0x78, 0x74, 0x48, 0x01,
	0x52, 0x0c, 0x72, 0x69, 0x63, 0x68, 0x54, 0x65, 0x78, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x2d, 0x0a, 0x06, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x51, 0x51, 0x54, 0x56, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x48, 0x02, 0x52, 0x06, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x88, 0x01, 0x01,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x42, 0x11,
	0x0a, 0x0f, 0x5f, 0x72, 0x69, 0x63, 0x68, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x9d, 0x01, 0x0a,
	0x15, 0x46, 0x65, 0x65, 0x64, 0x52, 0x61, 0x6e, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x69, 0x74,
	0x68, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x51, 0x51, 0x54, 0x56, 0x2e, 0x46, 0x65, 0x65,
	0x64, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x09, 0x72, 0x61, 0x6e, 0x6b,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x51, 0x51,
	0x54, 0x56, 0x2e, 0x46, 0x65, 0x65, 0x64, 0x52, 0x61, 0x6e, 0x6b, 0x50, 0x6f, 0x73, 0x74, 0x65,
	0x72, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x01, 0x52, 0x08, 0x72, 0x61, 0x6e, 0x6b, 0x4c, 0x69, 0x73,
	0x74, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x80, 0x01, 0x0a,
	0x11, 0x46, 0x65, 0x65, 0x64, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x52, 0x61, 0x6e, 0x6b, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x31, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x51, 0x51, 0x54, 0x56, 0x2e, 0x46, 0x65, 0x65, 0x64, 0x52, 0x61, 0x6e,
	0x6b, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x69, 0x74, 0x68, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x52, 0x05,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x2d, 0x0a, 0x06, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x51, 0x51, 0x54, 0x56, 0x2e, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x06, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x22,
	0x58, 0x0a, 0x1e, 0x46, 0x65, 0x65, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x48, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61,
	0x6c, 0x12, 0x36, 0x0a, 0x0a, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x51, 0x51, 0x54, 0x56, 0x2e, 0x46, 0x65, 0x65,
	0x64, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x09,
	0x76, 0x69, 0x64, 0x65, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xde, 0x02, 0x0a, 0x12, 0x46, 0x65,
	0x65, 0x64, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x49, 0x74, 0x65, 0x6d,
	0x12, 0x15, 0x0a, 0x03, 0x63, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x03, 0x63, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x06, 0x70, 0x6f, 0x73, 0x74, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x51, 0x51, 0x54, 0x56, 0x2e, 0x50,
	0x6f, 0x73, 0x74, 0x65, 0x72, 0x48, 0x01, 0x52, 0x06, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x88,
	0x01, 0x01, 0x12, 0x2a, 0x0a, 0x07, 0x63, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x51, 0x51, 0x54, 0x56, 0x2e, 0x43, 0x50, 0x49, 0x6e, 0x66,
	0x6f, 0x48, 0x02, 0x52, 0x06, 0x63, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x33,
	0x0a, 0x0a, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x51, 0x51, 0x54, 0x56, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x49,
	0x74, 0x65, 0x6d, 0x48, 0x03, 0x52, 0x09, 0x73, 0x68, 0x61, 0x72, 0x65, 0x49, 0x74, 0x65, 0x6d,
	0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x0c, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x51, 0x51, 0x54, 0x56,
	0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x04, 0x52, 0x0b,
	0x76, 0x69, 0x64, 0x65, 0x6f, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1e,
	0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x05, 0x52, 0x07, 0x64, 0x61, 0x74, 0x61, 0x4b, 0x65, 0x79, 0x88, 0x01, 0x01, 0x42, 0x06,
	0x0a, 0x04, 0x5f, 0x63, 0x69, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x65,
	0x72, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6b, 0x65, 0x79, 0x22, 0xba, 0x01, 0x0a, 0x0d, 0x46,
	0x65, 0x65, 0x64, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x29, 0x0a, 0x06,
	0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x51,
	0x51, 0x54, 0x56, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x06, 0x70, 0x6f,
	0x73, 0x74, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x72, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x0a,
	0x69, 0x73, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a,
	0x0e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x70, 0x6f,
	0x73, 0x74, 0x65, 0x72, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x4c, 0x0a, 0x14, 0x46, 0x65, 0x65, 0x64, 0x48,
	0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x12,
	0x29, 0x0a, 0x06, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x51, 0x51, 0x54, 0x56, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52,
	0x06, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x70,
	0x6f, 0x73, 0x74, 0x65, 0x72, 0x22, 0x45, 0x0a, 0x14, 0x46, 0x65, 0x65, 0x64, 0x50, 0x6f, 0x73,
	0x74, 0x65, 0x72, 0x56, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x58, 0x33, 0x12, 0x2d, 0x0a,
	0x0b, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x51, 0x51, 0x54, 0x56, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72,
	0x52, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x4a, 0x0a, 0x12,
	0x46, 0x65, 0x65, 0x64, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72,
	0x41, 0x44, 0x12, 0x29, 0x0a, 0x06, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x51, 0x51, 0x54, 0x56, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72,
	0x48, 0x00, 0x52, 0x06, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x22, 0x53, 0x0a, 0x13, 0x46, 0x65, 0x65, 0x64,
	0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x58, 0x32, 0x49, 0x74, 0x65, 0x6d, 0x12,
	0x3c, 0x0a, 0x0e, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x5f, 0x69, 0x74, 0x65,
	0x6d, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x51, 0x51, 0x54, 0x56, 0x2e, 0x52,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x58, 0x32, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0d,
	0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x22, 0xf0, 0x01,
	0x0a, 0x0f, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x58, 0x32, 0x49, 0x74, 0x65,
	0x6d, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x19, 0x2e, 0x51, 0x51, 0x54, 0x56, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64,
	0x58, 0x32, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x43, 0x0a, 0x0e, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x64, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x51, 0x51, 0x54, 0x56, 0x2e, 0x46, 0x65, 0x65, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x48, 0x01, 0x52, 0x0d, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x0d, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x51, 0x51, 0x54, 0x56, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x48,
	0x02, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x88,
	0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f,
	0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x42, 0x10,
	0x0a, 0x0e, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72,
	0x22, 0x45, 0x0a, 0x0f, 0x46, 0x65, 0x65, 0x64, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x58, 0x32, 0x49,
	0x74, 0x65, 0x6d, 0x12, 0x32, 0x0a, 0x0a, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x69, 0x74, 0x65,
	0x6d, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x51, 0x51, 0x54, 0x56, 0x2e, 0x46,
	0x65, 0x65, 0x64, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x09, 0x76, 0x69,
	0x64, 0x65, 0x6f, 0x49, 0x74, 0x65, 0x6d, 0x22, 0xb7, 0x01, 0x0a, 0x0d, 0x46, 0x65, 0x65, 0x64,
	0x56, 0x69, 0x64, 0x65, 0x6f, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x29, 0x0a, 0x06, 0x70, 0x6f, 0x73,
	0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x51, 0x51, 0x54, 0x56,
	0x2e, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x06, 0x70, 0x6f, 0x73, 0x74, 0x65,
	0x72, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x05, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x51, 0x51, 0x54, 0x56, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f,
	0x49, 0x74, 0x65, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x48, 0x01, 0x52, 0x05, 0x76, 0x69, 0x64, 0x65,
	0x6f, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x07, 0x63, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x51, 0x51, 0x54, 0x56, 0x2e, 0x43, 0x50, 0x49,
	0x6e, 0x66, 0x6f, 0x48, 0x02, 0x52, 0x06, 0x63, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x76, 0x69, 0x64, 0x65, 0x6f, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x70, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x22, 0x56, 0x0a, 0x0d, 0x46, 0x65, 0x65, 0x64, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x35, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x51, 0x51, 0x54, 0x56, 0x2e, 0x41,
	0x63, 0x74, 0x6f, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x14, 0x0a, 0x12, 0x46, 0x65, 0x65,
	0x64, 0x4e, 0x6f, 0x4d, 0x6f, 0x72, 0x65, 0x44, 0x61, 0x74, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x22,
	0x11, 0x0a, 0x0f, 0x46, 0x65, 0x65, 0x64, 0x53, 0x65, 0x65, 0x4d, 0x6f, 0x72, 0x65, 0x49, 0x74,
	0x65, 0x6d, 0x22, 0x97, 0x02, 0x0a, 0x10, 0x46, 0x65, 0x65, 0x64, 0x42, 0x69, 0x67, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x20, 0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x06, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x51, 0x51, 0x54, 0x56,
	0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x01, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x51, 0x51, 0x54, 0x56, 0x2e,
	0x46, 0x65, 0x65, 0x64, 0x42, 0x69, 0x67, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x74, 0x65, 0x6d,
	0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x55, 0x0a, 0x0f,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x15, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01,
	0x01, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6b, 0x65, 0x79, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72,
	0x6c, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xcc, 0x01, 0x0a,
	0x20, 0x46, 0x65, 0x65, 0x64, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x50,
	0x6f, 0x72, 0x74, 0x72, 0x61, 0x69, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x30, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x51, 0x51, 0x54, 0x56, 0x2e, 0x46, 0x65, 0x65, 0x64, 0x50, 0x6f, 0x73, 0x74,
	0x65, 0x72, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x51, 0x51, 0x54, 0x56, 0x2e,
	0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x30, 0x0a, 0x08, 0x62, 0x74, 0x6e, 0x5f, 0x6d, 0x6f, 0x72, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x51, 0x51, 0x54, 0x56, 0x2e, 0x42, 0x75, 0x74, 0x74,
	0x6f, 0x6e, 0x4d, 0x6f, 0x72, 0x65, 0x48, 0x01, 0x52, 0x07, 0x62, 0x74, 0x6e, 0x4d, 0x6f, 0x72,
	0x65, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x62, 0x74, 0x6e, 0x5f, 0x6d, 0x6f, 0x72, 0x65, 0x22, 0x84, 0x01, 0x0a, 0x12,
	0x46, 0x65, 0x65, 0x64, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x49, 0x74,
	0x65, 0x6d, 0x12, 0x2d, 0x0a, 0x06, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x51, 0x51, 0x54, 0x56, 0x2e, 0x52, 0x61, 0x6e, 0x6b, 0x50, 0x6f,
	0x73, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x06, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x88, 0x01,
	0x01, 0x12, 0x24, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x0a, 0x69, 0x73, 0x52, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x64, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x70, 0x6f, 0x73, 0x74,
	0x65, 0x72, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x64, 0x22, 0x34, 0x0a, 0x0d, 0x46, 0x65, 0x65, 0x64, 0x50, 0x61, 0x67, 0x65, 0x54, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x42, 0x0a, 0x0a, 0x49, 0x74, 0x65, 0x6d,
	0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x06, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x51, 0x51, 0x54, 0x56, 0x2e, 0x50, 0x6f,
	0x73, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x06, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x88, 0x01,
	0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x22, 0xa8, 0x02, 0x0a,
	0x08, 0x41, 0x44, 0x45, 0x78, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x25, 0x0a, 0x0c, 0x6d, 0x6f, 0x6f,
	0x64, 0x5f, 0x69, 0x6d, 0x67, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x0a, 0x6d, 0x6f, 0x6f, 0x64, 0x49, 0x6d, 0x67, 0x55, 0x72, 0x6c, 0x88, 0x01, 0x01,
	0x12, 0x25, 0x0a, 0x0c, 0x6c, 0x6f, 0x67, 0x6f, 0x5f, 0x69, 0x6d, 0x67, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0a, 0x6c, 0x6f, 0x67, 0x6f, 0x49, 0x6d,
	0x67, 0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0d, 0x70, 0x6c, 0x61, 0x79, 0x5f,
	0x65, 0x6e, 0x64, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02,
	0x52, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x45, 0x6e, 0x64, 0x54, 0x65, 0x78, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x2e, 0x0a, 0x11, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x62, 0x74, 0x6e,
	0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0e, 0x70,
	0x6c, 0x61, 0x79, 0x45, 0x6e, 0x64, 0x42, 0x74, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x1e, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x04, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x55, 0x72, 0x6c, 0x88, 0x01, 0x01,
	0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x6f, 0x6f, 0x64, 0x5f, 0x69, 0x6d, 0x67, 0x5f, 0x75, 0x72,
	0x6c, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6c, 0x6f, 0x67, 0x6f, 0x5f, 0x69, 0x6d, 0x67, 0x5f, 0x75,
	0x72, 0x6c, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x65, 0x6e, 0x64, 0x5f,
	0x74, 0x65, 0x78, 0x74, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x65, 0x6e,
	0x64, 0x5f, 0x62, 0x74, 0x6e, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70,
	0x6c, 0x61, 0x79, 0x5f, 0x75, 0x72, 0x6c, 0x22, 0xcc, 0x01, 0x0a, 0x0a, 0x49, 0x74, 0x65, 0x6d,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x06, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x51, 0x51, 0x54, 0x56, 0x2e, 0x50, 0x6f,
	0x73, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x06, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x88, 0x01,
	0x01, 0x12, 0x37, 0x0a, 0x0a, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x51, 0x51, 0x54, 0x56, 0x2e, 0x56, 0x69, 0x64,
	0x65, 0x6f, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x48, 0x01, 0x52, 0x09, 0x76, 0x69,
	0x64, 0x65, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x0a, 0x61, 0x64,
	0x5f, 0x65, 0x78, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x51, 0x51, 0x54, 0x56, 0x2e, 0x41, 0x44, 0x45, 0x78, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x02,
	0x52, 0x08, 0x61, 0x64, 0x45, 0x78, 0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x76, 0x69, 0x64,
	0x65, 0x6f, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x61, 0x64, 0x5f, 0x65,
	0x78, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x89, 0x01, 0x0a, 0x0f, 0x49, 0x74, 0x65, 0x6d, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x06, 0x70, 0x6f,
	0x73, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x51, 0x51, 0x54,
	0x56, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x06, 0x70, 0x6f, 0x73, 0x74,
	0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x0a, 0x61, 0x64, 0x5f, 0x65, 0x78, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x51, 0x51, 0x54, 0x56,
	0x2e, 0x41, 0x44, 0x45, 0x78, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x01, 0x52, 0x08, 0x61, 0x64, 0x45,
	0x78, 0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x70, 0x6f, 0x73,
	0x74, 0x65, 0x72, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x61, 0x64, 0x5f, 0x65, 0x78, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x22, 0xa8, 0x01, 0x0a, 0x08, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x18, 0x0a, 0x05, 0x69, 0x73, 0x5f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00,
	0x52, 0x04, 0x69, 0x73, 0x41, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x01, 0x52, 0x0e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0c, 0x6c, 0x69, 0x6e, 0x65, 0x5f,
	0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52,
	0x0a, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x69, 0x73, 0x5f, 0x61, 0x64, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x22, 0x82, 0x02,
	0x0a, 0x09, 0x49, 0x74, 0x65, 0x6d, 0x4f, 0x6e, 0x65, 0x4f, 0x66, 0x12, 0x30, 0x0a, 0x09, 0x69,
	0x74, 0x65, 0x6d, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x51, 0x51, 0x54, 0x56, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x01,
	0x52, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a,
	0x0b, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x51, 0x51, 0x54, 0x56, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x6f,
	0x73, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0a, 0x69, 0x74, 0x65, 0x6d, 0x50, 0x6f, 0x73, 0x74,
	0x65, 0x72, 0x12, 0x33, 0x0a, 0x0b, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x51, 0x51, 0x54, 0x56, 0x2e, 0x49,
	0x74, 0x65, 0x6d, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0a, 0x69, 0x74, 0x65,
	0x6d, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x43, 0x0a, 0x11, 0x69, 0x74, 0x65, 0x6d, 0x5f,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x51, 0x51, 0x54, 0x56, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0f, 0x69, 0x74, 0x65,
	0x6d, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x65, 0x72, 0x42, 0x06, 0x0a, 0x04,
	0x69, 0x74, 0x65, 0x6d, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x22, 0x39, 0x0a, 0x12, 0x46, 0x65, 0x65, 0x64, 0x46, 0x6f, 0x63, 0x75, 0x73, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x51, 0x51, 0x54, 0x56, 0x2e, 0x49, 0x74,
	0x65, 0x6d, 0x4f, 0x6e, 0x65, 0x4f, 0x66, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x35, 0x0a,
	0x11, 0x46, 0x65, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x20, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x51, 0x51, 0x54, 0x56, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x52, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x22, 0x44, 0x0a, 0x0c, 0x46, 0x65, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x29, 0x0a, 0x06, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x51, 0x51, 0x54, 0x56, 0x2e, 0x50, 0x6f, 0x73, 0x74,
	0x65, 0x72, 0x48, 0x00, 0x52, 0x06, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x88, 0x01, 0x01, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x2a, 0x2d, 0x0a, 0x12, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x43, 0x50, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x63, 0x65, 0x6e, 0x65,
	0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x53, 0x10, 0x00, 0x12, 0x0a, 0x0a,
	0x06, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x10, 0x01, 0x2a, 0x63, 0x0a, 0x0f, 0x56, 0x49, 0x50,
	0x50, 0x72, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x16,
	0x56, 0x49, 0x50, 0x5f, 0x50, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x4e, 0x4c, 0x59,
	0x5f, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x56, 0x49, 0x50, 0x5f,
	0x50, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45,
	0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x56, 0x49, 0x50, 0x5f, 0x50, 0x52, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x48, 0x41, 0x56, 0x45, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x10, 0x02, 0x2a, 0x4d,
	0x0a, 0x13, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x58, 0x32, 0x49, 0x74, 0x65,
	0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45,
	0x43, 0x4f, 0x4d, 0x4d, 0x45, 0x4e, 0x44, 0x58, 0x32, 0x5f, 0x4a, 0x55, 0x4d, 0x50, 0x10, 0x00,
	0x12, 0x1b, 0x0a, 0x17, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x4d, 0x4d, 0x45,
	0x4e, 0x44, 0x58, 0x32, 0x5f, 0x50, 0x4f, 0x53, 0x54, 0x45, 0x52, 0x10, 0x01, 0x42, 0x0c, 0x5a,
	0x0a, 0x2e, 0x2e, 0x2f, 0x2e, 0x2e, 0x2f, 0x51, 0x51, 0x54, 0x56, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_feed_data_proto_rawDescOnce sync.Once
	file_feed_data_proto_rawDescData = file_feed_data_proto_rawDesc
)

func file_feed_data_proto_rawDescGZIP() []byte {
	file_feed_data_proto_rawDescOnce.Do(func() {
		file_feed_data_proto_rawDescData = protoimpl.X.CompressGZIP(file_feed_data_proto_rawDescData)
	})
	return file_feed_data_proto_rawDescData
}

var file_feed_data_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_feed_data_proto_msgTypes = make([]protoimpl.MessageInfo, 89)
var file_feed_data_proto_goTypes = []interface{}{
	(DetailsCPInfoScene)(0),                  // 0: QQTV.DetailsCPInfoScene
	(VIPPrBannerType)(0),                     // 1: QQTV.VIPPrBannerType
	(RecommendX2ItemType)(0),                 // 2: QQTV.RecommendX2ItemType
	(*ChannelFeedItem)(nil),                  // 3: QQTV.ChannelFeedItem
	(*FeedPosterTitle)(nil),                  // 4: QQTV.FeedPosterTitle
	(*FeedPosterList)(nil),                   // 5: QQTV.FeedPosterList
	(*FeedPosterX2)(nil),                     // 6: QQTV.FeedPosterX2
	(*FeedTopicPosterX2)(nil),                // 7: QQTV.FeedTopicPosterX2
	(*FeedFocusPosters)(nil),                 // 8: QQTV.FeedFocusPosters
	(*FeedLoopPosters)(nil),                  // 9: QQTV.FeedLoopPosters
	(*PosterWithBar)(nil),                    // 10: QQTV.PosterWithBar
	(*FeedSearchBigPoster)(nil),              // 11: QQTV.FeedSearchBigPoster
	(*FeedSearchVipBanner)(nil),              // 12: QQTV.FeedSearchVipBanner
	(*FeedSearchActionBanner)(nil),           // 13: QQTV.FeedSearchActionBanner
	(*FeedSearchPoster)(nil),                 // 14: QQTV.FeedSearchPoster
	(*FeedNoSearchHit)(nil),                  // 15: QQTV.FeedNoSearchHit
	(*FeedSearchShortVideo)(nil),             // 16: QQTV.FeedSearchShortVideo
	(*FeedPosterX3)(nil),                     // 17: QQTV.FeedPosterX3
	(*FeedLoopPostersWithBar)(nil),           // 18: QQTV.FeedLoopPostersWithBar
	(*FeedPortraitPosterList)(nil),           // 19: QQTV.FeedPortraitPosterList
	(*FeedRankPosterList)(nil),               // 20: QQTV.FeedRankPosterList
	(*ActionButton)(nil),                     // 21: QQTV.ActionButton
	(*FeedActionButtonList)(nil),             // 22: QQTV.FeedActionButtonList
	(*FeedMoreButton)(nil),                   // 23: QQTV.FeedMoreButton
	(*PosterBanner)(nil),                     // 24: QQTV.PosterBanner
	(*FeedTrailerPlayer)(nil),                // 25: QQTV.FeedTrailerPlayer
	(*ShortVideoPosterList)(nil),             // 26: QQTV.ShortVideoPosterList
	(*FeedRecommendItem)(nil),                // 27: QQTV.FeedRecommendItem
	(*FeedShortViedeoRecommendItem)(nil),     // 28: QQTV.FeedShortViedeoRecommendItem
	(*DetailsCPInfo)(nil),                    // 29: QQTV.DetailsCPInfo
	(*FeedDetailsInfo)(nil),                  // 30: QQTV.FeedDetailsInfo
	(*FeedPlayListHorizontal)(nil),           // 31: QQTV.FeedPlayListHorizontal
	(*FeedPlayListVertical)(nil),             // 32: QQTV.FeedPlayListVertical
	(*FeedPlayListSeason)(nil),               // 33: QQTV.FeedPlayListSeason
	(*ToolbarReservationInfo)(nil),           // 34: QQTV.ToolbarReservationInfo
	(*FeedDetailsToolbar)(nil),               // 35: QQTV.FeedDetailsToolbar
	(*FeedDetailsLeftToolbar)(nil),           // 36: QQTV.FeedDetailsLeftToolbar
	(*ToolbarGiftInfo)(nil),                  // 37: QQTV.ToolbarGiftInfo
	(*FeedVIPPrBanner)(nil),                  // 38: QQTV.FeedVIPPrBanner
	(*VipTipsButton)(nil),                    // 39: QQTV.VipTipsButton
	(*FeedPrBanner)(nil),                     // 40: QQTV.FeedPrBanner
	(*FeedAdBanner)(nil),                     // 41: QQTV.FeedAdBanner
	(*FeedLiveTitle)(nil),                    // 42: QQTV.FeedLiveTitle
	(*FeedLiveNumber)(nil),                   // 43: QQTV.FeedLiveNumber
	(*FeedLiveShare)(nil),                    // 44: QQTV.FeedLiveShare
	(*FeedLivePurchase)(nil),                 // 45: QQTV.FeedLivePurchase
	(*FeedHorizontalVideoPlayer)(nil),        // 46: QQTV.FeedHorizontalVideoPlayer
	(*FeedVerticalVideoPlayer)(nil),          // 47: QQTV.FeedVerticalVideoPlayer
	(*FeedVideoListText)(nil),                // 48: QQTV.FeedVideoListText
	(*FeedModuleSeparator)(nil),              // 49: QQTV.FeedModuleSeparator
	(*FeedContinueWatch)(nil),                // 50: QQTV.FeedContinueWatch
	(*FeedComingSoon)(nil),                   // 51: QQTV.FeedComingSoon
	(*FeedComingSoonItem)(nil),               // 52: QQTV.FeedComingSoonItem
	(*FeedComingsoonVideoPlayer)(nil),        // 53: QQTV.FeedComingsoonVideoPlayer
	(*FeedComingsoonLaunchTime)(nil),         // 54: QQTV.FeedComingsoonLaunchTime
	(*FeedAd)(nil),                           // 55: QQTV.FeedAd
	(*FeedUserInfo)(nil),                     // 56: QQTV.FeedUserInfo
	(*FeedWelcomeText)(nil),                  // 57: QQTV.FeedWelcomeText
	(*FeedSplitter)(nil),                     // 58: QQTV.FeedSplitter
	(*RichTextRow)(nil),                      // 59: QQTV.RichTextRow
	(*FeedMultiRichText)(nil),                // 60: QQTV.FeedMultiRichText
	(*FeedJoinVIP)(nil),                      // 61: QQTV.FeedJoinVIP
	(*FeedRankListWithTitle)(nil),            // 62: QQTV.FeedRankListWithTitle
	(*FeedMultiRankList)(nil),                // 63: QQTV.FeedMultiRankList
	(*FeedDetailsRecommendHorizontal)(nil),   // 64: QQTV.FeedDetailsRecommendHorizontal
	(*FeedShortVideoItem)(nil),               // 65: QQTV.FeedShortVideoItem
	(*FeedTopicInfo)(nil),                    // 66: QQTV.FeedTopicInfo
	(*FeedHorizontalPoster)(nil),             // 67: QQTV.FeedHorizontalPoster
	(*FeedPosterVerticalX3)(nil),             // 68: QQTV.FeedPosterVerticalX3
	(*FeedPosterBannerAD)(nil),               // 69: QQTV.FeedPosterBannerAD
	(*FeedRecommendX2Item)(nil),              // 70: QQTV.FeedRecommendX2Item
	(*RecommendX2Item)(nil),                  // 71: QQTV.RecommendX2Item
	(*FeedVideoX2Item)(nil),                  // 72: QQTV.FeedVideoX2Item
	(*FeedVideoItem)(nil),                    // 73: QQTV.FeedVideoItem
	(*FeedActorList)(nil),                    // 74: QQTV.FeedActorList
	(*FeedNoMoreDataItem)(nil),               // 75: QQTV.FeedNoMoreDataItem
	(*FeedSeeMoreItem)(nil),                  // 76: QQTV.FeedSeeMoreItem
	(*FeedBigImageItem)(nil),                 // 77: QQTV.FeedBigImageItem
	(*FeedTopicCoverPortraitPosterList)(nil), // 78: QQTV.FeedTopicCoverPortraitPosterList
	(*FeedTopicCoverItem)(nil),               // 79: QQTV.FeedTopicCoverItem
	(*FeedPageTitle)(nil),                    // 80: QQTV.FeedPageTitle
	(*ItemPoster)(nil),                       // 81: QQTV.ItemPoster
	(*ADExInfo)(nil),                         // 82: QQTV.ADExInfo
	(*ItemPlayer)(nil),                       // 83: QQTV.ItemPlayer
	(*ItemPlayerOuter)(nil),                  // 84: QQTV.ItemPlayerOuter
	(*ItemInfo)(nil),                         // 85: QQTV.ItemInfo
	(*ItemOneOf)(nil),                        // 86: QQTV.ItemOneOf
	(*FeedFocusMultiList)(nil),               // 87: QQTV.FeedFocusMultiList
	(*FeedNameSlideList)(nil),                // 88: QQTV.FeedNameSlideList
	(*FeedNameInfo)(nil),                     // 89: QQTV.FeedNameInfo
	(*FeedVIPPrBanner_ExtraDataEntry)(nil),   // 90: QQTV.FeedVIPPrBanner.ExtraDataEntry
	(*FeedBigImageItem_ReportDataEntry)(nil), // 91: QQTV.FeedBigImageItem.ReportDataEntry
	(*Action)(nil),                           // 92: QQTV.Action
	(*Poster)(nil),                           // 93: QQTV.Poster
	(*ButtonMore)(nil),                       // 94: QQTV.ButtonMore
	(*TagLabel)(nil),                         // 95: QQTV.TagLabel
	(SearchPosterType)(0),                    // 96: QQTV.SearchPosterType
	(*ReportData)(nil),                       // 97: QQTV.ReportData
	(*VideoOption)(nil),                      // 98: QQTV.VideoOption
	(*RankPoster)(nil),                       // 99: QQTV.RankPoster
	(*ShareItem)(nil),                        // 100: QQTV.ShareItem
	(*VideoItemData)(nil),                    // 101: QQTV.VideoItemData
	(*WatchList)(nil),                        // 102: QQTV.WatchList
	(*ShortVideoPoster)(nil),                 // 103: QQTV.ShortVideoPoster
	(*CPInfo)(nil),                           // 104: QQTV.CPInfo
	(*SubInfo)(nil),                          // 105: QQTV.SubInfo
	(*MarkLabel)(nil),                        // 106: QQTV.MarkLabel
	(*ActorList)(nil),                        // 107: QQTV.ActorList
	(*NextPageInfo)(nil),                     // 108: QQTV.NextPageInfo
	(*SeasonInfo)(nil),                       // 109: QQTV.SeasonInfo
	(*ToolbarItemInfo)(nil),                  // 110: QQTV.ToolbarItemInfo
	(*LikeInfo)(nil),                         // 111: QQTV.LikeInfo
	(LiveNumberType)(0),                      // 112: QQTV.LiveNumberType
	(IdType)(0),                              // 113: QQTV.IdType
}
var file_feed_data_proto_depIdxs = []int32{
	92,  // 0: QQTV.FeedPosterTitle.action:type_name -> QQTV.Action
	93,  // 1: QQTV.FeedPosterList.poster_list:type_name -> QQTV.Poster
	94,  // 2: QQTV.FeedPosterList.btn_more:type_name -> QQTV.ButtonMore
	93,  // 3: QQTV.FeedPosterX2.poster_list:type_name -> QQTV.Poster
	93,  // 4: QQTV.FeedTopicPosterX2.poster_list:type_name -> QQTV.Poster
	93,  // 5: QQTV.FeedFocusPosters.poster_list:type_name -> QQTV.Poster
	93,  // 6: QQTV.FeedLoopPosters.poster_list:type_name -> QQTV.Poster
	93,  // 7: QQTV.PosterWithBar.poster:type_name -> QQTV.Poster
	93,  // 8: QQTV.PosterWithBar.bar:type_name -> QQTV.Poster
	93,  // 9: QQTV.FeedSearchBigPoster.poster:type_name -> QQTV.Poster
	95,  // 10: QQTV.FeedSearchBigPoster.tag_label_list:type_name -> QQTV.TagLabel
	93,  // 11: QQTV.FeedSearchBigPoster.poster_list:type_name -> QQTV.Poster
	96,  // 12: QQTV.FeedSearchBigPoster.type:type_name -> QQTV.SearchPosterType
	92,  // 13: QQTV.FeedSearchBigPoster.download_action:type_name -> QQTV.Action
	97,  // 14: QQTV.FeedSearchBigPoster.report_data:type_name -> QQTV.ReportData
	92,  // 15: QQTV.FeedSearchBigPoster.view_all_action:type_name -> QQTV.Action
	97,  // 16: QQTV.FeedSearchVipBanner.report_data:type_name -> QQTV.ReportData
	97,  // 17: QQTV.FeedSearchActionBanner.report_data:type_name -> QQTV.ReportData
	93,  // 18: QQTV.FeedSearchPoster.poster:type_name -> QQTV.Poster
	95,  // 19: QQTV.FeedSearchPoster.tag_label_list:type_name -> QQTV.TagLabel
	92,  // 20: QQTV.FeedNoSearchHit.action:type_name -> QQTV.Action
	97,  // 21: QQTV.FeedNoSearchHit.reportdata:type_name -> QQTV.ReportData
	93,  // 22: QQTV.FeedSearchShortVideo.poster:type_name -> QQTV.Poster
	98,  // 23: QQTV.FeedSearchShortVideo.video_option:type_name -> QQTV.VideoOption
	97,  // 24: QQTV.FeedSearchShortVideo.reportdata:type_name -> QQTV.ReportData
	93,  // 25: QQTV.FeedPosterX3.poster:type_name -> QQTV.Poster
	97,  // 26: QQTV.FeedPosterX3.reportdata:type_name -> QQTV.ReportData
	10,  // 27: QQTV.FeedLoopPostersWithBar.poster_list:type_name -> QQTV.PosterWithBar
	93,  // 28: QQTV.FeedPortraitPosterList.poster_list:type_name -> QQTV.Poster
	94,  // 29: QQTV.FeedPortraitPosterList.btn_more:type_name -> QQTV.ButtonMore
	99,  // 30: QQTV.FeedRankPosterList.rank_poster_list:type_name -> QQTV.RankPoster
	94,  // 31: QQTV.FeedRankPosterList.btn_more:type_name -> QQTV.ButtonMore
	92,  // 32: QQTV.ActionButton.action:type_name -> QQTV.Action
	97,  // 33: QQTV.ActionButton.reportdata:type_name -> QQTV.ReportData
	21,  // 34: QQTV.FeedActionButtonList.action_button_list:type_name -> QQTV.ActionButton
	92,  // 35: QQTV.FeedMoreButton.action:type_name -> QQTV.Action
	93,  // 36: QQTV.PosterBanner.poster:type_name -> QQTV.Poster
	100, // 37: QQTV.PosterBanner.shareitem:type_name -> QQTV.ShareItem
	93,  // 38: QQTV.FeedTrailerPlayer.poster:type_name -> QQTV.Poster
	101, // 39: QQTV.FeedTrailerPlayer.video_data:type_name -> QQTV.VideoItemData
	24,  // 40: QQTV.FeedTrailerPlayer.video_bar:type_name -> QQTV.PosterBanner
	102, // 41: QQTV.FeedTrailerPlayer.watch:type_name -> QQTV.WatchList
	103, // 42: QQTV.ShortVideoPosterList.poster_list:type_name -> QQTV.ShortVideoPoster
	93,  // 43: QQTV.FeedRecommendItem.poster:type_name -> QQTV.Poster
	95,  // 44: QQTV.FeedRecommendItem.tag_label_list:type_name -> QQTV.TagLabel
	93,  // 45: QQTV.FeedShortViedeoRecommendItem.poster:type_name -> QQTV.Poster
	104, // 46: QQTV.FeedShortViedeoRecommendItem.cp_info:type_name -> QQTV.CPInfo
	100, // 47: QQTV.FeedShortViedeoRecommendItem.share_item:type_name -> QQTV.ShareItem
	98,  // 48: QQTV.FeedShortViedeoRecommendItem.video_option:type_name -> QQTV.VideoOption
	104, // 49: QQTV.DetailsCPInfo.cpinfo:type_name -> QQTV.CPInfo
	0,   // 50: QQTV.DetailsCPInfo.scene:type_name -> QQTV.DetailsCPInfoScene
	105, // 51: QQTV.FeedDetailsInfo.sub_info:type_name -> QQTV.SubInfo
	106, // 52: QQTV.FeedDetailsInfo.mark_label:type_name -> QQTV.MarkLabel
	107, // 53: QQTV.FeedDetailsInfo.actors_list:type_name -> QQTV.ActorList
	95,  // 54: QQTV.FeedDetailsInfo.tag_label_list:type_name -> QQTV.TagLabel
	101, // 55: QQTV.FeedDetailsInfo.trailer_list:type_name -> QQTV.VideoItemData
	4,   // 56: QQTV.FeedPlayListHorizontal.poster_title:type_name -> QQTV.FeedPosterTitle
	101, // 57: QQTV.FeedPlayListHorizontal.video_list:type_name -> QQTV.VideoItemData
	108, // 58: QQTV.FeedPlayListHorizontal.next_page_info:type_name -> QQTV.NextPageInfo
	4,   // 59: QQTV.FeedPlayListVertical.poster_title:type_name -> QQTV.FeedPosterTitle
	101, // 60: QQTV.FeedPlayListVertical.video_list:type_name -> QQTV.VideoItemData
	108, // 61: QQTV.FeedPlayListVertical.next_page_info:type_name -> QQTV.NextPageInfo
	109, // 62: QQTV.FeedPlayListSeason.season_list:type_name -> QQTV.SeasonInfo
	100, // 63: QQTV.FeedDetailsToolbar.share_item:type_name -> QQTV.ShareItem
	102, // 64: QQTV.FeedDetailsToolbar.watch_list:type_name -> QQTV.WatchList
	110, // 65: QQTV.FeedDetailsToolbar.download_info:type_name -> QQTV.ToolbarItemInfo
	111, // 66: QQTV.FeedDetailsToolbar.like_info:type_name -> QQTV.LikeInfo
	110, // 67: QQTV.FeedDetailsToolbar.report_info:type_name -> QQTV.ToolbarItemInfo
	34,  // 68: QQTV.FeedDetailsToolbar.reservation_info:type_name -> QQTV.ToolbarReservationInfo
	37,  // 69: QQTV.FeedDetailsToolbar.toolbar_gift_info:type_name -> QQTV.ToolbarGiftInfo
	100, // 70: QQTV.FeedDetailsLeftToolbar.share_item:type_name -> QQTV.ShareItem
	102, // 71: QQTV.FeedDetailsLeftToolbar.watch_list:type_name -> QQTV.WatchList
	110, // 72: QQTV.FeedDetailsLeftToolbar.download_info:type_name -> QQTV.ToolbarItemInfo
	111, // 73: QQTV.FeedDetailsLeftToolbar.like_info:type_name -> QQTV.LikeInfo
	110, // 74: QQTV.FeedDetailsLeftToolbar.report_info:type_name -> QQTV.ToolbarItemInfo
	34,  // 75: QQTV.FeedDetailsLeftToolbar.reservation_info:type_name -> QQTV.ToolbarReservationInfo
	37,  // 76: QQTV.FeedDetailsLeftToolbar.toolbar_gift_info:type_name -> QQTV.ToolbarGiftInfo
	92,  // 77: QQTV.ToolbarGiftInfo.support_action:type_name -> QQTV.Action
	92,  // 78: QQTV.ToolbarGiftInfo.send_action:type_name -> QQTV.Action
	92,  // 79: QQTV.FeedVIPPrBanner.action:type_name -> QQTV.Action
	97,  // 80: QQTV.FeedVIPPrBanner.reportdata:type_name -> QQTV.ReportData
	1,   // 81: QQTV.FeedVIPPrBanner.type:type_name -> QQTV.VIPPrBannerType
	39,  // 82: QQTV.FeedVIPPrBanner.vip_tips_button:type_name -> QQTV.VipTipsButton
	90,  // 83: QQTV.FeedVIPPrBanner.extra_data:type_name -> QQTV.FeedVIPPrBanner.ExtraDataEntry
	92,  // 84: QQTV.VipTipsButton.action:type_name -> QQTV.Action
	92,  // 85: QQTV.FeedPrBanner.action:type_name -> QQTV.Action
	97,  // 86: QQTV.FeedPrBanner.reportdata:type_name -> QQTV.ReportData
	97,  // 87: QQTV.FeedAdBanner.reportdata:type_name -> QQTV.ReportData
	40,  // 88: QQTV.FeedAdBanner.feedprbanner:type_name -> QQTV.FeedPrBanner
	106, // 89: QQTV.FeedLiveTitle.mark_label:type_name -> QQTV.MarkLabel
	95,  // 90: QQTV.FeedLiveTitle.tag_label_list:type_name -> QQTV.TagLabel
	112, // 91: QQTV.FeedLiveNumber.type:type_name -> QQTV.LiveNumberType
	93,  // 92: QQTV.FeedHorizontalVideoPlayer.poster:type_name -> QQTV.Poster
	101, // 93: QQTV.FeedHorizontalVideoPlayer.video:type_name -> QQTV.VideoItemData
	111, // 94: QQTV.FeedHorizontalVideoPlayer.like_info:type_name -> QQTV.LikeInfo
	104, // 95: QQTV.FeedHorizontalVideoPlayer.cp_info:type_name -> QQTV.CPInfo
	102, // 96: QQTV.FeedHorizontalVideoPlayer.watch:type_name -> QQTV.WatchList
	93,  // 97: QQTV.FeedVerticalVideoPlayer.poster:type_name -> QQTV.Poster
	101, // 98: QQTV.FeedVerticalVideoPlayer.video:type_name -> QQTV.VideoItemData
	111, // 99: QQTV.FeedVerticalVideoPlayer.like_info:type_name -> QQTV.LikeInfo
	104, // 100: QQTV.FeedVerticalVideoPlayer.cp_info:type_name -> QQTV.CPInfo
	102, // 101: QQTV.FeedVerticalVideoPlayer.watch:type_name -> QQTV.WatchList
	101, // 102: QQTV.FeedVideoListText.video_list:type_name -> QQTV.VideoItemData
	92,  // 103: QQTV.FeedContinueWatch.action:type_name -> QQTV.Action
	97,  // 104: QQTV.FeedContinueWatch.report:type_name -> QQTV.ReportData
	52,  // 105: QQTV.FeedComingSoon.items:type_name -> QQTV.FeedComingSoonItem
	93,  // 106: QQTV.FeedComingSoonItem.poster:type_name -> QQTV.Poster
	113, // 107: QQTV.FeedComingSoonItem.type:type_name -> QQTV.IdType
	101, // 108: QQTV.FeedComingsoonVideoPlayer.video:type_name -> QQTV.VideoItemData
	93,  // 109: QQTV.FeedComingsoonVideoPlayer.poster:type_name -> QQTV.Poster
	59,  // 110: QQTV.FeedMultiRichText.items:type_name -> QQTV.RichTextRow
	56,  // 111: QQTV.FeedJoinVIP.user_info:type_name -> QQTV.FeedUserInfo
	60,  // 112: QQTV.FeedJoinVIP.rich_text_list:type_name -> QQTV.FeedMultiRichText
	97,  // 113: QQTV.FeedJoinVIP.report:type_name -> QQTV.ReportData
	4,   // 114: QQTV.FeedRankListWithTitle.title:type_name -> QQTV.FeedPosterTitle
	20,  // 115: QQTV.FeedRankListWithTitle.rank_list:type_name -> QQTV.FeedRankPosterList
	62,  // 116: QQTV.FeedMultiRankList.items:type_name -> QQTV.FeedRankListWithTitle
	97,  // 117: QQTV.FeedMultiRankList.report:type_name -> QQTV.ReportData
	27,  // 118: QQTV.FeedDetailsRecommendHorizontal.video_list:type_name -> QQTV.FeedRecommendItem
	93,  // 119: QQTV.FeedShortVideoItem.poster:type_name -> QQTV.Poster
	104, // 120: QQTV.FeedShortVideoItem.cp_info:type_name -> QQTV.CPInfo
	100, // 121: QQTV.FeedShortVideoItem.share_item:type_name -> QQTV.ShareItem
	98,  // 122: QQTV.FeedShortVideoItem.video_option:type_name -> QQTV.VideoOption
	93,  // 123: QQTV.FeedTopicInfo.poster:type_name -> QQTV.Poster
	93,  // 124: QQTV.FeedHorizontalPoster.poster:type_name -> QQTV.Poster
	93,  // 125: QQTV.FeedPosterVerticalX3.poster_list:type_name -> QQTV.Poster
	93,  // 126: QQTV.FeedPosterBannerAD.poster:type_name -> QQTV.Poster
	71,  // 127: QQTV.FeedRecommendX2Item.recommend_item:type_name -> QQTV.RecommendX2Item
	2,   // 128: QQTV.RecommendX2Item.type:type_name -> QQTV.RecommendX2ItemType
	27,  // 129: QQTV.RecommendX2Item.recommend_item:type_name -> QQTV.FeedRecommendItem
	93,  // 130: QQTV.RecommendX2Item.action_poster:type_name -> QQTV.Poster
	73,  // 131: QQTV.FeedVideoX2Item.video_item:type_name -> QQTV.FeedVideoItem
	93,  // 132: QQTV.FeedVideoItem.poster:type_name -> QQTV.Poster
	101, // 133: QQTV.FeedVideoItem.video:type_name -> QQTV.VideoItemData
	104, // 134: QQTV.FeedVideoItem.cp_info:type_name -> QQTV.CPInfo
	107, // 135: QQTV.FeedActorList.actors_list:type_name -> QQTV.ActorList
	92,  // 136: QQTV.FeedBigImageItem.action:type_name -> QQTV.Action
	91,  // 137: QQTV.FeedBigImageItem.reportdata:type_name -> QQTV.FeedBigImageItem.ReportDataEntry
	4,   // 138: QQTV.FeedTopicCoverPortraitPosterList.title:type_name -> QQTV.FeedPosterTitle
	93,  // 139: QQTV.FeedTopicCoverPortraitPosterList.poster_list:type_name -> QQTV.Poster
	94,  // 140: QQTV.FeedTopicCoverPortraitPosterList.btn_more:type_name -> QQTV.ButtonMore
	99,  // 141: QQTV.FeedTopicCoverItem.poster:type_name -> QQTV.RankPoster
	93,  // 142: QQTV.ItemPoster.poster:type_name -> QQTV.Poster
	93,  // 143: QQTV.ItemPlayer.poster:type_name -> QQTV.Poster
	101, // 144: QQTV.ItemPlayer.video_data:type_name -> QQTV.VideoItemData
	82,  // 145: QQTV.ItemPlayer.ad_ex_info:type_name -> QQTV.ADExInfo
	93,  // 146: QQTV.ItemPlayerOuter.poster:type_name -> QQTV.Poster
	82,  // 147: QQTV.ItemPlayerOuter.ad_ex_info:type_name -> QQTV.ADExInfo
	85,  // 148: QQTV.ItemOneOf.item_info:type_name -> QQTV.ItemInfo
	81,  // 149: QQTV.ItemOneOf.item_poster:type_name -> QQTV.ItemPoster
	83,  // 150: QQTV.ItemOneOf.item_player:type_name -> QQTV.ItemPlayer
	84,  // 151: QQTV.ItemOneOf.item_player_outer:type_name -> QQTV.ItemPlayerOuter
	86,  // 152: QQTV.FeedFocusMultiList.list:type_name -> QQTV.ItemOneOf
	93,  // 153: QQTV.FeedNameSlideList.list:type_name -> QQTV.Poster
	93,  // 154: QQTV.FeedNameInfo.poster:type_name -> QQTV.Poster
	155, // [155:155] is the sub-list for method output_type
	155, // [155:155] is the sub-list for method input_type
	155, // [155:155] is the sub-list for extension type_name
	155, // [155:155] is the sub-list for extension extendee
	0,   // [0:155] is the sub-list for field type_name
}

func init() { file_feed_data_proto_init() }
func file_feed_data_proto_init() {
	if File_feed_data_proto != nil {
		return
	}
	file_basic_data_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_feed_data_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelFeedItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feed_data_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeedPosterTitle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feed_data_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeedPosterList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feed_data_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeedPosterX2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feed_data_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeedTopicPosterX2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feed_data_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeedFocusPosters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feed_data_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeedLoopPosters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feed_data_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PosterWithBar); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feed_data_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeedSearchBigPoster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feed_data_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeedSearchVipBanner); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feed_data_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeedSearchActionBanner); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feed_data_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeedSearchPoster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feed_data_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeedNoSearchHit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feed_data_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeedSearchShortVideo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feed_data_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeedPosterX3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feed_data_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeedLoopPostersWithBar); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feed_data_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeedPortraitPosterList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feed_data_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeedRankPosterList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feed_data_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionButton); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feed_data_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeedActionButtonList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feed_data_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeedMoreButton); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feed_data_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PosterBanner); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feed_data_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeedTrailerPlayer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feed_data_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShortVideoPosterList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feed_data_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeedRecommendItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feed_data_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeedShortViedeoRecommendItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feed_data_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DetailsCPInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feed_data_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeedDetailsInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feed_data_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeedPlayListHorizontal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feed_data_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeedPlayListVertical); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feed_data_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeedPlayListSeason); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feed_data_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ToolbarReservationInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feed_data_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeedDetailsToolbar); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feed_data_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeedDetailsLeftToolbar); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feed_data_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ToolbarGiftInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feed_data_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeedVIPPrBanner); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feed_data_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VipTipsButton); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feed_data_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeedPrBanner); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feed_data_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeedAdBanner); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feed_data_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeedLiveTitle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feed_data_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeedLiveNumber); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feed_data_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeedLiveShare); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feed_data_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeedLivePurchase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feed_data_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeedHorizontalVideoPlayer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feed_data_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeedVerticalVideoPlayer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feed_data_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeedVideoListText); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feed_data_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeedModuleSeparator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feed_data_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeedContinueWatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feed_data_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeedComingSoon); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feed_data_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeedComingSoonItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feed_data_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeedComingsoonVideoPlayer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feed_data_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeedComingsoonLaunchTime); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feed_data_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeedAd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feed_data_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeedUserInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feed_data_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeedWelcomeText); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feed_data_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeedSplitter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feed_data_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RichTextRow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feed_data_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeedMultiRichText); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feed_data_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeedJoinVIP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feed_data_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeedRankListWithTitle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feed_data_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeedMultiRankList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feed_data_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeedDetailsRecommendHorizontal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feed_data_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeedShortVideoItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feed_data_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeedTopicInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feed_data_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeedHorizontalPoster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feed_data_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeedPosterVerticalX3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feed_data_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeedPosterBannerAD); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feed_data_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeedRecommendX2Item); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feed_data_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecommendX2Item); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feed_data_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeedVideoX2Item); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feed_data_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeedVideoItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feed_data_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeedActorList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feed_data_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeedNoMoreDataItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feed_data_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeedSeeMoreItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feed_data_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeedBigImageItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feed_data_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeedTopicCoverPortraitPosterList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feed_data_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeedTopicCoverItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feed_data_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeedPageTitle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feed_data_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ItemPoster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feed_data_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ADExInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feed_data_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ItemPlayer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feed_data_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ItemPlayerOuter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feed_data_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ItemInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feed_data_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ItemOneOf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feed_data_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeedFocusMultiList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feed_data_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeedNameSlideList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feed_data_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeedNameInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feed_data_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeedVIPPrBanner_ExtraDataEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feed_data_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeedBigImageItem_ReportDataEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_feed_data_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_feed_data_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_feed_data_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_feed_data_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_feed_data_proto_msgTypes[8].OneofWrappers = []interface{}{}
	file_feed_data_proto_msgTypes[9].OneofWrappers = []interface{}{}
	file_feed_data_proto_msgTypes[10].OneofWrappers = []interface{}{}
	file_feed_data_proto_msgTypes[11].OneofWrappers = []interface{}{}
	file_feed_data_proto_msgTypes[12].OneofWrappers = []interface{}{}
	file_feed_data_proto_msgTypes[13].OneofWrappers = []interface{}{}
	file_feed_data_proto_msgTypes[14].OneofWrappers = []interface{}{}
	file_feed_data_proto_msgTypes[16].OneofWrappers = []interface{}{}
	file_feed_data_proto_msgTypes[17].OneofWrappers = []interface{}{}
	file_feed_data_proto_msgTypes[18].OneofWrappers = []interface{}{}
	file_feed_data_proto_msgTypes[20].OneofWrappers = []interface{}{}
	file_feed_data_proto_msgTypes[21].OneofWrappers = []interface{}{}
	file_feed_data_proto_msgTypes[22].OneofWrappers = []interface{}{}
	file_feed_data_proto_msgTypes[24].OneofWrappers = []interface{}{}
	file_feed_data_proto_msgTypes[25].OneofWrappers = []interface{}{}
	file_feed_data_proto_msgTypes[26].OneofWrappers = []interface{}{}
	file_feed_data_proto_msgTypes[27].OneofWrappers = []interface{}{}
	file_feed_data_proto_msgTypes[28].OneofWrappers = []interface{}{}
	file_feed_data_proto_msgTypes[29].OneofWrappers = []interface{}{}
	file_feed_data_proto_msgTypes[31].OneofWrappers = []interface{}{}
	file_feed_data_proto_msgTypes[32].OneofWrappers = []interface{}{}
	file_feed_data_proto_msgTypes[33].OneofWrappers = []interface{}{}
	file_feed_data_proto_msgTypes[34].OneofWrappers = []interface{}{}
	file_feed_data_proto_msgTypes[35].OneofWrappers = []interface{}{}
	file_feed_data_proto_msgTypes[36].OneofWrappers = []interface{}{}
	file_feed_data_proto_msgTypes[37].OneofWrappers = []interface{}{}
	file_feed_data_proto_msgTypes[38].OneofWrappers = []interface{}{}
	file_feed_data_proto_msgTypes[39].OneofWrappers = []interface{}{}
	file_feed_data_proto_msgTypes[40].OneofWrappers = []interface{}{}
	file_feed_data_proto_msgTypes[41].OneofWrappers = []interface{}{}
	file_feed_data_proto_msgTypes[42].OneofWrappers = []interface{}{}
	file_feed_data_proto_msgTypes[43].OneofWrappers = []interface{}{}
	file_feed_data_proto_msgTypes[44].OneofWrappers = []interface{}{}
	file_feed_data_proto_msgTypes[46].OneofWrappers = []interface{}{}
	file_feed_data_proto_msgTypes[47].OneofWrappers = []interface{}{}
	file_feed_data_proto_msgTypes[49].OneofWrappers = []interface{}{}
	file_feed_data_proto_msgTypes[50].OneofWrappers = []interface{}{}
	file_feed_data_proto_msgTypes[51].OneofWrappers = []interface{}{}
	file_feed_data_proto_msgTypes[52].OneofWrappers = []interface{}{}
	file_feed_data_proto_msgTypes[53].OneofWrappers = []interface{}{}
	file_feed_data_proto_msgTypes[54].OneofWrappers = []interface{}{}
	file_feed_data_proto_msgTypes[55].OneofWrappers = []interface{}{}
	file_feed_data_proto_msgTypes[56].OneofWrappers = []interface{}{}
	file_feed_data_proto_msgTypes[58].OneofWrappers = []interface{}{}
	file_feed_data_proto_msgTypes[59].OneofWrappers = []interface{}{}
	file_feed_data_proto_msgTypes[60].OneofWrappers = []interface{}{}
	file_feed_data_proto_msgTypes[62].OneofWrappers = []interface{}{}
	file_feed_data_proto_msgTypes[63].OneofWrappers = []interface{}{}
	file_feed_data_proto_msgTypes[64].OneofWrappers = []interface{}{}
	file_feed_data_proto_msgTypes[66].OneofWrappers = []interface{}{}
	file_feed_data_proto_msgTypes[68].OneofWrappers = []interface{}{}
	file_feed_data_proto_msgTypes[70].OneofWrappers = []interface{}{}
	file_feed_data_proto_msgTypes[71].OneofWrappers = []interface{}{}
	file_feed_data_proto_msgTypes[74].OneofWrappers = []interface{}{}
	file_feed_data_proto_msgTypes[75].OneofWrappers = []interface{}{}
	file_feed_data_proto_msgTypes[76].OneofWrappers = []interface{}{}
	file_feed_data_proto_msgTypes[77].OneofWrappers = []interface{}{}
	file_feed_data_proto_msgTypes[78].OneofWrappers = []interface{}{}
	file_feed_data_proto_msgTypes[79].OneofWrappers = []interface{}{}
	file_feed_data_proto_msgTypes[80].OneofWrappers = []interface{}{}
	file_feed_data_proto_msgTypes[81].OneofWrappers = []interface{}{}
	file_feed_data_proto_msgTypes[82].OneofWrappers = []interface{}{}
	file_feed_data_proto_msgTypes[83].OneofWrappers = []interface{}{
		(*ItemOneOf_ItemPoster)(nil),
		(*ItemOneOf_ItemPlayer)(nil),
		(*ItemOneOf_ItemPlayerOuter)(nil),
	}
	file_feed_data_proto_msgTypes[86].OneofWrappers = []interface{}{}
	file_feed_data_proto_msgTypes[87].OneofWrappers = []interface{}{}
	file_feed_data_proto_msgTypes[88].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_feed_data_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   89,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_feed_data_proto_goTypes,
		DependencyIndexes: file_feed_data_proto_depIdxs,
		EnumInfos:         file_feed_data_proto_enumTypes,
		MessageInfos:      file_feed_data_proto_msgTypes,
	}.Build()
	File_feed_data_proto = out.File
	file_feed_data_proto_rawDesc = nil
	file_feed_data_proto_goTypes = nil
	file_feed_data_proto_depIdxs = nil
}
