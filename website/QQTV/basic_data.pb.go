// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.21.4
// source: basic_data.proto

package QQTV

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MarkLabelPosition int32

const (
	MarkLabelPosition_LOWER_LEFT  MarkLabelPosition = 0
	MarkLabelPosition_LOWER_RIGHT MarkLabelPosition = 1
	MarkLabelPosition_UPPER_RIGHT MarkLabelPosition = 2
	MarkLabelPosition_UPPER_LEFT  MarkLabelPosition = 3
)

// Enum value maps for MarkLabelPosition.
var (
	MarkLabelPosition_name = map[int32]string{
		0: "LOWER_LEFT",
		1: "LOWER_RIGHT",
		2: "UPPER_RIGHT",
		3: "UPPER_LEFT",
	}
	MarkLabelPosition_value = map[string]int32{
		"LOWER_LEFT":  0,
		"LOWER_RIGHT": 1,
		"UPPER_RIGHT": 2,
		"UPPER_LEFT":  3,
	}
)

func (x MarkLabelPosition) Enum() *MarkLabelPosition {
	p := new(MarkLabelPosition)
	*p = x
	return p
}

func (x MarkLabelPosition) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MarkLabelPosition) Descriptor() protoreflect.EnumDescriptor {
	return file_basic_data_proto_enumTypes[0].Descriptor()
}

func (MarkLabelPosition) Type() protoreflect.EnumType {
	return &file_basic_data_proto_enumTypes[0]
}

func (x MarkLabelPosition) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MarkLabelPosition.Descriptor instead.
func (MarkLabelPosition) EnumDescriptor() ([]byte, []int) {
	return file_basic_data_proto_rawDescGZIP(), []int{0}
}

type IdType int32

const (
	IdType_ID_TYPE_CID IdType = 0
	IdType_ID_TYPE_PID IdType = 1
	IdType_ID_TYPE_VID IdType = 2
)

// Enum value maps for IdType.
var (
	IdType_name = map[int32]string{
		0: "ID_TYPE_CID",
		1: "ID_TYPE_PID",
		2: "ID_TYPE_VID",
	}
	IdType_value = map[string]int32{
		"ID_TYPE_CID": 0,
		"ID_TYPE_PID": 1,
		"ID_TYPE_VID": 2,
	}
)

func (x IdType) Enum() *IdType {
	p := new(IdType)
	*p = x
	return p
}

func (x IdType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IdType) Descriptor() protoreflect.EnumDescriptor {
	return file_basic_data_proto_enumTypes[1].Descriptor()
}

func (IdType) Type() protoreflect.EnumType {
	return &file_basic_data_proto_enumTypes[1]
}

func (x IdType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IdType.Descriptor instead.
func (IdType) EnumDescriptor() ([]byte, []int) {
	return file_basic_data_proto_rawDescGZIP(), []int{1}
}

type VideoPaymentType int32

const (
	VideoPaymentType_UNKNOWN      VideoPaymentType = 0
	VideoPaymentType_VOD          VideoPaymentType = 4
	VideoPaymentType_VOD_VIP_EXMT VideoPaymentType = 5
	VideoPaymentType_VIP_ONLY     VideoPaymentType = 6
	VideoPaymentType_FREE_FOR_ALL VideoPaymentType = 8
	VideoPaymentType_SINGLE_PAY   VideoPaymentType = 7
	VideoPaymentType_VOD_AHEAD    VideoPaymentType = 12
)

// Enum value maps for VideoPaymentType.
var (
	VideoPaymentType_name = map[int32]string{
		0:  "UNKNOWN",
		4:  "VOD",
		5:  "VOD_VIP_EXMT",
		6:  "VIP_ONLY",
		8:  "FREE_FOR_ALL",
		7:  "SINGLE_PAY",
		12: "VOD_AHEAD",
	}
	VideoPaymentType_value = map[string]int32{
		"UNKNOWN":      0,
		"VOD":          4,
		"VOD_VIP_EXMT": 5,
		"VIP_ONLY":     6,
		"FREE_FOR_ALL": 8,
		"SINGLE_PAY":   7,
		"VOD_AHEAD":    12,
	}
)

func (x VideoPaymentType) Enum() *VideoPaymentType {
	p := new(VideoPaymentType)
	*p = x
	return p
}

func (x VideoPaymentType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VideoPaymentType) Descriptor() protoreflect.EnumDescriptor {
	return file_basic_data_proto_enumTypes[2].Descriptor()
}

func (VideoPaymentType) Type() protoreflect.EnumType {
	return &file_basic_data_proto_enumTypes[2]
}

func (x VideoPaymentType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VideoPaymentType.Descriptor instead.
func (VideoPaymentType) EnumDescriptor() ([]byte, []int) {
	return file_basic_data_proto_rawDescGZIP(), []int{2}
}

type VideoCopyrightType int32

const (
	VideoCopyrightType_PLAY_IN_WEBVIEW           VideoCopyrightType = 0
	VideoCopyrightType_PLAY_IN_APP               VideoCopyrightType = 1
	VideoCopyrightType_PLAY_IN_WEBVIEW_WITH_STMT VideoCopyrightType = 101
)

// Enum value maps for VideoCopyrightType.
var (
	VideoCopyrightType_name = map[int32]string{
		0:   "PLAY_IN_WEBVIEW",
		1:   "PLAY_IN_APP",
		101: "PLAY_IN_WEBVIEW_WITH_STMT",
	}
	VideoCopyrightType_value = map[string]int32{
		"PLAY_IN_WEBVIEW":           0,
		"PLAY_IN_APP":               1,
		"PLAY_IN_WEBVIEW_WITH_STMT": 101,
	}
)

func (x VideoCopyrightType) Enum() *VideoCopyrightType {
	p := new(VideoCopyrightType)
	*p = x
	return p
}

func (x VideoCopyrightType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VideoCopyrightType) Descriptor() protoreflect.EnumDescriptor {
	return file_basic_data_proto_enumTypes[3].Descriptor()
}

func (VideoCopyrightType) Type() protoreflect.EnumType {
	return &file_basic_data_proto_enumTypes[3]
}

func (x VideoCopyrightType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VideoCopyrightType.Descriptor instead.
func (VideoCopyrightType) EnumDescriptor() ([]byte, []int) {
	return file_basic_data_proto_rawDescGZIP(), []int{3}
}

type Gender int32

const (
	Gender_GENDER_MALE   Gender = 0
	Gender_GENDER_FEMALE Gender = 1
	Gender_GENDER_OTHER  Gender = 2
)

// Enum value maps for Gender.
var (
	Gender_name = map[int32]string{
		0: "GENDER_MALE",
		1: "GENDER_FEMALE",
		2: "GENDER_OTHER",
	}
	Gender_value = map[string]int32{
		"GENDER_MALE":   0,
		"GENDER_FEMALE": 1,
		"GENDER_OTHER":  2,
	}
)

func (x Gender) Enum() *Gender {
	p := new(Gender)
	*p = x
	return p
}

func (x Gender) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Gender) Descriptor() protoreflect.EnumDescriptor {
	return file_basic_data_proto_enumTypes[4].Descriptor()
}

func (Gender) Type() protoreflect.EnumType {
	return &file_basic_data_proto_enumTypes[4]
}

func (x Gender) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Gender.Descriptor instead.
func (Gender) EnumDescriptor() ([]byte, []int) {
	return file_basic_data_proto_rawDescGZIP(), []int{4}
}

type PlayListUiType int32

const (
	PlayListUiType_PLAY_LSIT_TYPE_TEXT   PlayListUiType = 0
	PlayListUiType_PLAY_LIST_TYPE_POSTER PlayListUiType = 1
)

// Enum value maps for PlayListUiType.
var (
	PlayListUiType_name = map[int32]string{
		0: "PLAY_LSIT_TYPE_TEXT",
		1: "PLAY_LIST_TYPE_POSTER",
	}
	PlayListUiType_value = map[string]int32{
		"PLAY_LSIT_TYPE_TEXT":   0,
		"PLAY_LIST_TYPE_POSTER": 1,
	}
)

func (x PlayListUiType) Enum() *PlayListUiType {
	p := new(PlayListUiType)
	*p = x
	return p
}

func (x PlayListUiType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PlayListUiType) Descriptor() protoreflect.EnumDescriptor {
	return file_basic_data_proto_enumTypes[5].Descriptor()
}

func (PlayListUiType) Type() protoreflect.EnumType {
	return &file_basic_data_proto_enumTypes[5]
}

func (x PlayListUiType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PlayListUiType.Descriptor instead.
func (PlayListUiType) EnumDescriptor() ([]byte, []int) {
	return file_basic_data_proto_rawDescGZIP(), []int{5}
}

type LiveNumberType int32

const (
	LiveNumberType_TYPE_UNKNOW  LiveNumberType = 0
	LiveNumberType_TYPE_ONLINE  LiveNumberType = 1
	LiveNumberType_TYPE_RESERVE LiveNumberType = 2
)

// Enum value maps for LiveNumberType.
var (
	LiveNumberType_name = map[int32]string{
		0: "TYPE_UNKNOW",
		1: "TYPE_ONLINE",
		2: "TYPE_RESERVE",
	}
	LiveNumberType_value = map[string]int32{
		"TYPE_UNKNOW":  0,
		"TYPE_ONLINE":  1,
		"TYPE_RESERVE": 2,
	}
)

func (x LiveNumberType) Enum() *LiveNumberType {
	p := new(LiveNumberType)
	*p = x
	return p
}

func (x LiveNumberType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LiveNumberType) Descriptor() protoreflect.EnumDescriptor {
	return file_basic_data_proto_enumTypes[6].Descriptor()
}

func (LiveNumberType) Type() protoreflect.EnumType {
	return &file_basic_data_proto_enumTypes[6]
}

func (x LiveNumberType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LiveNumberType.Descriptor instead.
func (LiveNumberType) EnumDescriptor() ([]byte, []int) {
	return file_basic_data_proto_rawDescGZIP(), []int{6}
}

type LoadType int32

const (
	LoadType_LOAD_TYPE_MANUAL   LoadType = 0
	LoadType_LOAD_TYPE_TIMEOUT  LoadType = 1
	LoadType_LOAD_TYPE_PRELOAD  LoadType = 2
	LoadType_LOAD_TYPE_NEXTPAGE LoadType = 3
)

// Enum value maps for LoadType.
var (
	LoadType_name = map[int32]string{
		0: "LOAD_TYPE_MANUAL",
		1: "LOAD_TYPE_TIMEOUT",
		2: "LOAD_TYPE_PRELOAD",
		3: "LOAD_TYPE_NEXTPAGE",
	}
	LoadType_value = map[string]int32{
		"LOAD_TYPE_MANUAL":   0,
		"LOAD_TYPE_TIMEOUT":  1,
		"LOAD_TYPE_PRELOAD":  2,
		"LOAD_TYPE_NEXTPAGE": 3,
	}
)

func (x LoadType) Enum() *LoadType {
	p := new(LoadType)
	*p = x
	return p
}

func (x LoadType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LoadType) Descriptor() protoreflect.EnumDescriptor {
	return file_basic_data_proto_enumTypes[7].Descriptor()
}

func (LoadType) Type() protoreflect.EnumType {
	return &file_basic_data_proto_enumTypes[7]
}

func (x LoadType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LoadType.Descriptor instead.
func (LoadType) EnumDescriptor() ([]byte, []int) {
	return file_basic_data_proto_rawDescGZIP(), []int{7}
}

type SearchPosterType int32

const (
	SearchPosterType_TYPE_SMALL  SearchPosterType = 0
	SearchPosterType_TYPE_LARGE  SearchPosterType = 1
	SearchPosterType_TYPE_POSTER SearchPosterType = 2
)

// Enum value maps for SearchPosterType.
var (
	SearchPosterType_name = map[int32]string{
		0: "TYPE_SMALL",
		1: "TYPE_LARGE",
		2: "TYPE_POSTER",
	}
	SearchPosterType_value = map[string]int32{
		"TYPE_SMALL":  0,
		"TYPE_LARGE":  1,
		"TYPE_POSTER": 2,
	}
)

func (x SearchPosterType) Enum() *SearchPosterType {
	p := new(SearchPosterType)
	*p = x
	return p
}

func (x SearchPosterType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SearchPosterType) Descriptor() protoreflect.EnumDescriptor {
	return file_basic_data_proto_enumTypes[8].Descriptor()
}

func (SearchPosterType) Type() protoreflect.EnumType {
	return &file_basic_data_proto_enumTypes[8]
}

func (x SearchPosterType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SearchPosterType.Descriptor instead.
func (SearchPosterType) EnumDescriptor() ([]byte, []int) {
	return file_basic_data_proto_rawDescGZIP(), []int{8}
}

type ShareItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShareUrl            *string `protobuf:"bytes,1,opt,name=share_url,json=shareUrl,proto3,oneof" json:"share_url,omitempty"`
	ShareTitle          *string `protobuf:"bytes,2,opt,name=share_title,json=shareTitle,proto3,oneof" json:"share_title,omitempty"`
	ShareSubtitle       *string `protobuf:"bytes,3,opt,name=share_subtitle,json=shareSubtitle,proto3,oneof" json:"share_subtitle,omitempty"`
	ShareImgUrl         *string `protobuf:"bytes,4,opt,name=share_img_url,json=shareImgUrl,proto3,oneof" json:"share_img_url,omitempty"`
	Vid                 *string `protobuf:"bytes,5,opt,name=vid,proto3,oneof" json:"vid,omitempty"`
	Cid                 *string `protobuf:"bytes,6,opt,name=cid,proto3,oneof" json:"cid,omitempty"`
	ShareVerticalImgUrl *string `protobuf:"bytes,7,opt,name=share_vertical_img_url,json=shareVerticalImgUrl,proto3,oneof" json:"share_vertical_img_url,omitempty"`
}

func (x *ShareItem) Reset() {
	*x = ShareItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_basic_data_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShareItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShareItem) ProtoMessage() {}

func (x *ShareItem) ProtoReflect() protoreflect.Message {
	mi := &file_basic_data_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShareItem.ProtoReflect.Descriptor instead.
func (*ShareItem) Descriptor() ([]byte, []int) {
	return file_basic_data_proto_rawDescGZIP(), []int{0}
}

func (x *ShareItem) GetShareUrl() string {
	if x != nil && x.ShareUrl != nil {
		return *x.ShareUrl
	}
	return ""
}

func (x *ShareItem) GetShareTitle() string {
	if x != nil && x.ShareTitle != nil {
		return *x.ShareTitle
	}
	return ""
}

func (x *ShareItem) GetShareSubtitle() string {
	if x != nil && x.ShareSubtitle != nil {
		return *x.ShareSubtitle
	}
	return ""
}

func (x *ShareItem) GetShareImgUrl() string {
	if x != nil && x.ShareImgUrl != nil {
		return *x.ShareImgUrl
	}
	return ""
}

func (x *ShareItem) GetVid() string {
	if x != nil && x.Vid != nil {
		return *x.Vid
	}
	return ""
}

func (x *ShareItem) GetCid() string {
	if x != nil && x.Cid != nil {
		return *x.Cid
	}
	return ""
}

func (x *ShareItem) GetShareVerticalImgUrl() string {
	if x != nil && x.ShareVerticalImgUrl != nil {
		return *x.ShareVerticalImgUrl
	}
	return ""
}

type ReportData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReportKey    *string `protobuf:"bytes,1,opt,name=report_key,json=reportKey,proto3,oneof" json:"report_key,omitempty"`
	ReportParams *string `protobuf:"bytes,2,opt,name=report_params,json=reportParams,proto3,oneof" json:"report_params,omitempty"`
}

func (x *ReportData) Reset() {
	*x = ReportData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_basic_data_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportData) ProtoMessage() {}

func (x *ReportData) ProtoReflect() protoreflect.Message {
	mi := &file_basic_data_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportData.ProtoReflect.Descriptor instead.
func (*ReportData) Descriptor() ([]byte, []int) {
	return file_basic_data_proto_rawDescGZIP(), []int{1}
}

func (x *ReportData) GetReportKey() string {
	if x != nil && x.ReportKey != nil {
		return *x.ReportKey
	}
	return ""
}

func (x *ReportData) GetReportParams() string {
	if x != nil && x.ReportParams != nil {
		return *x.ReportParams
	}
	return ""
}

type Action struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url        *string     `protobuf:"bytes,1,opt,name=url,proto3,oneof" json:"url,omitempty"`
	ReportData *ReportData `protobuf:"bytes,2,opt,name=report_data,json=reportData,proto3,oneof" json:"report_data,omitempty"`
}

func (x *Action) Reset() {
	*x = Action{}
	if protoimpl.UnsafeEnabled {
		mi := &file_basic_data_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Action) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Action) ProtoMessage() {}

func (x *Action) ProtoReflect() protoreflect.Message {
	mi := &file_basic_data_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Action.ProtoReflect.Descriptor instead.
func (*Action) Descriptor() ([]byte, []int) {
	return file_basic_data_proto_rawDescGZIP(), []int{2}
}

func (x *Action) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *Action) GetReportData() *ReportData {
	if x != nil {
		return x.ReportData
	}
	return nil
}

type MarkLabel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text         *string            `protobuf:"bytes,1,opt,name=text,proto3,oneof" json:"text,omitempty"`
	Position     *MarkLabelPosition `protobuf:"varint,2,opt,name=position,proto3,enum=QQTV.MarkLabelPosition,oneof" json:"position,omitempty"`
	FeatureColor *string            `protobuf:"bytes,3,opt,name=feature_color,json=featureColor,proto3,oneof" json:"feature_color,omitempty"`
}

func (x *MarkLabel) Reset() {
	*x = MarkLabel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_basic_data_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarkLabel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkLabel) ProtoMessage() {}

func (x *MarkLabel) ProtoReflect() protoreflect.Message {
	mi := &file_basic_data_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkLabel.ProtoReflect.Descriptor instead.
func (*MarkLabel) Descriptor() ([]byte, []int) {
	return file_basic_data_proto_rawDescGZIP(), []int{3}
}

func (x *MarkLabel) GetText() string {
	if x != nil && x.Text != nil {
		return *x.Text
	}
	return ""
}

func (x *MarkLabel) GetPosition() MarkLabelPosition {
	if x != nil && x.Position != nil {
		return *x.Position
	}
	return MarkLabelPosition_LOWER_LEFT
}

func (x *MarkLabel) GetFeatureColor() string {
	if x != nil && x.FeatureColor != nil {
		return *x.FeatureColor
	}
	return ""
}

type TagLabel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text         *string                       `protobuf:"bytes,1,opt,name=text,proto3,oneof" json:"text,omitempty"`
	TextColor    *string                       `protobuf:"bytes,2,opt,name=text_color,json=textColor,proto3,oneof" json:"text_color,omitempty"`
	BgColor      *string                       `protobuf:"bytes,3,opt,name=bg_color,json=bgColor,proto3,oneof" json:"bg_color,omitempty"`
	FilterChoice []*TagLabel_FilterChoiceEntry `protobuf:"bytes,4,rep,name=filter_choice,json=filterChoice,proto3" json:"filter_choice,omitempty"`
}

func (x *TagLabel) Reset() {
	*x = TagLabel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_basic_data_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TagLabel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagLabel) ProtoMessage() {}

func (x *TagLabel) ProtoReflect() protoreflect.Message {
	mi := &file_basic_data_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagLabel.ProtoReflect.Descriptor instead.
func (*TagLabel) Descriptor() ([]byte, []int) {
	return file_basic_data_proto_rawDescGZIP(), []int{4}
}

func (x *TagLabel) GetText() string {
	if x != nil && x.Text != nil {
		return *x.Text
	}
	return ""
}

func (x *TagLabel) GetTextColor() string {
	if x != nil && x.TextColor != nil {
		return *x.TextColor
	}
	return ""
}

func (x *TagLabel) GetBgColor() string {
	if x != nil && x.BgColor != nil {
		return *x.BgColor
	}
	return ""
}

func (x *TagLabel) GetFilterChoice() []*TagLabel_FilterChoiceEntry {
	if x != nil {
		return x.FilterChoice
	}
	return nil
}

type Poster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MainTitle             *string      `protobuf:"bytes,1,opt,name=main_title,json=mainTitle,proto3,oneof" json:"main_title,omitempty"`
	Subtitle              *string      `protobuf:"bytes,2,opt,name=subtitle,proto3,oneof" json:"subtitle,omitempty"`
	Description           *string      `protobuf:"bytes,3,opt,name=description,proto3,oneof" json:"description,omitempty"`
	ImgUrl                *string      `protobuf:"bytes,4,opt,name=img_url,json=imgUrl,proto3,oneof" json:"img_url,omitempty"`
	MarkLabelList         []*MarkLabel `protobuf:"bytes,5,rep,name=mark_label_list,json=markLabelList,proto3" json:"mark_label_list,omitempty"`
	ReportData            *ReportData  `protobuf:"bytes,6,opt,name=report_data,json=reportData,proto3,oneof" json:"report_data,omitempty"`
	Action                *Action      `protobuf:"bytes,7,opt,name=action,proto3,oneof" json:"action,omitempty"`
	AdKey                 *string      `protobuf:"bytes,8,opt,name=ad_key,json=adKey,proto3,oneof" json:"ad_key,omitempty"`
	PosterId              *string      `protobuf:"bytes,9,opt,name=poster_id,json=posterId,proto3,oneof" json:"poster_id,omitempty"`
	EpisodeUpdatedCountry *int32       `protobuf:"varint,10,opt,name=episode_updated_country,json=episodeUpdatedCountry,proto3,oneof" json:"episode_updated_country,omitempty"`
	TagLabelList          []*TagLabel  `protobuf:"bytes,11,rep,name=tag_label_list,json=tagLabelList,proto3" json:"tag_label_list,omitempty"`
	Cid                   *string      `protobuf:"bytes,12,opt,name=cid,proto3,oneof" json:"cid,omitempty"`
	Pid                   *string      `protobuf:"bytes,13,opt,name=pid,proto3,oneof" json:"pid,omitempty"`
	Vid                   *string      `protobuf:"bytes,14,opt,name=vid,proto3,oneof" json:"vid,omitempty"`
	ImgMainColor          *string      `protobuf:"bytes,15,opt,name=img_main_color,json=imgMainColor,proto3,oneof" json:"img_main_color,omitempty"`
	Tid                   *string      `protobuf:"bytes,16,opt,name=tid,proto3,oneof" json:"tid,omitempty"`
	ActorList             []*ActorInfo `protobuf:"bytes,17,rep,name=actor_list,json=actorList,proto3" json:"actor_list,omitempty"`
	TidType               *string      `protobuf:"bytes,18,opt,name=tid_type,json=tidType,proto3,oneof" json:"tid_type,omitempty"`
	Url                   *string      `protobuf:"bytes,19,opt,name=url,proto3,oneof" json:"url,omitempty"`
	UrlOuter              *string      `protobuf:"bytes,20,opt,name=url_outer,json=urlOuter,proto3,oneof" json:"url_outer,omitempty"`
	ExposeLimit           *int32       `protobuf:"varint,21,opt,name=expose_limit,json=exposeLimit,proto3,oneof" json:"expose_limit,omitempty"`
	BgImgUrl              *string      `protobuf:"bytes,22,opt,name=bg_img_url,json=bgImgUrl,proto3,oneof" json:"bg_img_url,omitempty"`
	LogoImgUrl            *string      `protobuf:"bytes,23,opt,name=logo_img_url,json=logoImgUrl,proto3,oneof" json:"logo_img_url,omitempty"`
	TitleHide             *bool        `protobuf:"varint,24,opt,name=title_hide,json=titleHide,proto3,oneof" json:"title_hide,omitempty"`
	Nid                   *string      `protobuf:"bytes,25,opt,name=nid,proto3,oneof" json:"nid,omitempty"`
}

func (x *Poster) Reset() {
	*x = Poster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_basic_data_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Poster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Poster) ProtoMessage() {}

func (x *Poster) ProtoReflect() protoreflect.Message {
	mi := &file_basic_data_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Poster.ProtoReflect.Descriptor instead.
func (*Poster) Descriptor() ([]byte, []int) {
	return file_basic_data_proto_rawDescGZIP(), []int{5}
}

func (x *Poster) GetMainTitle() string {
	if x != nil && x.MainTitle != nil {
		return *x.MainTitle
	}
	return ""
}

func (x *Poster) GetSubtitle() string {
	if x != nil && x.Subtitle != nil {
		return *x.Subtitle
	}
	return ""
}

func (x *Poster) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *Poster) GetImgUrl() string {
	if x != nil && x.ImgUrl != nil {
		return *x.ImgUrl
	}
	return ""
}

func (x *Poster) GetMarkLabelList() []*MarkLabel {
	if x != nil {
		return x.MarkLabelList
	}
	return nil
}

func (x *Poster) GetReportData() *ReportData {
	if x != nil {
		return x.ReportData
	}
	return nil
}

func (x *Poster) GetAction() *Action {
	if x != nil {
		return x.Action
	}
	return nil
}

func (x *Poster) GetAdKey() string {
	if x != nil && x.AdKey != nil {
		return *x.AdKey
	}
	return ""
}

func (x *Poster) GetPosterId() string {
	if x != nil && x.PosterId != nil {
		return *x.PosterId
	}
	return ""
}

func (x *Poster) GetEpisodeUpdatedCountry() int32 {
	if x != nil && x.EpisodeUpdatedCountry != nil {
		return *x.EpisodeUpdatedCountry
	}
	return 0
}

func (x *Poster) GetTagLabelList() []*TagLabel {
	if x != nil {
		return x.TagLabelList
	}
	return nil
}

func (x *Poster) GetCid() string {
	if x != nil && x.Cid != nil {
		return *x.Cid
	}
	return ""
}

func (x *Poster) GetPid() string {
	if x != nil && x.Pid != nil {
		return *x.Pid
	}
	return ""
}

func (x *Poster) GetVid() string {
	if x != nil && x.Vid != nil {
		return *x.Vid
	}
	return ""
}

func (x *Poster) GetImgMainColor() string {
	if x != nil && x.ImgMainColor != nil {
		return *x.ImgMainColor
	}
	return ""
}

func (x *Poster) GetTid() string {
	if x != nil && x.Tid != nil {
		return *x.Tid
	}
	return ""
}

func (x *Poster) GetActorList() []*ActorInfo {
	if x != nil {
		return x.ActorList
	}
	return nil
}

func (x *Poster) GetTidType() string {
	if x != nil && x.TidType != nil {
		return *x.TidType
	}
	return ""
}

func (x *Poster) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *Poster) GetUrlOuter() string {
	if x != nil && x.UrlOuter != nil {
		return *x.UrlOuter
	}
	return ""
}

func (x *Poster) GetExposeLimit() int32 {
	if x != nil && x.ExposeLimit != nil {
		return *x.ExposeLimit
	}
	return 0
}

func (x *Poster) GetBgImgUrl() string {
	if x != nil && x.BgImgUrl != nil {
		return *x.BgImgUrl
	}
	return ""
}

func (x *Poster) GetLogoImgUrl() string {
	if x != nil && x.LogoImgUrl != nil {
		return *x.LogoImgUrl
	}
	return ""
}

func (x *Poster) GetTitleHide() bool {
	if x != nil && x.TitleHide != nil {
		return *x.TitleHide
	}
	return false
}

func (x *Poster) GetNid() string {
	if x != nil && x.Nid != nil {
		return *x.Nid
	}
	return ""
}

type Definition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value       *string `protobuf:"bytes,1,opt,name=value,proto3,oneof" json:"value,omitempty"`
	ShortName   *string `protobuf:"bytes,2,opt,name=short_name,json=shortName,proto3,oneof" json:"short_name,omitempty"`
	LongName    *string `protobuf:"bytes,3,opt,name=long_name,json=longName,proto3,oneof" json:"long_name,omitempty"`
	RequiresVip *bool   `protobuf:"varint,4,opt,name=requires_vip,json=requiresVip,proto3,oneof" json:"requires_vip,omitempty"`
}

func (x *Definition) Reset() {
	*x = Definition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_basic_data_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Definition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Definition) ProtoMessage() {}

func (x *Definition) ProtoReflect() protoreflect.Message {
	mi := &file_basic_data_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Definition.ProtoReflect.Descriptor instead.
func (*Definition) Descriptor() ([]byte, []int) {
	return file_basic_data_proto_rawDescGZIP(), []int{6}
}

func (x *Definition) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

func (x *Definition) GetShortName() string {
	if x != nil && x.ShortName != nil {
		return *x.ShortName
	}
	return ""
}

func (x *Definition) GetLongName() string {
	if x != nil && x.LongName != nil {
		return *x.LongName
	}
	return ""
}

func (x *Definition) GetRequiresVip() bool {
	if x != nil && x.RequiresVip != nil {
		return *x.RequiresVip
	}
	return false
}

type VideoItemData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vid                 *string             `protobuf:"bytes,1,opt,name=vid,proto3,oneof" json:"vid,omitempty"`
	PaymentType         *VideoPaymentType   `protobuf:"varint,2,opt,name=payment_type,json=paymentType,proto3,enum=QQTV.VideoPaymentType,oneof" json:"payment_type,omitempty"`
	Poster              *Poster             `protobuf:"bytes,3,opt,name=poster,proto3,oneof" json:"poster,omitempty"`
	SkipStart           *int32              `protobuf:"varint,4,opt,name=skip_start,json=skipStart,proto3,oneof" json:"skip_start,omitempty"`
	SkipEnd             *int32              `protobuf:"varint,5,opt,name=skip_end,json=skipEnd,proto3,oneof" json:"skip_end,omitempty"`
	Action              *Action             `protobuf:"bytes,6,opt,name=action,proto3,oneof" json:"action,omitempty"`
	Title               *string             `protobuf:"bytes,7,opt,name=title,proto3,oneof" json:"title,omitempty"`
	PlayCopyrightType   *VideoCopyrightType `protobuf:"varint,8,opt,name=play_copyright_type,json=playCopyrightType,proto3,enum=QQTV.VideoCopyrightType,oneof" json:"play_copyright_type,omitempty"`
	WatchRecordPoster   *Poster             `protobuf:"bytes,9,opt,name=watch_record_poster,json=watchRecordPoster,proto3,oneof" json:"watch_record_poster,omitempty"`
	ShareData           *ShareItem          `protobuf:"bytes,10,opt,name=share_data,json=shareData,proto3,oneof" json:"share_data,omitempty"`
	NextPlayKey         *string             `protobuf:"bytes,11,opt,name=next_play_key,json=nextPlayKey,proto3,oneof" json:"next_play_key,omitempty"`
	TryWatchDuration    *int32              `protobuf:"varint,12,opt,name=try_watch_duration,json=tryWatchDuration,proto3,oneof" json:"try_watch_duration,omitempty"`
	Cid                 *string             `protobuf:"bytes,13,opt,name=cid,proto3,oneof" json:"cid,omitempty"`
	PayPreview          *bool               `protobuf:"varint,14,opt,name=pay_preview,json=payPreview,proto3,oneof" json:"pay_preview,omitempty"`
	StreamRatio         *float32            `protobuf:"fixed32,15,opt,name=stream_ratio,json=streamRatio,proto3,oneof" json:"stream_ratio,omitempty"`
	NotRecordHistory    *bool               `protobuf:"varint,16,opt,name=not_record_history,json=notRecordHistory,proto3,oneof" json:"not_record_history,omitempty"`
	DisableExternalPlay *bool               `protobuf:"varint,17,opt,name=disable_external_play,json=disableExternalPlay,proto3,oneof" json:"disable_external_play,omitempty"`
	EpisodeId           *int32              `protobuf:"varint,18,opt,name=episode_id,json=episodeId,proto3,oneof" json:"episode_id,omitempty"`
	IsDrm               *bool               `protobuf:"varint,19,opt,name=is_drm,json=isDrm,proto3,oneof" json:"is_drm,omitempty"`
	PublishTime         *int64              `protobuf:"varint,20,opt,name=publish_time,json=publishTime,proto3,oneof" json:"publish_time,omitempty"`
	PlayCount           *int64              `protobuf:"varint,21,opt,name=play_count,json=playCount,proto3,oneof" json:"play_count,omitempty"`
	Duration            *int64              `protobuf:"varint,22,opt,name=duration,proto3,oneof" json:"duration,omitempty"`
	VidType             *int32              `protobuf:"varint,23,opt,name=vid_type,json=vidType,proto3,oneof" json:"vid_type,omitempty"`
	Status              *int32              `protobuf:"varint,24,opt,name=status,proto3,oneof" json:"status,omitempty"`
	AutoPlayType        *int32              `protobuf:"varint,25,opt,name=auto_play_type,json=autoPlayType,proto3,oneof" json:"auto_play_type,omitempty"`
	AgeLimit            *int32              `protobuf:"varint,26,opt,name=age_limit,json=ageLimit,proto3,oneof" json:"age_limit,omitempty"`
	EpisodeIdText       *string             `protobuf:"bytes,27,opt,name=episode_id_text,json=episodeIdText,proto3,oneof" json:"episode_id_text,omitempty"`
}

func (x *VideoItemData) Reset() {
	*x = VideoItemData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_basic_data_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoItemData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoItemData) ProtoMessage() {}

func (x *VideoItemData) ProtoReflect() protoreflect.Message {
	mi := &file_basic_data_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoItemData.ProtoReflect.Descriptor instead.
func (*VideoItemData) Descriptor() ([]byte, []int) {
	return file_basic_data_proto_rawDescGZIP(), []int{7}
}

func (x *VideoItemData) GetVid() string {
	if x != nil && x.Vid != nil {
		return *x.Vid
	}
	return ""
}

func (x *VideoItemData) GetPaymentType() VideoPaymentType {
	if x != nil && x.PaymentType != nil {
		return *x.PaymentType
	}
	return VideoPaymentType_UNKNOWN
}

func (x *VideoItemData) GetPoster() *Poster {
	if x != nil {
		return x.Poster
	}
	return nil
}

func (x *VideoItemData) GetSkipStart() int32 {
	if x != nil && x.SkipStart != nil {
		return *x.SkipStart
	}
	return 0
}

func (x *VideoItemData) GetSkipEnd() int32 {
	if x != nil && x.SkipEnd != nil {
		return *x.SkipEnd
	}
	return 0
}

func (x *VideoItemData) GetAction() *Action {
	if x != nil {
		return x.Action
	}
	return nil
}

func (x *VideoItemData) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *VideoItemData) GetPlayCopyrightType() VideoCopyrightType {
	if x != nil && x.PlayCopyrightType != nil {
		return *x.PlayCopyrightType
	}
	return VideoCopyrightType_PLAY_IN_WEBVIEW
}

func (x *VideoItemData) GetWatchRecordPoster() *Poster {
	if x != nil {
		return x.WatchRecordPoster
	}
	return nil
}

func (x *VideoItemData) GetShareData() *ShareItem {
	if x != nil {
		return x.ShareData
	}
	return nil
}

func (x *VideoItemData) GetNextPlayKey() string {
	if x != nil && x.NextPlayKey != nil {
		return *x.NextPlayKey
	}
	return ""
}

func (x *VideoItemData) GetTryWatchDuration() int32 {
	if x != nil && x.TryWatchDuration != nil {
		return *x.TryWatchDuration
	}
	return 0
}

func (x *VideoItemData) GetCid() string {
	if x != nil && x.Cid != nil {
		return *x.Cid
	}
	return ""
}

func (x *VideoItemData) GetPayPreview() bool {
	if x != nil && x.PayPreview != nil {
		return *x.PayPreview
	}
	return false
}

func (x *VideoItemData) GetStreamRatio() float32 {
	if x != nil && x.StreamRatio != nil {
		return *x.StreamRatio
	}
	return 0
}

func (x *VideoItemData) GetNotRecordHistory() bool {
	if x != nil && x.NotRecordHistory != nil {
		return *x.NotRecordHistory
	}
	return false
}

func (x *VideoItemData) GetDisableExternalPlay() bool {
	if x != nil && x.DisableExternalPlay != nil {
		return *x.DisableExternalPlay
	}
	return false
}

func (x *VideoItemData) GetEpisodeId() int32 {
	if x != nil && x.EpisodeId != nil {
		return *x.EpisodeId
	}
	return 0
}

func (x *VideoItemData) GetIsDrm() bool {
	if x != nil && x.IsDrm != nil {
		return *x.IsDrm
	}
	return false
}

func (x *VideoItemData) GetPublishTime() int64 {
	if x != nil && x.PublishTime != nil {
		return *x.PublishTime
	}
	return 0
}

func (x *VideoItemData) GetPlayCount() int64 {
	if x != nil && x.PlayCount != nil {
		return *x.PlayCount
	}
	return 0
}

func (x *VideoItemData) GetDuration() int64 {
	if x != nil && x.Duration != nil {
		return *x.Duration
	}
	return 0
}

func (x *VideoItemData) GetVidType() int32 {
	if x != nil && x.VidType != nil {
		return *x.VidType
	}
	return 0
}

func (x *VideoItemData) GetStatus() int32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *VideoItemData) GetAutoPlayType() int32 {
	if x != nil && x.AutoPlayType != nil {
		return *x.AutoPlayType
	}
	return 0
}

func (x *VideoItemData) GetAgeLimit() int32 {
	if x != nil && x.AgeLimit != nil {
		return *x.AgeLimit
	}
	return 0
}

func (x *VideoItemData) GetEpisodeIdText() string {
	if x != nil && x.EpisodeIdText != nil {
		return *x.EpisodeIdText
	}
	return ""
}

type UserInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vuid          *string `protobuf:"bytes,1,opt,name=vuid,proto3,oneof" json:"vuid,omitempty"`
	Nick          *string `protobuf:"bytes,2,opt,name=nick,proto3,oneof" json:"nick,omitempty"`
	Avatar        *string `protobuf:"bytes,3,opt,name=avatar,proto3,oneof" json:"avatar,omitempty"`
	LikeCount     *uint64 `protobuf:"varint,4,opt,name=like_count,json=likeCount,proto3,oneof" json:"like_count,omitempty"`
	VideoCount    *uint64 `protobuf:"varint,5,opt,name=video_count,json=videoCount,proto3,oneof" json:"video_count,omitempty"`
	FollowerCount *uint64 `protobuf:"varint,6,opt,name=follower_count,json=followerCount,proto3,oneof" json:"follower_count,omitempty"`
	FollowState   *int32  `protobuf:"varint,7,opt,name=follow_state,json=followState,proto3,oneof" json:"follow_state,omitempty"`
	Gender        *int32  `protobuf:"varint,8,opt,name=gender,proto3,oneof" json:"gender,omitempty"`
	Birthday      *string `protobuf:"bytes,9,opt,name=birthday,proto3,oneof" json:"birthday,omitempty"`
	Introduction  *string `protobuf:"bytes,10,opt,name=introduction,proto3,oneof" json:"introduction,omitempty"`
	Email         *string `protobuf:"bytes,11,opt,name=email,proto3,oneof" json:"email,omitempty"`
}

func (x *UserInfo) Reset() {
	*x = UserInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_basic_data_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInfo) ProtoMessage() {}

func (x *UserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_basic_data_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInfo.ProtoReflect.Descriptor instead.
func (*UserInfo) Descriptor() ([]byte, []int) {
	return file_basic_data_proto_rawDescGZIP(), []int{8}
}

func (x *UserInfo) GetVuid() string {
	if x != nil && x.Vuid != nil {
		return *x.Vuid
	}
	return ""
}

func (x *UserInfo) GetNick() string {
	if x != nil && x.Nick != nil {
		return *x.Nick
	}
	return ""
}

func (x *UserInfo) GetAvatar() string {
	if x != nil && x.Avatar != nil {
		return *x.Avatar
	}
	return ""
}

func (x *UserInfo) GetLikeCount() uint64 {
	if x != nil && x.LikeCount != nil {
		return *x.LikeCount
	}
	return 0
}

func (x *UserInfo) GetVideoCount() uint64 {
	if x != nil && x.VideoCount != nil {
		return *x.VideoCount
	}
	return 0
}

func (x *UserInfo) GetFollowerCount() uint64 {
	if x != nil && x.FollowerCount != nil {
		return *x.FollowerCount
	}
	return 0
}

func (x *UserInfo) GetFollowState() int32 {
	if x != nil && x.FollowState != nil {
		return *x.FollowState
	}
	return 0
}

func (x *UserInfo) GetGender() int32 {
	if x != nil && x.Gender != nil {
		return *x.Gender
	}
	return 0
}

func (x *UserInfo) GetBirthday() string {
	if x != nil && x.Birthday != nil {
		return *x.Birthday
	}
	return ""
}

func (x *UserInfo) GetIntroduction() string {
	if x != nil && x.Introduction != nil {
		return *x.Introduction
	}
	return ""
}

func (x *UserInfo) GetEmail() string {
	if x != nil && x.Email != nil {
		return *x.Email
	}
	return ""
}

type ShortVideoPoster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vid       *string    `protobuf:"bytes,1,opt,name=vid,proto3,oneof" json:"vid,omitempty"`
	Cid       *string    `protobuf:"bytes,2,opt,name=cid,proto3,oneof" json:"cid,omitempty"`
	Poster    *Poster    `protobuf:"bytes,3,opt,name=poster,proto3,oneof" json:"poster,omitempty"`
	Action    *Action    `protobuf:"bytes,4,opt,name=action,proto3,oneof" json:"action,omitempty"`
	UserInfo  *UserInfo  `protobuf:"bytes,5,opt,name=user_info,json=userInfo,proto3,oneof" json:"user_info,omitempty"`
	ShareItem *ShareItem `protobuf:"bytes,6,opt,name=share_item,json=shareItem,proto3,oneof" json:"share_item,omitempty"`
	PlayCount *uint64    `protobuf:"varint,7,opt,name=play_count,json=playCount,proto3,oneof" json:"play_count,omitempty"`
	Duration  *int32     `protobuf:"varint,8,opt,name=duration,proto3,oneof" json:"duration,omitempty"`
	IsOpen    *bool      `protobuf:"varint,9,opt,name=is_open,json=isOpen,proto3,oneof" json:"is_open,omitempty"`
	IsWatched *bool      `protobuf:"varint,10,opt,name=is_watched,json=isWatched,proto3,oneof" json:"is_watched,omitempty"`
}

func (x *ShortVideoPoster) Reset() {
	*x = ShortVideoPoster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_basic_data_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShortVideoPoster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShortVideoPoster) ProtoMessage() {}

func (x *ShortVideoPoster) ProtoReflect() protoreflect.Message {
	mi := &file_basic_data_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShortVideoPoster.ProtoReflect.Descriptor instead.
func (*ShortVideoPoster) Descriptor() ([]byte, []int) {
	return file_basic_data_proto_rawDescGZIP(), []int{9}
}

func (x *ShortVideoPoster) GetVid() string {
	if x != nil && x.Vid != nil {
		return *x.Vid
	}
	return ""
}

func (x *ShortVideoPoster) GetCid() string {
	if x != nil && x.Cid != nil {
		return *x.Cid
	}
	return ""
}

func (x *ShortVideoPoster) GetPoster() *Poster {
	if x != nil {
		return x.Poster
	}
	return nil
}

func (x *ShortVideoPoster) GetAction() *Action {
	if x != nil {
		return x.Action
	}
	return nil
}

func (x *ShortVideoPoster) GetUserInfo() *UserInfo {
	if x != nil {
		return x.UserInfo
	}
	return nil
}

func (x *ShortVideoPoster) GetShareItem() *ShareItem {
	if x != nil {
		return x.ShareItem
	}
	return nil
}

func (x *ShortVideoPoster) GetPlayCount() uint64 {
	if x != nil && x.PlayCount != nil {
		return *x.PlayCount
	}
	return 0
}

func (x *ShortVideoPoster) GetDuration() int32 {
	if x != nil && x.Duration != nil {
		return *x.Duration
	}
	return 0
}

func (x *ShortVideoPoster) GetIsOpen() bool {
	if x != nil && x.IsOpen != nil {
		return *x.IsOpen
	}
	return false
}

func (x *ShortVideoPoster) GetIsWatched() bool {
	if x != nil && x.IsWatched != nil {
		return *x.IsWatched
	}
	return false
}

type ABTestConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestId   *string                     `protobuf:"bytes,1,opt,name=test_id,json=testId,proto3,oneof" json:"test_id,omitempty"`
	MapParam []*ABTestConf_MapParamEntry `protobuf:"bytes,2,rep,name=map_param,json=mapParam,proto3" json:"map_param,omitempty"`
}

func (x *ABTestConf) Reset() {
	*x = ABTestConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_basic_data_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ABTestConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ABTestConf) ProtoMessage() {}

func (x *ABTestConf) ProtoReflect() protoreflect.Message {
	mi := &file_basic_data_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ABTestConf.ProtoReflect.Descriptor instead.
func (*ABTestConf) Descriptor() ([]byte, []int) {
	return file_basic_data_proto_rawDescGZIP(), []int{10}
}

func (x *ABTestConf) GetTestId() string {
	if x != nil && x.TestId != nil {
		return *x.TestId
	}
	return ""
}

func (x *ABTestConf) GetMapParam() []*ABTestConf_MapParamEntry {
	if x != nil {
		return x.MapParam
	}
	return nil
}

type ABTestList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReportIds *string       `protobuf:"bytes,1,opt,name=report_ids,json=reportIds,proto3,oneof" json:"report_ids,omitempty"`
	TestList  []*ABTestConf `protobuf:"bytes,2,rep,name=test_list,json=testList,proto3" json:"test_list,omitempty"`
}

func (x *ABTestList) Reset() {
	*x = ABTestList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_basic_data_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ABTestList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ABTestList) ProtoMessage() {}

func (x *ABTestList) ProtoReflect() protoreflect.Message {
	mi := &file_basic_data_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ABTestList.ProtoReflect.Descriptor instead.
func (*ABTestList) Descriptor() ([]byte, []int) {
	return file_basic_data_proto_rawDescGZIP(), []int{11}
}

func (x *ABTestList) GetReportIds() string {
	if x != nil && x.ReportIds != nil {
		return *x.ReportIds
	}
	return ""
}

func (x *ABTestList) GetTestList() []*ABTestConf {
	if x != nil {
		return x.TestList
	}
	return nil
}

type PlayCalender struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url    *string `protobuf:"bytes,1,opt,name=url,proto3,oneof" json:"url,omitempty"`
	ImgUrl *string `protobuf:"bytes,2,opt,name=img_url,json=imgUrl,proto3,oneof" json:"img_url,omitempty"`
}

func (x *PlayCalender) Reset() {
	*x = PlayCalender{}
	if protoimpl.UnsafeEnabled {
		mi := &file_basic_data_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayCalender) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayCalender) ProtoMessage() {}

func (x *PlayCalender) ProtoReflect() protoreflect.Message {
	mi := &file_basic_data_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayCalender.ProtoReflect.Descriptor instead.
func (*PlayCalender) Descriptor() ([]byte, []int) {
	return file_basic_data_proto_rawDescGZIP(), []int{12}
}

func (x *PlayCalender) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *PlayCalender) GetImgUrl() string {
	if x != nil && x.ImgUrl != nil {
		return *x.ImgUrl
	}
	return ""
}

type CPInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vuid          *int64  `protobuf:"varint,1,opt,name=vuid,proto3,oneof" json:"vuid,omitempty"`
	Nick          *string `protobuf:"bytes,2,opt,name=nick,proto3,oneof" json:"nick,omitempty"`
	Avatar        *string `protobuf:"bytes,3,opt,name=avatar,proto3,oneof" json:"avatar,omitempty"`
	Likecount     *int32  `protobuf:"varint,4,opt,name=likecount,proto3,oneof" json:"likecount,omitempty"`
	Videocount    *int32  `protobuf:"varint,5,opt,name=videocount,proto3,oneof" json:"videocount,omitempty"`
	Followercount *int32  `protobuf:"varint,6,opt,name=followercount,proto3,oneof" json:"followercount,omitempty"`
	Followstate   *int32  `protobuf:"varint,7,opt,name=followstate,proto3,oneof" json:"followstate,omitempty"`
	Gender        *Gender `protobuf:"varint,8,opt,name=gender,proto3,enum=QQTV.Gender,oneof" json:"gender,omitempty"`
	Birthday      *string `protobuf:"bytes,9,opt,name=birthday,proto3,oneof" json:"birthday,omitempty"`
	Introduction  *string `protobuf:"bytes,10,opt,name=introduction,proto3,oneof" json:"introduction,omitempty"`
	Email         *string `protobuf:"bytes,11,opt,name=email,proto3,oneof" json:"email,omitempty"`
}

func (x *CPInfo) Reset() {
	*x = CPInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_basic_data_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPInfo) ProtoMessage() {}

func (x *CPInfo) ProtoReflect() protoreflect.Message {
	mi := &file_basic_data_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPInfo.ProtoReflect.Descriptor instead.
func (*CPInfo) Descriptor() ([]byte, []int) {
	return file_basic_data_proto_rawDescGZIP(), []int{13}
}

func (x *CPInfo) GetVuid() int64 {
	if x != nil && x.Vuid != nil {
		return *x.Vuid
	}
	return 0
}

func (x *CPInfo) GetNick() string {
	if x != nil && x.Nick != nil {
		return *x.Nick
	}
	return ""
}

func (x *CPInfo) GetAvatar() string {
	if x != nil && x.Avatar != nil {
		return *x.Avatar
	}
	return ""
}

func (x *CPInfo) GetLikecount() int32 {
	if x != nil && x.Likecount != nil {
		return *x.Likecount
	}
	return 0
}

func (x *CPInfo) GetVideocount() int32 {
	if x != nil && x.Videocount != nil {
		return *x.Videocount
	}
	return 0
}

func (x *CPInfo) GetFollowercount() int32 {
	if x != nil && x.Followercount != nil {
		return *x.Followercount
	}
	return 0
}

func (x *CPInfo) GetFollowstate() int32 {
	if x != nil && x.Followstate != nil {
		return *x.Followstate
	}
	return 0
}

func (x *CPInfo) GetGender() Gender {
	if x != nil && x.Gender != nil {
		return *x.Gender
	}
	return Gender_GENDER_MALE
}

func (x *CPInfo) GetBirthday() string {
	if x != nil && x.Birthday != nil {
		return *x.Birthday
	}
	return ""
}

func (x *CPInfo) GetIntroduction() string {
	if x != nil && x.Introduction != nil {
		return *x.Introduction
	}
	return ""
}

func (x *CPInfo) GetEmail() string {
	if x != nil && x.Email != nil {
		return *x.Email
	}
	return ""
}

type ExperimentInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExperimentId *string `protobuf:"bytes,1,opt,name=experiment_id,json=experimentId,proto3,oneof" json:"experiment_id,omitempty"`
}

func (x *ExperimentInfo) Reset() {
	*x = ExperimentInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_basic_data_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExperimentInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExperimentInfo) ProtoMessage() {}

func (x *ExperimentInfo) ProtoReflect() protoreflect.Message {
	mi := &file_basic_data_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExperimentInfo.ProtoReflect.Descriptor instead.
func (*ExperimentInfo) Descriptor() ([]byte, []int) {
	return file_basic_data_proto_rawDescGZIP(), []int{14}
}

func (x *ExperimentInfo) GetExperimentId() string {
	if x != nil && x.ExperimentId != nil {
		return *x.ExperimentId
	}
	return ""
}

type RankInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rank         *int32   `protobuf:"varint,1,opt,name=rank,proto3,oneof" json:"rank,omitempty"`
	Score        *float32 `protobuf:"fixed32,2,opt,name=score,proto3,oneof" json:"score,omitempty"`
	Introduction *string  `protobuf:"bytes,3,opt,name=introduction,proto3,oneof" json:"introduction,omitempty"`
	Category     *string  `protobuf:"bytes,4,opt,name=category,proto3,oneof" json:"category,omitempty"`
}

func (x *RankInfo) Reset() {
	*x = RankInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_basic_data_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RankInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RankInfo) ProtoMessage() {}

func (x *RankInfo) ProtoReflect() protoreflect.Message {
	mi := &file_basic_data_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RankInfo.ProtoReflect.Descriptor instead.
func (*RankInfo) Descriptor() ([]byte, []int) {
	return file_basic_data_proto_rawDescGZIP(), []int{15}
}

func (x *RankInfo) GetRank() int32 {
	if x != nil && x.Rank != nil {
		return *x.Rank
	}
	return 0
}

func (x *RankInfo) GetScore() float32 {
	if x != nil && x.Score != nil {
		return *x.Score
	}
	return 0
}

func (x *RankInfo) GetIntroduction() string {
	if x != nil && x.Introduction != nil {
		return *x.Introduction
	}
	return ""
}

func (x *RankInfo) GetCategory() string {
	if x != nil && x.Category != nil {
		return *x.Category
	}
	return ""
}

type RankPoster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Poster   *Poster   `protobuf:"bytes,1,opt,name=poster,proto3,oneof" json:"poster,omitempty"`
	RankInfo *RankInfo `protobuf:"bytes,2,opt,name=rank_info,json=rankInfo,proto3,oneof" json:"rank_info,omitempty"`
}

func (x *RankPoster) Reset() {
	*x = RankPoster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_basic_data_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RankPoster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RankPoster) ProtoMessage() {}

func (x *RankPoster) ProtoReflect() protoreflect.Message {
	mi := &file_basic_data_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RankPoster.ProtoReflect.Descriptor instead.
func (*RankPoster) Descriptor() ([]byte, []int) {
	return file_basic_data_proto_rawDescGZIP(), []int{16}
}

func (x *RankPoster) GetPoster() *Poster {
	if x != nil {
		return x.Poster
	}
	return nil
}

func (x *RankPoster) GetRankInfo() *RankInfo {
	if x != nil {
		return x.RankInfo
	}
	return nil
}

type SubInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subtitle    *string      `protobuf:"bytes,1,opt,name=subtitle,proto3,oneof" json:"subtitle,omitempty"`
	VideoOption *VideoOption `protobuf:"bytes,2,opt,name=video_option,json=videoOption,proto3,oneof" json:"video_option,omitempty"`
	LikeInfo    *LikeInfo    `protobuf:"bytes,3,opt,name=like_info,json=likeInfo,proto3,oneof" json:"like_info,omitempty"`
}

func (x *SubInfo) Reset() {
	*x = SubInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_basic_data_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubInfo) ProtoMessage() {}

func (x *SubInfo) ProtoReflect() protoreflect.Message {
	mi := &file_basic_data_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubInfo.ProtoReflect.Descriptor instead.
func (*SubInfo) Descriptor() ([]byte, []int) {
	return file_basic_data_proto_rawDescGZIP(), []int{17}
}

func (x *SubInfo) GetSubtitle() string {
	if x != nil && x.Subtitle != nil {
		return *x.Subtitle
	}
	return ""
}

func (x *SubInfo) GetVideoOption() *VideoOption {
	if x != nil {
		return x.VideoOption
	}
	return nil
}

func (x *SubInfo) GetLikeInfo() *LikeInfo {
	if x != nil {
		return x.LikeInfo
	}
	return nil
}

type VideoOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WatchedNumber *int64 `protobuf:"varint,1,opt,name=watched_number,json=watchedNumber,proto3,oneof" json:"watched_number,omitempty"`
	DanmuNumber   *int64 `protobuf:"varint,2,opt,name=danmu_number,json=danmuNumber,proto3,oneof" json:"danmu_number,omitempty"`
	Duration      *int64 `protobuf:"varint,3,opt,name=duration,proto3,oneof" json:"duration,omitempty"`
	CreateTime    *int64 `protobuf:"varint,4,opt,name=create_time,json=createTime,proto3,oneof" json:"create_time,omitempty"`
	LikeNumber    *int64 `protobuf:"varint,5,opt,name=like_number,json=likeNumber,proto3,oneof" json:"like_number,omitempty"`
}

func (x *VideoOption) Reset() {
	*x = VideoOption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_basic_data_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoOption) ProtoMessage() {}

func (x *VideoOption) ProtoReflect() protoreflect.Message {
	mi := &file_basic_data_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoOption.ProtoReflect.Descriptor instead.
func (*VideoOption) Descriptor() ([]byte, []int) {
	return file_basic_data_proto_rawDescGZIP(), []int{18}
}

func (x *VideoOption) GetWatchedNumber() int64 {
	if x != nil && x.WatchedNumber != nil {
		return *x.WatchedNumber
	}
	return 0
}

func (x *VideoOption) GetDanmuNumber() int64 {
	if x != nil && x.DanmuNumber != nil {
		return *x.DanmuNumber
	}
	return 0
}

func (x *VideoOption) GetDuration() int64 {
	if x != nil && x.Duration != nil {
		return *x.Duration
	}
	return 0
}

func (x *VideoOption) GetCreateTime() int64 {
	if x != nil && x.CreateTime != nil {
		return *x.CreateTime
	}
	return 0
}

func (x *VideoOption) GetLikeNumber() int64 {
	if x != nil && x.LikeNumber != nil {
		return *x.LikeNumber
	}
	return 0
}

type VoteInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SupportCount  *int64  `protobuf:"varint,1,opt,name=support_count,json=supportCount,proto3,oneof" json:"support_count,omitempty"`
	ActorId       *string `protobuf:"bytes,2,opt,name=actor_id,json=actorId,proto3,oneof" json:"actor_id,omitempty"`
	GroupId       *string `protobuf:"bytes,3,opt,name=group_id,json=groupId,proto3,oneof" json:"group_id,omitempty"`
	Action        *Action `protobuf:"bytes,4,opt,name=action,proto3,oneof" json:"action,omitempty"`
	ButtonContent *string `protobuf:"bytes,5,opt,name=button_content,json=buttonContent,proto3,oneof" json:"button_content,omitempty"`
}

func (x *VoteInfo) Reset() {
	*x = VoteInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_basic_data_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VoteInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoteInfo) ProtoMessage() {}

func (x *VoteInfo) ProtoReflect() protoreflect.Message {
	mi := &file_basic_data_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoteInfo.ProtoReflect.Descriptor instead.
func (*VoteInfo) Descriptor() ([]byte, []int) {
	return file_basic_data_proto_rawDescGZIP(), []int{19}
}

func (x *VoteInfo) GetSupportCount() int64 {
	if x != nil && x.SupportCount != nil {
		return *x.SupportCount
	}
	return 0
}

func (x *VoteInfo) GetActorId() string {
	if x != nil && x.ActorId != nil {
		return *x.ActorId
	}
	return ""
}

func (x *VoteInfo) GetGroupId() string {
	if x != nil && x.GroupId != nil {
		return *x.GroupId
	}
	return ""
}

func (x *VoteInfo) GetAction() *Action {
	if x != nil {
		return x.Action
	}
	return nil
}

func (x *VoteInfo) GetButtonContent() string {
	if x != nil && x.ButtonContent != nil {
		return *x.ButtonContent
	}
	return ""
}

type ActorInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActorName    *string   `protobuf:"bytes,1,opt,name=actor_name,json=actorName,proto3,oneof" json:"actor_name,omitempty"`
	ActorId      *string   `protobuf:"bytes,2,opt,name=actor_id,json=actorId,proto3,oneof" json:"actor_id,omitempty"`
	FaceImageUrl *string   `protobuf:"bytes,3,opt,name=face_image_url,json=faceImageUrl,proto3,oneof" json:"face_image_url,omitempty"`
	Action       *Action   `protobuf:"bytes,4,opt,name=action,proto3,oneof" json:"action,omitempty"`
	VoteInfo     *VoteInfo `protobuf:"bytes,5,opt,name=vote_info,json=voteInfo,proto3,oneof" json:"vote_info,omitempty"`
}

func (x *ActorInfo) Reset() {
	*x = ActorInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_basic_data_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActorInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActorInfo) ProtoMessage() {}

func (x *ActorInfo) ProtoReflect() protoreflect.Message {
	mi := &file_basic_data_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActorInfo.ProtoReflect.Descriptor instead.
func (*ActorInfo) Descriptor() ([]byte, []int) {
	return file_basic_data_proto_rawDescGZIP(), []int{20}
}

func (x *ActorInfo) GetActorName() string {
	if x != nil && x.ActorName != nil {
		return *x.ActorName
	}
	return ""
}

func (x *ActorInfo) GetActorId() string {
	if x != nil && x.ActorId != nil {
		return *x.ActorId
	}
	return ""
}

func (x *ActorInfo) GetFaceImageUrl() string {
	if x != nil && x.FaceImageUrl != nil {
		return *x.FaceImageUrl
	}
	return ""
}

func (x *ActorInfo) GetAction() *Action {
	if x != nil {
		return x.Action
	}
	return nil
}

func (x *ActorInfo) GetVoteInfo() *VoteInfo {
	if x != nil {
		return x.VoteInfo
	}
	return nil
}

type ActorList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title         *string      `protobuf:"bytes,1,opt,name=title,proto3,oneof" json:"title,omitempty"`
	ActorInfoList []*ActorInfo `protobuf:"bytes,2,rep,name=actor_info_list,json=actorInfoList,proto3" json:"actor_info_list,omitempty"`
	PageContext   *string      `protobuf:"bytes,3,opt,name=page_context,json=pageContext,proto3,oneof" json:"page_context,omitempty"`
}

func (x *ActorList) Reset() {
	*x = ActorList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_basic_data_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActorList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActorList) ProtoMessage() {}

func (x *ActorList) ProtoReflect() protoreflect.Message {
	mi := &file_basic_data_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActorList.ProtoReflect.Descriptor instead.
func (*ActorList) Descriptor() ([]byte, []int) {
	return file_basic_data_proto_rawDescGZIP(), []int{21}
}

func (x *ActorList) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *ActorList) GetActorInfoList() []*ActorInfo {
	if x != nil {
		return x.ActorInfoList
	}
	return nil
}

func (x *ActorList) GetPageContext() string {
	if x != nil && x.PageContext != nil {
		return *x.PageContext
	}
	return ""
}

type SeasonInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title          *string         `protobuf:"bytes,1,opt,name=title,proto3,oneof" json:"title,omitempty"`
	Cid            *string         `protobuf:"bytes,2,opt,name=cid,proto3,oneof" json:"cid,omitempty"`
	NextPageInfo   *NextPageInfo   `protobuf:"bytes,3,opt,name=next_page_info,json=nextPageInfo,proto3,oneof" json:"next_page_info,omitempty"`
	PlayCalender   *PlayCalender   `protobuf:"bytes,4,opt,name=play_calender,json=playCalender,proto3,oneof" json:"play_calender,omitempty"`
	PlayListUiType *PlayListUiType `protobuf:"varint,5,opt,name=play_list_ui_type,json=playListUiType,proto3,enum=QQTV.PlayListUiType,oneof" json:"play_list_ui_type,omitempty"`
	DetailInfo     *string         `protobuf:"bytes,6,opt,name=detail_info,json=detailInfo,proto3,oneof" json:"detail_info,omitempty"`
}

func (x *SeasonInfo) Reset() {
	*x = SeasonInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_basic_data_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SeasonInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeasonInfo) ProtoMessage() {}

func (x *SeasonInfo) ProtoReflect() protoreflect.Message {
	mi := &file_basic_data_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeasonInfo.ProtoReflect.Descriptor instead.
func (*SeasonInfo) Descriptor() ([]byte, []int) {
	return file_basic_data_proto_rawDescGZIP(), []int{22}
}

func (x *SeasonInfo) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *SeasonInfo) GetCid() string {
	if x != nil && x.Cid != nil {
		return *x.Cid
	}
	return ""
}

func (x *SeasonInfo) GetNextPageInfo() *NextPageInfo {
	if x != nil {
		return x.NextPageInfo
	}
	return nil
}

func (x *SeasonInfo) GetPlayCalender() *PlayCalender {
	if x != nil {
		return x.PlayCalender
	}
	return nil
}

func (x *SeasonInfo) GetPlayListUiType() PlayListUiType {
	if x != nil && x.PlayListUiType != nil {
		return *x.PlayListUiType
	}
	return PlayListUiType_PLAY_LSIT_TYPE_TEXT
}

func (x *SeasonInfo) GetDetailInfo() string {
	if x != nil && x.DetailInfo != nil {
		return *x.DetailInfo
	}
	return ""
}

type VideoDetailBasicInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vid              *string        `protobuf:"bytes,1,opt,name=vid,proto3,oneof" json:"vid,omitempty"`
	Cid              *string        `protobuf:"bytes,2,opt,name=cid,proto3,oneof" json:"cid,omitempty"`
	VideoType        *int32         `protobuf:"varint,3,opt,name=video_type,json=videoType,proto3,oneof" json:"video_type,omitempty"`
	PrimaryCategory  *int32         `protobuf:"varint,4,opt,name=primary_category,json=primaryCategory,proto3,oneof" json:"primary_category,omitempty"`
	AreaId           *int32         `protobuf:"varint,5,opt,name=area_id,json=areaId,proto3,oneof" json:"area_id,omitempty"`
	SeasonList       []*SeasonInfo  `protobuf:"bytes,6,rep,name=season_list,json=seasonList,proto3" json:"season_list,omitempty"`
	CurrentVideoData *VideoItemData `protobuf:"bytes,7,opt,name=current_video_data,json=currentVideoData,proto3,oneof" json:"current_video_data,omitempty"`
	FullEpisodeCount *int32         `protobuf:"varint,8,opt,name=full_episode_count,json=fullEpisodeCount,proto3,oneof" json:"full_episode_count,omitempty"`
	UpdateEpisode    *int32         `protobuf:"varint,9,opt,name=update_episode,json=updateEpisode,proto3,oneof" json:"update_episode,omitempty"`
	UpdateTime       *int64         `protobuf:"varint,10,opt,name=update_time,json=updateTime,proto3,oneof" json:"update_time,omitempty"`
	OnlineTime       *int64         `protobuf:"varint,11,opt,name=online_time,json=onlineTime,proto3,oneof" json:"online_time,omitempty"`
}

func (x *VideoDetailBasicInfo) Reset() {
	*x = VideoDetailBasicInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_basic_data_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoDetailBasicInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoDetailBasicInfo) ProtoMessage() {}

func (x *VideoDetailBasicInfo) ProtoReflect() protoreflect.Message {
	mi := &file_basic_data_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoDetailBasicInfo.ProtoReflect.Descriptor instead.
func (*VideoDetailBasicInfo) Descriptor() ([]byte, []int) {
	return file_basic_data_proto_rawDescGZIP(), []int{23}
}

func (x *VideoDetailBasicInfo) GetVid() string {
	if x != nil && x.Vid != nil {
		return *x.Vid
	}
	return ""
}

func (x *VideoDetailBasicInfo) GetCid() string {
	if x != nil && x.Cid != nil {
		return *x.Cid
	}
	return ""
}

func (x *VideoDetailBasicInfo) GetVideoType() int32 {
	if x != nil && x.VideoType != nil {
		return *x.VideoType
	}
	return 0
}

func (x *VideoDetailBasicInfo) GetPrimaryCategory() int32 {
	if x != nil && x.PrimaryCategory != nil {
		return *x.PrimaryCategory
	}
	return 0
}

func (x *VideoDetailBasicInfo) GetAreaId() int32 {
	if x != nil && x.AreaId != nil {
		return *x.AreaId
	}
	return 0
}

func (x *VideoDetailBasicInfo) GetSeasonList() []*SeasonInfo {
	if x != nil {
		return x.SeasonList
	}
	return nil
}

func (x *VideoDetailBasicInfo) GetCurrentVideoData() *VideoItemData {
	if x != nil {
		return x.CurrentVideoData
	}
	return nil
}

func (x *VideoDetailBasicInfo) GetFullEpisodeCount() int32 {
	if x != nil && x.FullEpisodeCount != nil {
		return *x.FullEpisodeCount
	}
	return 0
}

func (x *VideoDetailBasicInfo) GetUpdateEpisode() int32 {
	if x != nil && x.UpdateEpisode != nil {
		return *x.UpdateEpisode
	}
	return 0
}

func (x *VideoDetailBasicInfo) GetUpdateTime() int64 {
	if x != nil && x.UpdateTime != nil {
		return *x.UpdateTime
	}
	return 0
}

func (x *VideoDetailBasicInfo) GetOnlineTime() int64 {
	if x != nil && x.OnlineTime != nil {
		return *x.OnlineTime
	}
	return 0
}

type ToolbarItemInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsShow *bool `protobuf:"varint,1,opt,name=is_show,json=isShow,proto3,oneof" json:"is_show,omitempty"`
	Enable *bool `protobuf:"varint,2,opt,name=enable,proto3,oneof" json:"enable,omitempty"`
}

func (x *ToolbarItemInfo) Reset() {
	*x = ToolbarItemInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_basic_data_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ToolbarItemInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToolbarItemInfo) ProtoMessage() {}

func (x *ToolbarItemInfo) ProtoReflect() protoreflect.Message {
	mi := &file_basic_data_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToolbarItemInfo.ProtoReflect.Descriptor instead.
func (*ToolbarItemInfo) Descriptor() ([]byte, []int) {
	return file_basic_data_proto_rawDescGZIP(), []int{24}
}

func (x *ToolbarItemInfo) GetIsShow() bool {
	if x != nil && x.IsShow != nil {
		return *x.IsShow
	}
	return false
}

func (x *ToolbarItemInfo) GetEnable() bool {
	if x != nil && x.Enable != nil {
		return *x.Enable
	}
	return false
}

type WatchList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsShow    *bool `protobuf:"varint,1,opt,name=is_show,json=isShow,proto3,oneof" json:"is_show,omitempty"`
	IsWatched *bool `protobuf:"varint,2,opt,name=is_watched,json=isWatched,proto3,oneof" json:"is_watched,omitempty"`
}

func (x *WatchList) Reset() {
	*x = WatchList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_basic_data_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WatchList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchList) ProtoMessage() {}

func (x *WatchList) ProtoReflect() protoreflect.Message {
	mi := &file_basic_data_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchList.ProtoReflect.Descriptor instead.
func (*WatchList) Descriptor() ([]byte, []int) {
	return file_basic_data_proto_rawDescGZIP(), []int{25}
}

func (x *WatchList) GetIsShow() bool {
	if x != nil && x.IsShow != nil {
		return *x.IsShow
	}
	return false
}

func (x *WatchList) GetIsWatched() bool {
	if x != nil && x.IsWatched != nil {
		return *x.IsWatched
	}
	return false
}

type LikeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataKey      *string `protobuf:"bytes,1,opt,name=data_key,json=dataKey,proto3,oneof" json:"data_key,omitempty"`
	LikeCount    *int32  `protobuf:"varint,2,opt,name=like_count,json=likeCount,proto3,oneof" json:"like_count,omitempty"`
	LikeType     *int32  `protobuf:"varint,3,opt,name=like_type,json=likeType,proto3,oneof" json:"like_type,omitempty"`
	ReportKey    *string `protobuf:"bytes,4,opt,name=report_key,json=reportKey,proto3,oneof" json:"report_key,omitempty"`
	ReportParams *string `protobuf:"bytes,5,opt,name=report_params,json=reportParams,proto3,oneof" json:"report_params,omitempty"`
}

func (x *LikeInfo) Reset() {
	*x = LikeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_basic_data_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LikeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LikeInfo) ProtoMessage() {}

func (x *LikeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_basic_data_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LikeInfo.ProtoReflect.Descriptor instead.
func (*LikeInfo) Descriptor() ([]byte, []int) {
	return file_basic_data_proto_rawDescGZIP(), []int{26}
}

func (x *LikeInfo) GetDataKey() string {
	if x != nil && x.DataKey != nil {
		return *x.DataKey
	}
	return ""
}

func (x *LikeInfo) GetLikeCount() int32 {
	if x != nil && x.LikeCount != nil {
		return *x.LikeCount
	}
	return 0
}

func (x *LikeInfo) GetLikeType() int32 {
	if x != nil && x.LikeType != nil {
		return *x.LikeType
	}
	return 0
}

func (x *LikeInfo) GetReportKey() string {
	if x != nil && x.ReportKey != nil {
		return *x.ReportKey
	}
	return ""
}

func (x *LikeInfo) GetReportParams() string {
	if x != nil && x.ReportParams != nil {
		return *x.ReportParams
	}
	return ""
}

type NextPageInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataKey     *string `protobuf:"bytes,1,opt,name=data_key,json=dataKey,proto3,oneof" json:"data_key,omitempty"`
	PageContext *string `protobuf:"bytes,2,opt,name=page_context,json=pageContext,proto3,oneof" json:"page_context,omitempty"`
	HasNextPage *bool   `protobuf:"varint,3,opt,name=has_next_page,json=hasNextPage,proto3,oneof" json:"has_next_page,omitempty"`
}

func (x *NextPageInfo) Reset() {
	*x = NextPageInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_basic_data_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NextPageInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NextPageInfo) ProtoMessage() {}

func (x *NextPageInfo) ProtoReflect() protoreflect.Message {
	mi := &file_basic_data_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NextPageInfo.ProtoReflect.Descriptor instead.
func (*NextPageInfo) Descriptor() ([]byte, []int) {
	return file_basic_data_proto_rawDescGZIP(), []int{27}
}

func (x *NextPageInfo) GetDataKey() string {
	if x != nil && x.DataKey != nil {
		return *x.DataKey
	}
	return ""
}

func (x *NextPageInfo) GetPageContext() string {
	if x != nil && x.PageContext != nil {
		return *x.PageContext
	}
	return ""
}

func (x *NextPageInfo) GetHasNextPage() bool {
	if x != nil && x.HasNextPage != nil {
		return *x.HasNextPage
	}
	return false
}

type ColdTagItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       *string `protobuf:"bytes,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	Name     *string `protobuf:"bytes,2,opt,name=name,proto3,oneof" json:"name,omitempty"`
	ImageUrl *string `protobuf:"bytes,3,opt,name=image_url,json=imageUrl,proto3,oneof" json:"image_url,omitempty"`
}

func (x *ColdTagItem) Reset() {
	*x = ColdTagItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_basic_data_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ColdTagItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColdTagItem) ProtoMessage() {}

func (x *ColdTagItem) ProtoReflect() protoreflect.Message {
	mi := &file_basic_data_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColdTagItem.ProtoReflect.Descriptor instead.
func (*ColdTagItem) Descriptor() ([]byte, []int) {
	return file_basic_data_proto_rawDescGZIP(), []int{28}
}

func (x *ColdTagItem) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *ColdTagItem) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ColdTagItem) GetImageUrl() string {
	if x != nil && x.ImageUrl != nil {
		return *x.ImageUrl
	}
	return ""
}

type AlbumData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cid              *string      `protobuf:"bytes,1,opt,name=cid,proto3,oneof" json:"cid,omitempty"`
	Title            *string      `protobuf:"bytes,2,opt,name=title,proto3,oneof" json:"title,omitempty"`
	PicUrlVertical   *string      `protobuf:"bytes,3,opt,name=pic_url_vertical,json=picUrlVertical,proto3,oneof" json:"pic_url_vertical,omitempty"`
	PicUrlHorizental *string      `protobuf:"bytes,4,opt,name=pic_url_horizental,json=picUrlHorizental,proto3,oneof" json:"pic_url_horizental,omitempty"`
	Desc             *string      `protobuf:"bytes,5,opt,name=desc,proto3,oneof" json:"desc,omitempty"`
	UpdateTo         *int32       `protobuf:"varint,6,opt,name=update_to,json=updateTo,proto3,oneof" json:"update_to,omitempty"`
	ActorList        []*ActorInfo `protobuf:"bytes,7,rep,name=actor_list,json=actorList,proto3" json:"actor_list,omitempty"`
	TagLabelList     []*TagLabel  `protobuf:"bytes,8,rep,name=tag_label_list,json=tagLabelList,proto3" json:"tag_label_list,omitempty"`
	OnlineTime       *int64       `protobuf:"varint,9,opt,name=online_time,json=onlineTime,proto3,oneof" json:"online_time,omitempty"`
}

func (x *AlbumData) Reset() {
	*x = AlbumData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_basic_data_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlbumData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlbumData) ProtoMessage() {}

func (x *AlbumData) ProtoReflect() protoreflect.Message {
	mi := &file_basic_data_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlbumData.ProtoReflect.Descriptor instead.
func (*AlbumData) Descriptor() ([]byte, []int) {
	return file_basic_data_proto_rawDescGZIP(), []int{29}
}

func (x *AlbumData) GetCid() string {
	if x != nil && x.Cid != nil {
		return *x.Cid
	}
	return ""
}

func (x *AlbumData) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *AlbumData) GetPicUrlVertical() string {
	if x != nil && x.PicUrlVertical != nil {
		return *x.PicUrlVertical
	}
	return ""
}

func (x *AlbumData) GetPicUrlHorizental() string {
	if x != nil && x.PicUrlHorizental != nil {
		return *x.PicUrlHorizental
	}
	return ""
}

func (x *AlbumData) GetDesc() string {
	if x != nil && x.Desc != nil {
		return *x.Desc
	}
	return ""
}

func (x *AlbumData) GetUpdateTo() int32 {
	if x != nil && x.UpdateTo != nil {
		return *x.UpdateTo
	}
	return 0
}

func (x *AlbumData) GetActorList() []*ActorInfo {
	if x != nil {
		return x.ActorList
	}
	return nil
}

func (x *AlbumData) GetTagLabelList() []*TagLabel {
	if x != nil {
		return x.TagLabelList
	}
	return nil
}

func (x *AlbumData) GetOnlineTime() int64 {
	if x != nil && x.OnlineTime != nil {
		return *x.OnlineTime
	}
	return 0
}

type StateInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reserved  *bool `protobuf:"varint,1,opt,name=reserved,proto3,oneof" json:"reserved,omitempty"`
	Collected *bool `protobuf:"varint,2,opt,name=collected,proto3,oneof" json:"collected,omitempty"`
}

func (x *StateInfo) Reset() {
	*x = StateInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_basic_data_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StateInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StateInfo) ProtoMessage() {}

func (x *StateInfo) ProtoReflect() protoreflect.Message {
	mi := &file_basic_data_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StateInfo.ProtoReflect.Descriptor instead.
func (*StateInfo) Descriptor() ([]byte, []int) {
	return file_basic_data_proto_rawDescGZIP(), []int{30}
}

func (x *StateInfo) GetReserved() bool {
	if x != nil && x.Reserved != nil {
		return *x.Reserved
	}
	return false
}

func (x *StateInfo) GetCollected() bool {
	if x != nil && x.Collected != nil {
		return *x.Collected
	}
	return false
}

type AlbumDataInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AlbumData  *AlbumData  `protobuf:"bytes,1,opt,name=album_data,json=albumData,proto3,oneof" json:"album_data,omitempty"`
	StateInfo  *StateInfo  `protobuf:"bytes,2,opt,name=state_info,json=stateInfo,proto3,oneof" json:"state_info,omitempty"`
	Reportdata *ReportData `protobuf:"bytes,3,opt,name=reportdata,proto3,oneof" json:"reportdata,omitempty"`
}

func (x *AlbumDataInfo) Reset() {
	*x = AlbumDataInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_basic_data_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlbumDataInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlbumDataInfo) ProtoMessage() {}

func (x *AlbumDataInfo) ProtoReflect() protoreflect.Message {
	mi := &file_basic_data_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlbumDataInfo.ProtoReflect.Descriptor instead.
func (*AlbumDataInfo) Descriptor() ([]byte, []int) {
	return file_basic_data_proto_rawDescGZIP(), []int{31}
}

func (x *AlbumDataInfo) GetAlbumData() *AlbumData {
	if x != nil {
		return x.AlbumData
	}
	return nil
}

func (x *AlbumDataInfo) GetStateInfo() *StateInfo {
	if x != nil {
		return x.StateInfo
	}
	return nil
}

func (x *AlbumDataInfo) GetReportdata() *ReportData {
	if x != nil {
		return x.Reportdata
	}
	return nil
}

type ButtonMore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsShow *bool   `protobuf:"varint,1,opt,name=is_show,json=isShow,proto3,oneof" json:"is_show,omitempty"`
	Action *Action `protobuf:"bytes,2,opt,name=action,proto3,oneof" json:"action,omitempty"`
}

func (x *ButtonMore) Reset() {
	*x = ButtonMore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_basic_data_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ButtonMore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ButtonMore) ProtoMessage() {}

func (x *ButtonMore) ProtoReflect() protoreflect.Message {
	mi := &file_basic_data_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ButtonMore.ProtoReflect.Descriptor instead.
func (*ButtonMore) Descriptor() ([]byte, []int) {
	return file_basic_data_proto_rawDescGZIP(), []int{32}
}

func (x *ButtonMore) GetIsShow() bool {
	if x != nil && x.IsShow != nil {
		return *x.IsShow
	}
	return false
}

func (x *ButtonMore) GetAction() *Action {
	if x != nil {
		return x.Action
	}
	return nil
}

type TagLabel_FilterChoiceEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   *string `protobuf:"bytes,1,opt,name=key,proto3,oneof" json:"key,omitempty"`
	Value *string `protobuf:"bytes,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
}

func (x *TagLabel_FilterChoiceEntry) Reset() {
	*x = TagLabel_FilterChoiceEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_basic_data_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TagLabel_FilterChoiceEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagLabel_FilterChoiceEntry) ProtoMessage() {}

func (x *TagLabel_FilterChoiceEntry) ProtoReflect() protoreflect.Message {
	mi := &file_basic_data_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagLabel_FilterChoiceEntry.ProtoReflect.Descriptor instead.
func (*TagLabel_FilterChoiceEntry) Descriptor() ([]byte, []int) {
	return file_basic_data_proto_rawDescGZIP(), []int{4, 0}
}

func (x *TagLabel_FilterChoiceEntry) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *TagLabel_FilterChoiceEntry) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

type ABTestConf_MapParamEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   *string `protobuf:"bytes,1,opt,name=key,proto3,oneof" json:"key,omitempty"`
	Value *string `protobuf:"bytes,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
}

func (x *ABTestConf_MapParamEntry) Reset() {
	*x = ABTestConf_MapParamEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_basic_data_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ABTestConf_MapParamEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ABTestConf_MapParamEntry) ProtoMessage() {}

func (x *ABTestConf_MapParamEntry) ProtoReflect() protoreflect.Message {
	mi := &file_basic_data_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ABTestConf_MapParamEntry.ProtoReflect.Descriptor instead.
func (*ABTestConf_MapParamEntry) Descriptor() ([]byte, []int) {
	return file_basic_data_proto_rawDescGZIP(), []int{10, 0}
}

func (x *ABTestConf_MapParamEntry) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *ABTestConf_MapParamEntry) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

var File_basic_data_proto protoreflect.FileDescriptor

var file_basic_data_proto_rawDesc = []byte{
	0x0a, 0x10, 0x62, 0x61, 0x73, 0x69, 0x63, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x04, 0x51, 0x51, 0x54, 0x56, 0x22, 0xfe, 0x02, 0x0a, 0x09, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x20, 0x0a, 0x09, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52,
	0x0a, 0x73, 0x68, 0x61, 0x72, 0x65, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2a,
	0x0a, 0x0e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0d, 0x73, 0x68, 0x61, 0x72, 0x65, 0x53,
	0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0d, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x5f, 0x69, 0x6d, 0x67, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x03, 0x52, 0x0b, 0x73, 0x68, 0x61, 0x72, 0x65, 0x49, 0x6d, 0x67, 0x55, 0x72, 0x6c,
	0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x76, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x04, 0x52, 0x03, 0x76, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x63, 0x69,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x03, 0x63, 0x69, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x38, 0x0a, 0x16, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x74, 0x69,
	0x63, 0x61, 0x6c, 0x5f, 0x69, 0x6d, 0x67, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x06, 0x52, 0x13, 0x73, 0x68, 0x61, 0x72, 0x65, 0x56, 0x65, 0x72, 0x74, 0x69, 0x63,
	0x61, 0x6c, 0x49, 0x6d, 0x67, 0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x42, 0x10, 0x0a, 0x0e,
	0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x69, 0x6d, 0x67, 0x5f, 0x75, 0x72, 0x6c, 0x42, 0x06,
	0x0a, 0x04, 0x5f, 0x76, 0x69, 0x64, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x63, 0x69, 0x64, 0x42, 0x19,
	0x0a, 0x17, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61,
	0x6c, 0x5f, 0x69, 0x6d, 0x67, 0x5f, 0x75, 0x72, 0x6c, 0x22, 0x7b, 0x0a, 0x0a, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x22, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x4b, 0x65, 0x79, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x01, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x5f, 0x6b, 0x65, 0x79, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x6f, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x15, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x03, 0x75, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x0b, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x51,
	0x51, 0x54, 0x56, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x48, 0x01,
	0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x42,
	0x06, 0x0a, 0x04, 0x5f, 0x75, 0x72, 0x6c, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x22, 0xb0, 0x01, 0x0a, 0x09, 0x4d, 0x61, 0x72, 0x6b,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x17, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x88, 0x01, 0x01, 0x12, 0x38,
	0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x17, 0x2e, 0x51, 0x51, 0x54, 0x56, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x01, 0x52, 0x08, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x66, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x02, 0x52, 0x0c, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x88,
	0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x66, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x22, 0xac, 0x02, 0x0a, 0x08, 0x54,
	0x61, 0x67, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x17, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x22, 0x0a, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x09, 0x74, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6c, 0x6f,
	0x72, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x62, 0x67, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x07, 0x62, 0x67, 0x43, 0x6f, 0x6c, 0x6f,
	0x72, 0x88, 0x01, 0x01, 0x12, 0x45, 0x0a, 0x0d, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x63,
	0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x51, 0x51,
	0x54, 0x56, 0x2e, 0x54, 0x61, 0x67, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x2e, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x1a, 0x57, 0x0a, 0x11, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x15, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x88,
	0x01, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6b, 0x65, 0x79, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x62, 0x67, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x22, 0xc2, 0x09, 0x0a, 0x06, 0x50, 0x6f,
	0x73, 0x74, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0a, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x6d, 0x61, 0x69, 0x6e,
	0x54, 0x69, 0x74, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x73, 0x75,
	0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01,
	0x12, 0x1c, 0x0a, 0x07, 0x69, 0x6d, 0x67, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x03, 0x52, 0x06, 0x69, 0x6d, 0x67, 0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x37,
	0x0a, 0x0f, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x51, 0x51, 0x54, 0x56, 0x2e, 0x4d,
	0x61, 0x72, 0x6b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x0d, 0x6d, 0x61, 0x72, 0x6b, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x0b, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x51,
	0x51, 0x54, 0x56, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x48, 0x04,
	0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x12,
	0x29, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x51, 0x51, 0x54, 0x56, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x05, 0x52,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x06, 0x61, 0x64,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x05, 0x61, 0x64,
	0x4b, 0x65, 0x79, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x08, 0x70, 0x6f, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x17, 0x65, 0x70, 0x69, 0x73,
	0x6f, 0x64, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x48, 0x08, 0x52, 0x15, 0x65, 0x70, 0x69,
	0x73, 0x6f, 0x64, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x0e, 0x74, 0x61, 0x67, 0x5f, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x51, 0x51, 0x54, 0x56, 0x2e, 0x54, 0x61, 0x67, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x0c, 0x74,
	0x61, 0x67, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x03, 0x63,
	0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x03, 0x63, 0x69, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x0a, 0x52, 0x03, 0x70, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x76, 0x69, 0x64,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x03, 0x76, 0x69, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x29, 0x0a, 0x0e, 0x69, 0x6d, 0x67, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x0c, 0x69, 0x6d, 0x67, 0x4d,
	0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x74,
	0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x03, 0x74, 0x69, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x2e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x51, 0x51, 0x54, 0x56, 0x2e, 0x41, 0x63,
	0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x1e, 0x0a, 0x08, 0x74, 0x69, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x0e, 0x52, 0x07, 0x74, 0x69, 0x64, 0x54, 0x79, 0x70, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x0f, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x75, 0x72, 0x6c,
	0x5f, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x10, 0x52, 0x08,
	0x75, 0x72, 0x6c, 0x4f, 0x75, 0x74, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x65,
	0x78, 0x70, 0x6f, 0x73, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x11, 0x52, 0x0b, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x0a, 0x62, 0x67, 0x5f, 0x69, 0x6d, 0x67, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x48, 0x12, 0x52, 0x08, 0x62, 0x67, 0x49, 0x6d, 0x67,
	0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0c, 0x6c, 0x6f, 0x67, 0x6f, 0x5f, 0x69,
	0x6d, 0x67, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x48, 0x13, 0x52, 0x0a,
	0x6c, 0x6f, 0x67, 0x6f, 0x49, 0x6d, 0x67, 0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a,
	0x0a, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x68, 0x69, 0x64, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x14, 0x52, 0x09, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x48, 0x69, 0x64, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x15, 0x0a, 0x03, 0x6e, 0x69, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x48, 0x15,
	0x52, 0x03, 0x6e, 0x69, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6d, 0x61, 0x69,
	0x6e, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x73, 0x75, 0x62, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x69, 0x6d, 0x67, 0x5f, 0x75, 0x72, 0x6c,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x61, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x65, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65,
	0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x42, 0x06, 0x0a, 0x04, 0x5f, 0x63, 0x69, 0x64, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x70, 0x69, 0x64,
	0x42, 0x06, 0x0a, 0x04, 0x5f, 0x76, 0x69, 0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x69, 0x6d, 0x67,
	0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x42, 0x06, 0x0a, 0x04, 0x5f,
	0x74, 0x69, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x69, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x42, 0x06, 0x0a, 0x04, 0x5f, 0x75, 0x72, 0x6c, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x75, 0x72, 0x6c,
	0x5f, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x73,
	0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x62, 0x67, 0x5f, 0x69,
	0x6d, 0x67, 0x5f, 0x75, 0x72, 0x6c, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6c, 0x6f, 0x67, 0x6f, 0x5f,
	0x69, 0x6d, 0x67, 0x5f, 0x75, 0x72, 0x6c, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x5f, 0x68, 0x69, 0x64, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6e, 0x69, 0x64, 0x22, 0xcd,
	0x01, 0x0a, 0x0a, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x73, 0x68, 0x6f, 0x72,
	0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x09,
	0x73, 0x68, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09,
	0x6c, 0x6f, 0x6e, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x02, 0x52, 0x08, 0x6c, 0x6f, 0x6e, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26,
	0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x76, 0x69, 0x70, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x03, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73,
	0x56, 0x69, 0x70, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x6c, 0x6f, 0x6e, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0f, 0x0a,
	0x0d, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x76, 0x69, 0x70, 0x22, 0x9e,
	0x0c, 0x0a, 0x0d, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x15, 0x0a, 0x03, 0x76, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x03, 0x76, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x0c, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e,
	0x51, 0x51, 0x54, 0x56, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x48, 0x01, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x06, 0x70, 0x6f, 0x73, 0x74, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x51, 0x51, 0x54, 0x56, 0x2e, 0x50,
	0x6f, 0x73, 0x74, 0x65, 0x72, 0x48, 0x02, 0x52, 0x06, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x88,
	0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x03, 0x52, 0x09, 0x73, 0x6b, 0x69, 0x70, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x65,
	0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x48, 0x04, 0x52, 0x07, 0x73, 0x6b, 0x69, 0x70,
	0x45, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x51, 0x51, 0x54, 0x56, 0x2e, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x05, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01,
	0x01, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x06, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x4d, 0x0a, 0x13,
	0x70, 0x6c, 0x61, 0x79, 0x5f, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x51, 0x51, 0x54, 0x56,
	0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x48, 0x07, 0x52, 0x11, 0x70, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x70, 0x79, 0x72,
	0x69, 0x67, 0x68, 0x74, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x41, 0x0a, 0x13, 0x77,
	0x61, 0x74, 0x63, 0x68, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x74,
	0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x51, 0x51, 0x54, 0x56, 0x2e,
	0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x48, 0x08, 0x52, 0x11, 0x77, 0x61, 0x74, 0x63, 0x68, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x33,
	0x0a, 0x0a, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x51, 0x51, 0x54, 0x56, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x49,
	0x74, 0x65, 0x6d, 0x48, 0x09, 0x52, 0x09, 0x73, 0x68, 0x61, 0x72, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x79,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x0b, 0x6e, 0x65,
	0x78, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x4b, 0x65, 0x79, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x12,
	0x74, 0x72, 0x79, 0x5f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0b, 0x52, 0x10, 0x74, 0x72, 0x79, 0x57,
	0x61, 0x74, 0x63, 0x68, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12,
	0x15, 0x0a, 0x03, 0x63, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x03,
	0x63, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x5f, 0x70, 0x72,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x48, 0x0d, 0x52, 0x0a, 0x70,
	0x61, 0x79, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x02, 0x48, 0x0e, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x61, 0x74, 0x69,
	0x6f, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x12, 0x6e, 0x6f, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x0f, 0x52, 0x10, 0x6e, 0x6f, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x15, 0x64, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x6c, 0x61, 0x79,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x48, 0x10, 0x52, 0x13, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x79, 0x88, 0x01, 0x01,
	0x12, 0x22, 0x0a, 0x0a, 0x65, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x11, 0x52, 0x09, 0x65, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x06, 0x69, 0x73, 0x5f, 0x64, 0x72, 0x6d, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x12, 0x52, 0x05, 0x69, 0x73, 0x44, 0x72, 0x6d, 0x88, 0x01, 0x01,
	0x12, 0x26, 0x0a, 0x0c, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x48, 0x13, 0x52, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x48, 0x14, 0x52, 0x09,
	0x70, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x48, 0x15,
	0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a,
	0x08, 0x76, 0x69, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x16, 0x52, 0x07, 0x76, 0x69, 0x64, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x48, 0x17, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x61, 0x75,
	0x74, 0x6f, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x18, 0x52, 0x0c, 0x61, 0x75, 0x74, 0x6f, 0x50, 0x6c, 0x61, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x61, 0x67, 0x65, 0x5f, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x05, 0x48, 0x19, 0x52, 0x08, 0x61, 0x67, 0x65, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x65, 0x70, 0x69, 0x73, 0x6f,
	0x64, 0x65, 0x5f, 0x69, 0x64, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x1a, 0x52, 0x0d, 0x65, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x54, 0x65, 0x78,
	0x74, 0x88, 0x01, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x76, 0x69, 0x64, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x6b, 0x69,
	0x70, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x73, 0x6b, 0x69, 0x70,
	0x5f, 0x65, 0x6e, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x70, 0x6c,
	0x61, 0x79, 0x5f, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6e, 0x65, 0x78,
	0x74, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x74,
	0x72, 0x79, 0x5f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x63, 0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x61,
	0x79, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x6e,
	0x6f, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x65, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x65, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x69,
	0x73, 0x5f, 0x64, 0x72, 0x6d, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x76, 0x69, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x61,
	0x75, 0x74, 0x6f, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x61, 0x67, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f,
	0x65, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x22,
	0x8c, 0x04, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x04,
	0x76, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x76, 0x75,
	0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x69, 0x63, 0x6b, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x04, 0x6e, 0x69, 0x63, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x1b,
	0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02,
	0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x6c,
	0x69, 0x6b, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x48,
	0x03, 0x52, 0x09, 0x6c, 0x69, 0x6b, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x24, 0x0a, 0x0b, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x04, 0x48, 0x04, 0x52, 0x0a, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x48, 0x05, 0x52,
	0x0d, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x26, 0x0a, 0x0c, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x48, 0x06, 0x52, 0x0b, 0x66, 0x6f, 0x6c, 0x6c, 0x6f,
	0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x67, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x48, 0x07, 0x52, 0x06, 0x67, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64,
	0x61, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x08, 0x62, 0x69, 0x72, 0x74,
	0x68, 0x64, 0x61, 0x79, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x69, 0x6e, 0x74, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52,
	0x0c, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01,
	0x12, 0x19, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x0a, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f,
	0x76, 0x75, 0x69, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x69, 0x63, 0x6b, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6c, 0x69, 0x6b,
	0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x76, 0x69, 0x64, 0x65,
	0x6f, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x66, 0x6f, 0x6c, 0x6c,
	0x6f, 0x77, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x66,
	0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x62, 0x69, 0x72, 0x74, 0x68,
	0x64, 0x61, 0x79, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x22, 0xfe,
	0x03, 0x0a, 0x10, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x50, 0x6f, 0x73,
	0x74, 0x65, 0x72, 0x12, 0x15, 0x0a, 0x03, 0x76, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x03, 0x76, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x63, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x03, 0x63, 0x69, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x29, 0x0a, 0x06, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x51, 0x51, 0x54, 0x56, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x48,
	0x02, 0x52, 0x06, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x06,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x51,
	0x51, 0x54, 0x56, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x03, 0x52, 0x06, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x51, 0x51, 0x54,
	0x56, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x04, 0x52, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x0a, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x51, 0x51, 0x54, 0x56, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x48, 0x05,
	0x52, 0x09, 0x73, 0x68, 0x61, 0x72, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x22,
	0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x04, 0x48, 0x06, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x07, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x88, 0x01,
	0x01, 0x12, 0x22, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x08, 0x48, 0x09, 0x52, 0x09, 0x69, 0x73, 0x57, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x64, 0x88, 0x01, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x76, 0x69, 0x64, 0x42, 0x06, 0x0a,
	0x04, 0x5f, 0x63, 0x69, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x6c, 0x61,
	0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x6e,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x69, 0x73, 0x5f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x22,
	0xc8, 0x01, 0x0a, 0x0a, 0x41, 0x42, 0x54, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x1c,
	0x0a, 0x07, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x06, 0x74, 0x65, 0x73, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x09,
	0x6d, 0x61, 0x70, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x51, 0x51, 0x54, 0x56, 0x2e, 0x41, 0x42, 0x54, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x2e, 0x4d, 0x61, 0x70, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x08, 0x6d, 0x61, 0x70, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x1a, 0x53, 0x0a, 0x0d, 0x4d, 0x61, 0x70,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x15, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x88, 0x01,
	0x01, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x42, 0x06, 0x0a, 0x04,
	0x5f, 0x6b, 0x65, 0x79, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x22, 0x6e, 0x0a, 0x0a, 0x41, 0x42,
	0x54, 0x65, 0x73, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x09,
	0x74, 0x65, 0x73, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x51, 0x51, 0x54, 0x56, 0x2e, 0x41, 0x42, 0x54, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x52, 0x08, 0x74, 0x65, 0x73, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x22, 0x57, 0x0a, 0x0c, 0x50, 0x6c,
	0x61, 0x79, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x15, 0x0a, 0x03, 0x75, 0x72,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x88, 0x01,
	0x01, 0x12, 0x1c, 0x0a, 0x07, 0x69, 0x6d, 0x67, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x01, 0x52, 0x06, 0x69, 0x6d, 0x67, 0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x42,
	0x06, 0x0a, 0x04, 0x5f, 0x75, 0x72, 0x6c, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x69, 0x6d, 0x67, 0x5f,
	0x75, 0x72, 0x6c, 0x22, 0x90, 0x04, 0x0a, 0x06, 0x43, 0x50, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17,
	0x0a, 0x04, 0x76, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x04,
	0x76, 0x75, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x69, 0x63, 0x6b, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x04, 0x6e, 0x69, 0x63, 0x6b, 0x88, 0x01, 0x01,
	0x12, 0x1b, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x02, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a,
	0x09, 0x6c, 0x69, 0x6b, 0x65, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x03, 0x52, 0x09, 0x6c, 0x69, 0x6b, 0x65, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x23, 0x0a, 0x0a, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x04, 0x52, 0x0a, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x72, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x48, 0x05, 0x52, 0x0d,
	0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x25, 0x0a, 0x0b, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x05, 0x48, 0x06, 0x52, 0x0b, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x51, 0x51, 0x54, 0x56, 0x2e, 0x47,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x48, 0x07, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x88,
	0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x08, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79,
	0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x74,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x05, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x76, 0x75, 0x69, 0x64,
	0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x69, 0x63, 0x6b, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x61, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6c, 0x69, 0x6b, 0x65, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x22, 0x4c, 0x0a, 0x0e, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x28, 0x0a, 0x0d, 0x65, 0x78, 0x70, 0x65,
	0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x0c, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x22, 0xb9, 0x01, 0x0a, 0x08, 0x52, 0x61, 0x6e, 0x6b, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x17, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x00, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x48, 0x01, 0x52, 0x05, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0c, 0x69,
	0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1f,
	0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x03, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x88, 0x01, 0x01, 0x42,
	0x07, 0x0a, 0x05, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x22, 0x82, 0x01, 0x0a, 0x0a, 0x52, 0x61, 0x6e, 0x6b, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x12,
	0x29, 0x0a, 0x06, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x51, 0x51, 0x54, 0x56, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52,
	0x06, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x09, 0x72, 0x61,
	0x6e, 0x6b, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x51, 0x51, 0x54, 0x56, 0x2e, 0x52, 0x61, 0x6e, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x01, 0x52,
	0x08, 0x72, 0x61, 0x6e, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x72, 0x61, 0x6e, 0x6b,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0xc3, 0x01, 0x0a, 0x07, 0x53, 0x75, 0x62, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x1f, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x73, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x39, 0x0a, 0x0c, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x51, 0x51, 0x54, 0x56, 0x2e,
	0x56, 0x69, 0x64, 0x65, 0x6f, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x01, 0x52, 0x0b, 0x76,
	0x69, 0x64, 0x65, 0x6f, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a,
	0x09, 0x6c, 0x69, 0x6b, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x51, 0x51, 0x54, 0x56, 0x2e, 0x4c, 0x69, 0x6b, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x48, 0x02, 0x52, 0x08, 0x6c, 0x69, 0x6b, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x73, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x6c, 0x69, 0x6b, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x9f, 0x02, 0x0a, 0x0b,
	0x56, 0x69, 0x64, 0x65, 0x6f, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x0e, 0x77,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x0d, 0x77, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x64, 0x61, 0x6e, 0x6d, 0x75,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52,
	0x0b, 0x64, 0x61, 0x6e, 0x6d, 0x75, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12,
	0x1f, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x48, 0x02, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01,
	0x12, 0x24, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x48, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x6c, 0x69, 0x6b, 0x65, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x48, 0x04, 0x52, 0x0a, 0x6c,
	0x69, 0x6b, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x88, 0x01, 0x01, 0x42, 0x11, 0x0a, 0x0f,
	0x5f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x64, 0x61, 0x6e, 0x6d, 0x75, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x6c, 0x69, 0x6b, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x95, 0x02,
	0x0a, 0x08, 0x56, 0x6f, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x28, 0x0a, 0x0d, 0x73, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x07, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x51, 0x51, 0x54, 0x56, 0x2e, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x03, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12,
	0x2a, 0x0a, 0x0e, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0d, 0x62, 0x75, 0x74, 0x74, 0x6f,
	0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f,
	0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x9f, 0x02, 0x0a, 0x09, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x22, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x07, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x66, 0x61, 0x63, 0x65, 0x5f,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x02, 0x52, 0x0c, 0x66, 0x61, 0x63, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x88,
	0x01, 0x01, 0x12, 0x29, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x51, 0x51, 0x54, 0x56, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x03, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a,
	0x09, 0x76, 0x6f, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x51, 0x51, 0x54, 0x56, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x48, 0x04, 0x52, 0x08, 0x76, 0x6f, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f,
	0x66, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x76, 0x6f,
	0x74, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0xa2, 0x01, 0x0a, 0x09, 0x41, 0x63, 0x74, 0x6f,
	0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x37, 0x0a, 0x0f, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x51, 0x51, 0x54, 0x56,
	0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0c, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x01, 0x52, 0x0b, 0x70, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x88, 0x01,
	0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0x84, 0x03, 0x0a,
	0x0a, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x63, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x03, 0x63, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a,
	0x0e, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x51, 0x51, 0x54, 0x56, 0x2e, 0x4e, 0x65, 0x78,
	0x74, 0x50, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x02, 0x52, 0x0c, 0x6e, 0x65, 0x78,
	0x74, 0x50, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x0d,
	0x70, 0x6c, 0x61, 0x79, 0x5f, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x51, 0x51, 0x54, 0x56, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x43,
	0x61, 0x6c, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x48, 0x03, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x79, 0x43,
	0x61, 0x6c, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x11, 0x70, 0x6c,
	0x61, 0x79, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x75, 0x69, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x51, 0x51, 0x54, 0x56, 0x2e, 0x50, 0x6c, 0x61,
	0x79, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x69, 0x54, 0x79, 0x70, 0x65, 0x48, 0x04, 0x52, 0x0e, 0x70,
	0x6c, 0x61, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x69, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x24, 0x0a, 0x0b, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x0a, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49,
	0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x42, 0x06, 0x0a, 0x04, 0x5f, 0x63, 0x69, 0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6e, 0x65, 0x78,
	0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x42, 0x10, 0x0a, 0x0e, 0x5f,
	0x70, 0x6c, 0x61, 0x79, 0x5f, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x14, 0x0a,
	0x12, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x75, 0x69, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x22, 0xfd, 0x04, 0x0a, 0x14, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x42, 0x61, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x15, 0x0a, 0x03,
	0x76, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x03, 0x76, 0x69, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x63, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x01, 0x52, 0x03, 0x63, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x76, 0x69,
	0x64, 0x65, 0x6f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02,
	0x52, 0x09, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2e,
	0x0a, 0x10, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x03, 0x52, 0x0f, 0x70, 0x72, 0x69, 0x6d,
	0x61, 0x72, 0x79, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x88, 0x01, 0x01, 0x12, 0x1c,
	0x0a, 0x07, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x04, 0x52, 0x06, 0x61, 0x72, 0x65, 0x61, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x0b,
	0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x51, 0x51, 0x54, 0x56, 0x2e, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x46, 0x0a, 0x12, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x51, 0x51,
	0x54, 0x56, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x61, 0x74, 0x61,
	0x48, 0x05, 0x52, 0x10, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x56, 0x69, 0x64, 0x65, 0x6f,
	0x44, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x12, 0x66, 0x75, 0x6c, 0x6c, 0x5f,
	0x65, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x06, 0x52, 0x10, 0x66, 0x75, 0x6c, 0x6c, 0x45, 0x70, 0x69, 0x73, 0x6f,
	0x64, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x65, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x07, 0x52, 0x0d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x70, 0x69, 0x73,
	0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x48, 0x08, 0x52, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b,
	0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x03, 0x48, 0x09, 0x52, 0x0a, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x76, 0x69, 0x64, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x63,
	0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x5f,
	0x69, 0x64, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x76,
	0x69, 0x64, 0x65, 0x6f, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x66, 0x75,
	0x6c, 0x6c, 0x5f, 0x65, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x65, 0x70, 0x69, 0x73,
	0x6f, 0x64, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x22, 0x63, 0x0a, 0x0f, 0x54, 0x6f, 0x6f, 0x6c, 0x62, 0x61, 0x72, 0x49, 0x74,
	0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x6f,
	0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x06, 0x69, 0x73, 0x53, 0x68, 0x6f,
	0x77, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x88, 0x01,
	0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x68, 0x0a, 0x09, 0x57, 0x61, 0x74, 0x63,
	0x68, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x6f, 0x77,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x06, 0x69, 0x73, 0x53, 0x68, 0x6f, 0x77,
	0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x09, 0x69, 0x73, 0x57, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x69, 0x73, 0x5f, 0x73,
	0x68, 0x6f, 0x77, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x69, 0x73, 0x5f, 0x77, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x64, 0x22, 0x89, 0x02, 0x0a, 0x08, 0x4c, 0x69, 0x6b, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x1e, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x07, 0x64, 0x61, 0x74, 0x61, 0x4b, 0x65, 0x79, 0x88, 0x01, 0x01, 0x12,
	0x22, 0x0a, 0x0a, 0x6c, 0x69, 0x6b, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x09, 0x6c, 0x69, 0x6b, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x6c, 0x69, 0x6b, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x08, 0x6c, 0x69, 0x6b, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x09, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x4b, 0x65, 0x79, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x04, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6b, 0x65, 0x79,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6c, 0x69, 0x6b, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x6c, 0x69, 0x6b, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x42, 0x10, 0x0a, 0x0e,
	0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0xaf,
	0x01, 0x0a, 0x0c, 0x4e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x1e, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x07, 0x64, 0x61, 0x74, 0x61, 0x4b, 0x65, 0x79, 0x88, 0x01, 0x01, 0x12,
	0x26, 0x0a, 0x0c, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0b, 0x70, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0d, 0x68, 0x61, 0x73, 0x5f, 0x6e,
	0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x02,
	0x52, 0x0b, 0x68, 0x61, 0x73, 0x4e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6b, 0x65, 0x79, 0x42, 0x0f, 0x0a,
	0x0d, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x42, 0x10,
	0x0a, 0x0e, 0x5f, 0x68, 0x61, 0x73, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65,
	0x22, 0x7b, 0x0a, 0x0b, 0x43, 0x6f, 0x6c, 0x64, 0x54, 0x61, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x12,
	0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x69,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a,
	0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x02, 0x52, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x42,
	0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x22, 0xcb, 0x03,
	0x0a, 0x09, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x12, 0x15, 0x0a, 0x03, 0x63,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x03, 0x63, 0x69, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x01, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a,
	0x10, 0x70, 0x69, 0x63, 0x5f, 0x75, 0x72, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0e, 0x70, 0x69, 0x63, 0x55, 0x72,
	0x6c, 0x56, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x12,
	0x70, 0x69, 0x63, 0x5f, 0x75, 0x72, 0x6c, 0x5f, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x6e, 0x74,
	0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x10, 0x70, 0x69, 0x63, 0x55,
	0x72, 0x6c, 0x48, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x12,
	0x17, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52,
	0x04, 0x64, 0x65, 0x73, 0x63, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x48, 0x05, 0x52, 0x08, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x0a, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x51, 0x51, 0x54, 0x56, 0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x09, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x0e, 0x74, 0x61,
	0x67, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x51, 0x51, 0x54, 0x56, 0x2e, 0x54, 0x61, 0x67, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x52, 0x0c, 0x74, 0x61, 0x67, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x24, 0x0a, 0x0b, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x03, 0x48, 0x06, 0x52, 0x0a, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x63, 0x69, 0x64, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x70, 0x69, 0x63,
	0x5f, 0x75, 0x72, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x42, 0x15, 0x0a,
	0x13, 0x5f, 0x70, 0x69, 0x63, 0x5f, 0x75, 0x72, 0x6c, 0x5f, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65,
	0x6e, 0x74, 0x61, 0x6c, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x6f, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x6a, 0x0a, 0x09, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x08, 0x72, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x09,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x22, 0xdd, 0x01, 0x0a, 0x0d, 0x41, 0x6c, 0x62, 0x75,
	0x6d, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x33, 0x0a, 0x0a, 0x61, 0x6c, 0x62,
	0x75, 0x6d, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x51, 0x51, 0x54, 0x56, 0x2e, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00,
	0x52, 0x09, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x12, 0x33,
	0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x51, 0x51, 0x54, 0x56, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x48, 0x01, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x51, 0x51, 0x54, 0x56, 0x2e, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x48, 0x02, 0x52, 0x0a, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x64, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x61,
	0x6c, 0x62, 0x75, 0x6d, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x64, 0x61, 0x74, 0x61, 0x22, 0x6c, 0x0a, 0x0a, 0x42, 0x75, 0x74, 0x74, 0x6f,
	0x6e, 0x4d, 0x6f, 0x72, 0x65, 0x12, 0x1c, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x6f, 0x77,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x06, 0x69, 0x73, 0x53, 0x68, 0x6f, 0x77,
	0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x51, 0x51, 0x54, 0x56, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x01, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2a, 0x55, 0x0a, 0x11, 0x4d, 0x61, 0x72, 0x6b, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x0a, 0x4c, 0x4f,
	0x57, 0x45, 0x52, 0x5f, 0x4c, 0x45, 0x46, 0x54, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x4f,
	0x57, 0x45, 0x52, 0x5f, 0x52, 0x49, 0x47, 0x48, 0x54, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x55,
	0x50, 0x50, 0x45, 0x52, 0x5f, 0x52, 0x49, 0x47, 0x48, 0x54, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a,
	0x55, 0x50, 0x50, 0x45, 0x52, 0x5f, 0x4c, 0x45, 0x46, 0x54, 0x10, 0x03, 0x2a, 0x3b, 0x0a, 0x06,
	0x49, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x44, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x43, 0x49, 0x44, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x44, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x50, 0x49, 0x44, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x44, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x56, 0x49, 0x44, 0x10, 0x02, 0x2a, 0x79, 0x0a, 0x10, 0x56, 0x69, 0x64,
	0x65, 0x6f, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a,
	0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x56, 0x4f,
	0x44, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x56, 0x4f, 0x44, 0x5f, 0x56, 0x49, 0x50, 0x5f, 0x45,
	0x58, 0x4d, 0x54, 0x10, 0x05, 0x12, 0x0c, 0x0a, 0x08, 0x56, 0x49, 0x50, 0x5f, 0x4f, 0x4e, 0x4c,
	0x59, 0x10, 0x06, 0x12, 0x10, 0x0a, 0x0c, 0x46, 0x52, 0x45, 0x45, 0x5f, 0x46, 0x4f, 0x52, 0x5f,
	0x41, 0x4c, 0x4c, 0x10, 0x08, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x49, 0x4e, 0x47, 0x4c, 0x45, 0x5f,
	0x50, 0x41, 0x59, 0x10, 0x07, 0x12, 0x0d, 0x0a, 0x09, 0x56, 0x4f, 0x44, 0x5f, 0x41, 0x48, 0x45,
	0x41, 0x44, 0x10, 0x0c, 0x2a, 0x59, 0x0a, 0x12, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x6f, 0x70,
	0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x4c,
	0x41, 0x59, 0x5f, 0x49, 0x4e, 0x5f, 0x57, 0x45, 0x42, 0x56, 0x49, 0x45, 0x57, 0x10, 0x00, 0x12,
	0x0f, 0x0a, 0x0b, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x49, 0x4e, 0x5f, 0x41, 0x50, 0x50, 0x10, 0x01,
	0x12, 0x1d, 0x0a, 0x19, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x49, 0x4e, 0x5f, 0x57, 0x45, 0x42, 0x56,
	0x49, 0x45, 0x57, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x53, 0x54, 0x4d, 0x54, 0x10, 0x65, 0x2a,
	0x3e, 0x0a, 0x06, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x0f, 0x0a, 0x0b, 0x47, 0x45, 0x4e,
	0x44, 0x45, 0x52, 0x5f, 0x4d, 0x41, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x47, 0x45,
	0x4e, 0x44, 0x45, 0x52, 0x5f, 0x46, 0x45, 0x4d, 0x41, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x10, 0x0a,
	0x0c, 0x47, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x02, 0x2a,
	0x44, 0x0a, 0x0e, 0x50, 0x6c, 0x61, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x69, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x4c, 0x53, 0x49, 0x54, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x4c,
	0x41, 0x59, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x4f, 0x53,
	0x54, 0x45, 0x52, 0x10, 0x01, 0x2a, 0x44, 0x0a, 0x0e, 0x4c, 0x69, 0x76, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4f, 0x4e, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x45, 0x10, 0x02, 0x2a, 0x66, 0x0a, 0x08, 0x4c,
	0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x4c, 0x4f, 0x41, 0x44, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x15, 0x0a,
	0x11, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4f,
	0x55, 0x54, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x50, 0x52, 0x45, 0x4c, 0x4f, 0x41, 0x44, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x4c,
	0x4f, 0x41, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x45, 0x58, 0x54, 0x50, 0x41, 0x47,
	0x45, 0x10, 0x03, 0x2a, 0x43, 0x0a, 0x10, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x6f, 0x73,
	0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x53, 0x4d, 0x41, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4c, 0x41, 0x52, 0x47, 0x45, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x50, 0x4f, 0x53, 0x54, 0x45, 0x52, 0x10, 0x02, 0x42, 0x0c, 0x5a, 0x0a, 0x2e, 0x2e, 0x2f, 0x2e,
	0x2e, 0x2f, 0x51, 0x51, 0x54, 0x56, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_basic_data_proto_rawDescOnce sync.Once
	file_basic_data_proto_rawDescData = file_basic_data_proto_rawDesc
)

func file_basic_data_proto_rawDescGZIP() []byte {
	file_basic_data_proto_rawDescOnce.Do(func() {
		file_basic_data_proto_rawDescData = protoimpl.X.CompressGZIP(file_basic_data_proto_rawDescData)
	})
	return file_basic_data_proto_rawDescData
}

var file_basic_data_proto_enumTypes = make([]protoimpl.EnumInfo, 9)
var file_basic_data_proto_msgTypes = make([]protoimpl.MessageInfo, 35)
var file_basic_data_proto_goTypes = []interface{}{
	(MarkLabelPosition)(0),             // 0: QQTV.MarkLabelPosition
	(IdType)(0),                        // 1: QQTV.IdType
	(VideoPaymentType)(0),              // 2: QQTV.VideoPaymentType
	(VideoCopyrightType)(0),            // 3: QQTV.VideoCopyrightType
	(Gender)(0),                        // 4: QQTV.Gender
	(PlayListUiType)(0),                // 5: QQTV.PlayListUiType
	(LiveNumberType)(0),                // 6: QQTV.LiveNumberType
	(LoadType)(0),                      // 7: QQTV.LoadType
	(SearchPosterType)(0),              // 8: QQTV.SearchPosterType
	(*ShareItem)(nil),                  // 9: QQTV.ShareItem
	(*ReportData)(nil),                 // 10: QQTV.ReportData
	(*Action)(nil),                     // 11: QQTV.Action
	(*MarkLabel)(nil),                  // 12: QQTV.MarkLabel
	(*TagLabel)(nil),                   // 13: QQTV.TagLabel
	(*Poster)(nil),                     // 14: QQTV.Poster
	(*Definition)(nil),                 // 15: QQTV.Definition
	(*VideoItemData)(nil),              // 16: QQTV.VideoItemData
	(*UserInfo)(nil),                   // 17: QQTV.UserInfo
	(*ShortVideoPoster)(nil),           // 18: QQTV.ShortVideoPoster
	(*ABTestConf)(nil),                 // 19: QQTV.ABTestConf
	(*ABTestList)(nil),                 // 20: QQTV.ABTestList
	(*PlayCalender)(nil),               // 21: QQTV.PlayCalender
	(*CPInfo)(nil),                     // 22: QQTV.CPInfo
	(*ExperimentInfo)(nil),             // 23: QQTV.ExperimentInfo
	(*RankInfo)(nil),                   // 24: QQTV.RankInfo
	(*RankPoster)(nil),                 // 25: QQTV.RankPoster
	(*SubInfo)(nil),                    // 26: QQTV.SubInfo
	(*VideoOption)(nil),                // 27: QQTV.VideoOption
	(*VoteInfo)(nil),                   // 28: QQTV.VoteInfo
	(*ActorInfo)(nil),                  // 29: QQTV.ActorInfo
	(*ActorList)(nil),                  // 30: QQTV.ActorList
	(*SeasonInfo)(nil),                 // 31: QQTV.SeasonInfo
	(*VideoDetailBasicInfo)(nil),       // 32: QQTV.VideoDetailBasicInfo
	(*ToolbarItemInfo)(nil),            // 33: QQTV.ToolbarItemInfo
	(*WatchList)(nil),                  // 34: QQTV.WatchList
	(*LikeInfo)(nil),                   // 35: QQTV.LikeInfo
	(*NextPageInfo)(nil),               // 36: QQTV.NextPageInfo
	(*ColdTagItem)(nil),                // 37: QQTV.ColdTagItem
	(*AlbumData)(nil),                  // 38: QQTV.AlbumData
	(*StateInfo)(nil),                  // 39: QQTV.StateInfo
	(*AlbumDataInfo)(nil),              // 40: QQTV.AlbumDataInfo
	(*ButtonMore)(nil),                 // 41: QQTV.ButtonMore
	(*TagLabel_FilterChoiceEntry)(nil), // 42: QQTV.TagLabel.FilterChoiceEntry
	(*ABTestConf_MapParamEntry)(nil),   // 43: QQTV.ABTestConf.MapParamEntry
}
var file_basic_data_proto_depIdxs = []int32{
	10, // 0: QQTV.Action.report_data:type_name -> QQTV.ReportData
	0,  // 1: QQTV.MarkLabel.position:type_name -> QQTV.MarkLabelPosition
	42, // 2: QQTV.TagLabel.filter_choice:type_name -> QQTV.TagLabel.FilterChoiceEntry
	12, // 3: QQTV.Poster.mark_label_list:type_name -> QQTV.MarkLabel
	10, // 4: QQTV.Poster.report_data:type_name -> QQTV.ReportData
	11, // 5: QQTV.Poster.action:type_name -> QQTV.Action
	13, // 6: QQTV.Poster.tag_label_list:type_name -> QQTV.TagLabel
	29, // 7: QQTV.Poster.actor_list:type_name -> QQTV.ActorInfo
	2,  // 8: QQTV.VideoItemData.payment_type:type_name -> QQTV.VideoPaymentType
	14, // 9: QQTV.VideoItemData.poster:type_name -> QQTV.Poster
	11, // 10: QQTV.VideoItemData.action:type_name -> QQTV.Action
	3,  // 11: QQTV.VideoItemData.play_copyright_type:type_name -> QQTV.VideoCopyrightType
	14, // 12: QQTV.VideoItemData.watch_record_poster:type_name -> QQTV.Poster
	9,  // 13: QQTV.VideoItemData.share_data:type_name -> QQTV.ShareItem
	14, // 14: QQTV.ShortVideoPoster.poster:type_name -> QQTV.Poster
	11, // 15: QQTV.ShortVideoPoster.action:type_name -> QQTV.Action
	17, // 16: QQTV.ShortVideoPoster.user_info:type_name -> QQTV.UserInfo
	9,  // 17: QQTV.ShortVideoPoster.share_item:type_name -> QQTV.ShareItem
	43, // 18: QQTV.ABTestConf.map_param:type_name -> QQTV.ABTestConf.MapParamEntry
	19, // 19: QQTV.ABTestList.test_list:type_name -> QQTV.ABTestConf
	4,  // 20: QQTV.CPInfo.gender:type_name -> QQTV.Gender
	14, // 21: QQTV.RankPoster.poster:type_name -> QQTV.Poster
	24, // 22: QQTV.RankPoster.rank_info:type_name -> QQTV.RankInfo
	27, // 23: QQTV.SubInfo.video_option:type_name -> QQTV.VideoOption
	35, // 24: QQTV.SubInfo.like_info:type_name -> QQTV.LikeInfo
	11, // 25: QQTV.VoteInfo.action:type_name -> QQTV.Action
	11, // 26: QQTV.ActorInfo.action:type_name -> QQTV.Action
	28, // 27: QQTV.ActorInfo.vote_info:type_name -> QQTV.VoteInfo
	29, // 28: QQTV.ActorList.actor_info_list:type_name -> QQTV.ActorInfo
	36, // 29: QQTV.SeasonInfo.next_page_info:type_name -> QQTV.NextPageInfo
	21, // 30: QQTV.SeasonInfo.play_calender:type_name -> QQTV.PlayCalender
	5,  // 31: QQTV.SeasonInfo.play_list_ui_type:type_name -> QQTV.PlayListUiType
	31, // 32: QQTV.VideoDetailBasicInfo.season_list:type_name -> QQTV.SeasonInfo
	16, // 33: QQTV.VideoDetailBasicInfo.current_video_data:type_name -> QQTV.VideoItemData
	29, // 34: QQTV.AlbumData.actor_list:type_name -> QQTV.ActorInfo
	13, // 35: QQTV.AlbumData.tag_label_list:type_name -> QQTV.TagLabel
	38, // 36: QQTV.AlbumDataInfo.album_data:type_name -> QQTV.AlbumData
	39, // 37: QQTV.AlbumDataInfo.state_info:type_name -> QQTV.StateInfo
	10, // 38: QQTV.AlbumDataInfo.reportdata:type_name -> QQTV.ReportData
	11, // 39: QQTV.ButtonMore.action:type_name -> QQTV.Action
	40, // [40:40] is the sub-list for method output_type
	40, // [40:40] is the sub-list for method input_type
	40, // [40:40] is the sub-list for extension type_name
	40, // [40:40] is the sub-list for extension extendee
	0,  // [0:40] is the sub-list for field type_name
}

func init() { file_basic_data_proto_init() }
func file_basic_data_proto_init() {
	if File_basic_data_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_basic_data_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShareItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_basic_data_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_basic_data_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Action); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_basic_data_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarkLabel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_basic_data_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TagLabel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_basic_data_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Poster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_basic_data_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Definition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_basic_data_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoItemData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_basic_data_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_basic_data_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShortVideoPoster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_basic_data_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ABTestConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_basic_data_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ABTestList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_basic_data_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayCalender); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_basic_data_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_basic_data_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExperimentInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_basic_data_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RankInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_basic_data_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RankPoster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_basic_data_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_basic_data_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoOption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_basic_data_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VoteInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_basic_data_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActorInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_basic_data_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActorList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_basic_data_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SeasonInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_basic_data_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoDetailBasicInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_basic_data_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ToolbarItemInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_basic_data_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_basic_data_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LikeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_basic_data_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NextPageInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_basic_data_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ColdTagItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_basic_data_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlbumData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_basic_data_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StateInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_basic_data_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlbumDataInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_basic_data_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ButtonMore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_basic_data_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TagLabel_FilterChoiceEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_basic_data_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ABTestConf_MapParamEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_basic_data_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_basic_data_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_basic_data_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_basic_data_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_basic_data_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_basic_data_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_basic_data_proto_msgTypes[6].OneofWrappers = []interface{}{}
	file_basic_data_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_basic_data_proto_msgTypes[8].OneofWrappers = []interface{}{}
	file_basic_data_proto_msgTypes[9].OneofWrappers = []interface{}{}
	file_basic_data_proto_msgTypes[10].OneofWrappers = []interface{}{}
	file_basic_data_proto_msgTypes[11].OneofWrappers = []interface{}{}
	file_basic_data_proto_msgTypes[12].OneofWrappers = []interface{}{}
	file_basic_data_proto_msgTypes[13].OneofWrappers = []interface{}{}
	file_basic_data_proto_msgTypes[14].OneofWrappers = []interface{}{}
	file_basic_data_proto_msgTypes[15].OneofWrappers = []interface{}{}
	file_basic_data_proto_msgTypes[16].OneofWrappers = []interface{}{}
	file_basic_data_proto_msgTypes[17].OneofWrappers = []interface{}{}
	file_basic_data_proto_msgTypes[18].OneofWrappers = []interface{}{}
	file_basic_data_proto_msgTypes[19].OneofWrappers = []interface{}{}
	file_basic_data_proto_msgTypes[20].OneofWrappers = []interface{}{}
	file_basic_data_proto_msgTypes[21].OneofWrappers = []interface{}{}
	file_basic_data_proto_msgTypes[22].OneofWrappers = []interface{}{}
	file_basic_data_proto_msgTypes[23].OneofWrappers = []interface{}{}
	file_basic_data_proto_msgTypes[24].OneofWrappers = []interface{}{}
	file_basic_data_proto_msgTypes[25].OneofWrappers = []interface{}{}
	file_basic_data_proto_msgTypes[26].OneofWrappers = []interface{}{}
	file_basic_data_proto_msgTypes[27].OneofWrappers = []interface{}{}
	file_basic_data_proto_msgTypes[28].OneofWrappers = []interface{}{}
	file_basic_data_proto_msgTypes[29].OneofWrappers = []interface{}{}
	file_basic_data_proto_msgTypes[30].OneofWrappers = []interface{}{}
	file_basic_data_proto_msgTypes[31].OneofWrappers = []interface{}{}
	file_basic_data_proto_msgTypes[32].OneofWrappers = []interface{}{}
	file_basic_data_proto_msgTypes[33].OneofWrappers = []interface{}{}
	file_basic_data_proto_msgTypes[34].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_basic_data_proto_rawDesc,
			NumEnums:      9,
			NumMessages:   35,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_basic_data_proto_goTypes,
		DependencyIndexes: file_basic_data_proto_depIdxs,
		EnumInfos:         file_basic_data_proto_enumTypes,
		MessageInfos:      file_basic_data_proto_msgTypes,
	}.Build()
	File_basic_data_proto = out.File
	file_basic_data_proto_rawDesc = nil
	file_basic_data_proto_goTypes = nil
	file_basic_data_proto_depIdxs = nil
}
